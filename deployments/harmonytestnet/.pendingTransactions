{
  "0x01f7e111c1fc2e6588bd39545c0f73f346501effc5f98efe09f915f02b474d1c": {
    "name": "SLARegistry",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "SLARegistry",
      "sourceName": "@stacktical/dsla-protocol/contracts/SLARegistry.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract SLORegistry",
              "name": "_sloRegistry",
              "type": "address"
            },
            {
              "internalType": "contract PeriodRegistry",
              "name": "_periodRegistry",
              "type": "address"
            },
            {
              "internalType": "contract MessengerRegistry",
              "name": "_messengerRegistry",
              "type": "address"
            },
            {
              "internalType": "contract StakeRegistry",
              "name": "_stakeRegistry",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_checkPastPeriod",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "sla",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "name": "ReturnLockedValue",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract SLA",
              "name": "sla",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "SLACreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "periodId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sla",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "name": "SLIRequested",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "SLAs",
          "outputs": [
            {
              "internalType": "contract SLA",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "allSLAs",
          "outputs": [
            {
              "internalType": "contract SLA[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "checkPastPeriod",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_sloValue",
              "type": "uint256"
            },
            {
              "internalType": "enum SLORegistry.SLOType",
              "name": "_sloType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "_whitelisted",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "_messengerAddress",
              "type": "address"
            },
            {
              "internalType": "enum PeriodRegistry.PeriodType",
              "name": "_periodType",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "_initialPeriodId",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "_finalPeriodId",
              "type": "uint128"
            },
            {
              "internalType": "string",
              "name": "_ipfsHash",
              "type": "string"
            },
            {
              "internalType": "bytes32[]",
              "name": "_extraData",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint64",
              "name": "_leverage",
              "type": "uint64"
            }
          ],
          "name": "createSLA",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_slaAddress",
              "type": "address"
            }
          ],
          "name": "isRegisteredSLA",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "messengerRegistry",
          "outputs": [
            {
              "internalType": "contract MessengerRegistry",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "periodRegistry",
          "outputs": [
            {
              "internalType": "contract PeriodRegistry",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_messengerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_specificationUrl",
              "type": "string"
            }
          ],
          "name": "registerMessenger",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_periodId",
              "type": "uint256"
            },
            {
              "internalType": "contract SLA",
              "name": "_sla",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_ownerApproval",
              "type": "bool"
            }
          ],
          "name": "requestSLI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract SLA",
              "name": "_sla",
              "type": "address"
            }
          ],
          "name": "returnLockedValue",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "sloRegistry",
          "outputs": [
            {
              "internalType": "contract SLORegistry",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stakeRegistry",
          "outputs": [
            {
              "internalType": "contract StakeRegistry",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "userSLAs",
          "outputs": [
            {
              "internalType": "contract SLA[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e25760003560e01c806368304835116200009957806396bddc10116200006f57806396bddc1014620001b85780639fc4caa514620001c2578063a9e43e7f14620001cc578063c4277a7b14620001e557620000e2565b8063683048351462000180578063788164b1146200018a5780638d2113ed14620001a157620000e2565b80630d0f4db714620000e75780632575d7ca146200010057806350c5abfe1462000117578063516c285714620001465780635a7d1e5d146200016c5780635c4df3321462000176575b600080fd5b620000fe620000f8366004620017b1565b620001fc565b005b620000fe6200011136600462001643565b620007d5565b6200012e6200012836600462001739565b62000c17565b6040516200013d919062001960565b60405180910390f35b6200015d6200015736600462001643565b62000c3f565b6040516200013d919062001ac3565b6200012e62000d93565b6200012e62000da2565b6200012e62000db1565b620000fe6200019b3660046200176b565b62000dc0565b620000fe620001b236600462001688565b6200134b565b6200015d6200140e565b6200012e62001472565b620001d662001481565b6040516200013d919062001b12565b620001d6620001f636600462001643565b620014a5565b600154604051636efe27ef60e11b81526000916001600160a01b03169063ddfc4fde9062000231908a908a9060040162001b32565b60206040518083038186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002859190620016dc565b905080620002b05760405162461bcd60e51b8152600401620002a79062001ba9565b60405180910390fd5b600154604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde90620002e4908a90899060040162001b32565b60206040518083038186803b158015620002fd57600080fd5b505afa15801562000312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003389190620016dc565b9050806200035a5760405162461bcd60e51b8152600401620002a79062001df3565b6001546040516347ef60ed60e11b81526000916001600160a01b031690638fdec1da906200038d908b9060040162001b1d565b60206040518083038186803b158015620003a657600080fd5b505afa158015620003bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e19190620016dc565b905080620004035760405162461bcd60e51b8152600401620002a79062001b72565b866001600160801b0316866001600160801b03161015620004385760405162461bcd60e51b8152600401620002a79062001d83565b7f0000000000000000000000000000000000000000000000000000000000000000156200050d57600154604051631e8760ef60e21b81526000916001600160a01b031690637a1d83bc9062000494908c908c9060040162001b32565b60206040518083038186803b158015620004ad57600080fd5b505afa158015620004c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004e89190620016dc565b905080156200050b5760405162461bcd60e51b8152600401620002a79062001cc4565b505b60025460405163ef4003db60e01b81526000916001600160a01b03169063ef4003db9062000540908d9060040162001960565b60206040518083038186803b1580156200055957600080fd5b505afa1580156200056e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005949190620016dc565b9050600181151514620005bb5760405162461bcd60e51b8152600401620002a79062001ce9565b6000338c8b8d8c8c6004805490508d8d8d604051620005da90620014f3565b620005ef9a99989796959493929190620019d7565b604051809103906000f0801580156200060c573d6000803e3d6000fd5b5090506000809054906101000a90046001600160a01b03166001600160a01b0316630c7ad72b8f8f846040518463ffffffff1660e01b8152600401620006559392919062001e85565b600060405180830381600087803b1580156200067057600080fd5b505af115801562000685573d6000803e3d6000fd5b5050600354604051633d7da60560e11b81526001600160a01b039091169250637afb4c0a9150620006c490339085908e8e0360010190600401620019ab565b600060405180830381600087803b158015620006df57600080fd5b505af1158015620006f4573d6000803e3d6000fd5b505060048054600180820183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319166001600160a01b0387169081179091556000908152600660205260408120805460ff19168317905591549193506200076a9250620014c3565b33600081815260056020908152604080832080546001810182559084529183209091018490555192935090916001600160a01b038516917fb52f284a6c14f1a66ab5513b5b539066933e58e69e6432666f0e3c8c8a7d750391a3505050505050505050505050505050565b620007e081620014a5565b620007ff5760405162461bcd60e51b8152600401620002a79062001c17565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200083957600080fd5b505afa1580156200084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000874919062001669565b6001600160a01b0316336001600160a01b031614620008a75760405162461bcd60e51b8152600401620002a79062001c6b565b6000816001600160a01b0316633385d3346040518163ffffffff1660e01b815260040160206040518083038186803b158015620008e357600080fd5b505afa158015620008f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200091e91906200171a565b6001600160801b031690506000826001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200096557600080fd5b505afa1580156200097a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a09190620016fb565b60015460405160016259edcb60e01b031981529192506000916001600160a01b039091169063ffa6123590620009dd908590879060040162001b59565b604080518083038186803b158015620009f557600080fd5b505afa15801562000a0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a309190620018ae565b9150506000846001600160a01b0316634190edde856040518263ffffffff1660e01b815260040162000a63919062001e55565b60606040518083038186803b15801562000a7c57600080fd5b505afa15801562000a91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab79190620018d2565b92505050846001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000af557600080fd5b505afa15801562000b0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b309190620016dc565b8062000b55575081421015801562000b555750600081600281111562000b5257fe5b14155b62000b745760405162461bcd60e51b8152600401620002a79062001c3c565b60405133906001600160a01b038716907f892dba94a39dc15a34a9767dc9a0e553ace780857b076507becf599634bfbb6790600090a36003546040516312baebe560e11b81526001600160a01b0390911690632575d7ca9062000bdc90889060040162001960565b600060405180830381600087803b15801562000bf757600080fd5b505af115801562000c0c573d6000803e3d6000fd5b505050505050505050565b6004818154811062000c2557fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260056020526040902054606090818167ffffffffffffffff8111801562000c7457600080fd5b5060405190808252806020026020018201604052801562000c9f578160200160208202803683370190505b506001600160a01b0385166000908152600560209081526040918290208054835181840281018401909452808452939450606093909183018282801562000d0657602002820191906000526020600020905b81548152602001906001019080831162000cf1575b50939450600093505050505b8381101562000d8957600482828151811062000d2a57fe5b60200260200101518154811062000d3d57fe5b9060005260206000200160009054906101000a90046001600160a01b031683828151811062000d6857fe5b6001600160a01b039092166020928302919091019091015260010162000d12565b5090949350505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b62000dcb82620014a5565b62000dea5760405162461bcd60e51b8152600401620002a79062001c17565b816001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2457600080fd5b505afa15801562000e39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5f919062001752565b831462000e805760405162461bcd60e51b8152600401620002a79062001d4c565b6040516320c876ef60e11b81526000906001600160a01b03841690634190edde9062000eb190879060040162001e55565b60606040518083038186803b15801562000eca57600080fd5b505afa15801562000edf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f059190620018d2565b92506000915062000f139050565b81600281111562000f2057fe5b1462000f405760405162461bcd60e51b8152600401620002a79062001d20565b6000836001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f7c57600080fd5b505afa15801562000f91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fb79190620016dc565b9050801562000fda5760405162461bcd60e51b8152600401620002a79062001e2a565b60405163021eef7f60e01b81526000906001600160a01b0386169063021eef7f906200100b90899060040162001e55565b60206040518083038186803b1580156200102457600080fd5b505afa15801562001039573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105f9190620016dc565b905080620010815760405162461bcd60e51b8152600401620002a79062001dc8565b6000856001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620010bd57600080fd5b505afa158015620010d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f89190620016fb565b6001546040516331edb3ad60e21b81529192506000916001600160a01b039091169063c7b6ceb490620011329085908c9060040162001b59565b60206040518083038186803b1580156200114b57600080fd5b505afa15801562001160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011869190620016dc565b905080620011a85760405162461bcd60e51b8152600401620002a79062001c99565b6000876001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e457600080fd5b505afa158015620011f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200121f919062001669565b9050336001600160a01b0316886001600160a01b03167fa204d52d2c80fbd794029bca489fb7b1c4dd5f7d5967806277f579cc683431468b60405162001266919062001e55565b60405180910390a3604051634bd410c960e11b81526001600160a01b038216906397a8219290620012a2908c908c908c90339060040162001e5e565b600060405180830381600087803b158015620012bd57600080fd5b505af1158015620012d2573d6000803e3d6000fd5b50506003546040516308bcf0cf60e21b81526001600160a01b0390911692506322f3c33c91506200130c908b9033908e9060040162001a9f565b600060405180830381600087803b1580156200132757600080fd5b505af11580156200133c573d6000803e3d6000fd5b50505050505050505050505050565b816001600160a01b031663f38815896040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138757600080fd5b505af11580156200139c573d6000803e3d6000fd5b505060025460405163eabb8a7360e01b81526001600160a01b03909116925063eabb8a739150620013d69033908690869060040162001974565b600060405180830381600087803b158015620013f157600080fd5b505af115801562001406573d6000803e3d6000fd5b505050505050565b606060048054806020026020016040519081016040528092919081815260200182805480156200146857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001449575b5050505050905090565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526006602052604090205460ff1690565b600082821115620014e85760405162461bcd60e51b8152600401620002a79062001be0565b508082035b92915050565b6140598062001f3683390190565b8035620014ed8162001eec565b600082601f8301126200151f578081fd5b813567ffffffffffffffff81111562001536578182fd5b60208082026200154882820162001eb6565b838152935081840185830182870184018810156200156557600080fd5b600092505b848310156200158a5780358252600192909201919083019083016200156a565b505050505092915050565b8035620014ed8162001f02565b8035620014ed8162001f11565b600082601f830112620015c0578081fd5b813567ffffffffffffffff811115620015d7578182fd5b620015ec601f8201601f191660200162001eb6565b91508082528360208285010111156200160457600080fd5b8060208401602084013760009082016020015292915050565b8035620014ed8162001f1f565b803567ffffffffffffffff81168114620014ed57600080fd5b60006020828403121562001655578081fd5b8135620016628162001eec565b9392505050565b6000602082840312156200167b578081fd5b8151620016628162001eec565b600080604083850312156200169b578081fd5b8235620016a88162001eec565b9150602083013567ffffffffffffffff811115620016c4578182fd5b620016d285828601620015af565b9150509250929050565b600060208284031215620016ee578081fd5b8151620016628162001f02565b6000602082840312156200170d578081fd5b8151620016628162001f11565b6000602082840312156200172c578081fd5b8151620016628162001f1f565b6000602082840312156200174b578081fd5b5035919050565b60006020828403121562001764578081fd5b5051919050565b60008060006060848603121562001780578081fd5b833592506020840135620017948162001eec565b91506040840135620017a68162001f02565b809150509250925092565b6000806000806000806000806000806101408b8d031215620017d1578586fd5b8a359950620017e48c60208d01620015a2565b9850620017f58c60408d0162001595565b9750620018068c60608d0162001501565b9650620018178c60808d01620015a2565b9550620018288c60a08d016200161d565b9450620018398c60c08d016200161d565b935060e08b013567ffffffffffffffff8082111562001856578485fd5b620018648e838f01620015af565b94506101008d01359150808211156200187b578384fd5b506200188a8d828e016200150e565b9250506200189d8c6101208d016200162a565b90509295989b9194979a5092959850565b60008060408385031215620018c1578182fd5b505080516020909101519092909150565b600080600060608486031215620018e7578081fd5b8351925060208401519150604084015160038110620017a6578182fd5b60008151808452815b818110156200192b576020818501810151868301820152016200190d565b818111156200193d5782602083870101525b50601f01601f19169290920160200192915050565b67ffffffffffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03848116825283166020820152606060408201819052600090620019a29083018462001904565b95945050505050565b6001600160a01b0393841681529190921660208201526001600160801b03909116604082015260600190565b600061014060018060a01b03808e16845260208d151581860152620019fc8d62001ede565b8c6040860152818c1660608601526001600160801b039150818b166080860152818a1660a086015281891660c08601528260e086015262001a408386018962001904565b858103610100870152875180825290820193508188019250845b8181101562001a785783518552938201939282019260010162001a5a565b505050508091505062001a9061012083018462001952565b9b9a5050505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b8181101562001b065783516001600160a01b03168352928401929184019160010162001adf565b50909695505050505050565b901515815260200190565b6020810162001b2c8362001ede565b91905290565b6040810162001b418462001ede565b9281526001600160801b039190911660209091015290565b6040810162001b688462001ede565b9281526020015290565b6020808252601b908201527f706572696f642074797065206e6f7420696e697469616c697a65640000000000604082015260600190565b60208082526017908201527f666972737420706572696f6420696420696e76616c6964000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600b908201526a696e76616c696420534c4160a81b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526014908201527336b9b39739b2b73232b9103737ba1037bbb732b960611b604082015260600190565b6020808252601190820152701c195c9a5bd9081d5b999a5b9a5cda1959607a1b604082015260600190565b6020808252600b908201526a1c185cdd081c195c9a5bd960aa1b604082015260600190565b60208082526018908201527f6d657373656e676572206e6f7420726567697374657265640000000000000000604082015260600190565b602080825260129082015271696e76616c696420534c412073746174757360701b604082015260600190565b60208082526018908201527f6e6f74206e65787456657269666961626c65506572696f640000000000000000604082015260600190565b60208082526025908201527f696e76616c69642066696e616c506572696f6449642f696e697469616c5065726040820152641a5bd9125960da1b606082015260800190565b6020808252601190820152701a5b9d985b1a59081c195c9a5bd9081259607a1b604082015260600190565b60208082526017908201527f66696e616c20706572696f6420696420696e76616c6964000000000000000000604082015260600190565b602080825260119082015270189c995858da19590818dbdb9d1c9858dd607a1b604082015260600190565b90815260200190565b9384526001600160a01b039283166020850152901515604084015216606082015260800190565b8381526060810162001e978462001ede565b60208201939093526001600160a01b0391909116604090910152919050565b60405181810167ffffffffffffffff8111828210171562001ed657600080fd5b604052919050565b6006811062001ee957fe5b50565b6001600160a01b038116811462001ee957600080fd5b801515811462001ee957600080fd5b6006811062001ee957600080fd5b6001600160801b038116811462001ee957600080fdfe610240604052600d805460ff191690553480156200001c57600080fd5b5060405162004059380380620040598339810160408190526200003f91620008f3565b33888a86848e60006200005a6001600160e01b036200059616565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062004039833981519152908290a350856001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001089190620008cd565b600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b0316639fc4caa56040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016857600080fd5b505afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a39190620008cd565b60601b6001600160601b031916608052846005811115620001c057fe5b610100816005811115620001d057fe5b60f890811b909152851515901b610120525060015460408051637b8041cf60e11b8152905160009283926001600160a01b039091169163f700839e9160048082019261010092909190829003018186803b1580156200022e57600080fd5b505afa15801562000243573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002699190620009fa565b97505050505050509150600160009054906101000a90046001600160a01b03166001600160a01b0316638b8e53096040518163ffffffff1660e01b815260040160206040518083038186803b158015620002c257600080fd5b505afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd9190620008cd565b60601b6001600160601b03191660c05260e08290526001600160a01b03831660009081526009602052604090208054600160ff19909116179055608085901b6001600160801b03191660a0526001600160401b03818116908516118015906200037057506001846001600160401b031610155b620003985760405162461bcd60e51b81526004016200038f9062000aa9565b60405180910390fd5b50505060c01b6001600160c01b0319166101405250620003bd92508c9150506200059b565b8251620003d290600a90602086019062000675565b506001600160601b0319606088901b1661016052600b80546001600160a01b03191633179081905560408051639fc4caa560e01b815290516001600160a01b039290921691639fc4caa591600480820192602092909190829003018186803b1580156200043e57600080fd5b505afa15801562000453573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004799190620008cd565b60601b6001600160601b03191661018052600b5460408051635a7d1e5d60e01b815290516001600160a01b0390921691635a7d1e5d91600480820192602092909190829003018186803b158015620004d057600080fd5b505afa158015620004e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200050b9190620008cd565b60601b6001600160601b0319166101a052436101c052608086811b6001600160801b03199081166101e0529086901b16610200528760058111156200054c57fe5b6102208160058111156200055c57fe5b60f81b90525081516200057790600c906020850190620006fa565b5050506001600160801b03909316600e555062000b4a95505050505050565b335b90565b620005ae6001600160e01b036200059616565b6001600160a01b0316620005ca6001600160e01b036200066616565b6001600160a01b031614620005f35760405162461bcd60e51b81526004016200038f9062000ad5565b6001600160a01b0381166200061c5760405162461bcd60e51b81526004016200038f9062000a63565b600080546040516001600160a01b03808516939216916000805160206200403983398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006b857805160ff1916838001178555620006e8565b82800160010185558215620006e8579182015b82811115620006e8578251825591602001919060010190620006cb565b50620006f692915062000737565b5090565b828054828255906000526020600020908101928215620006e85791602002820182811115620006e8578251825591602001919060010190620006cb565b6200059891905b80821115620006f657600081556001016200073e565b8051620007618162000b31565b92915050565b600082601f83011262000778578081fd5b81516001600160401b038111156200078e578182fd5b6020808202620007a082820162000b0a565b83815293508184018583018287018401881015620007bd57600080fd5b600092505b84831015620007e2578051825260019290920191908301908301620007c2565b505050505092915050565b805180151581146200076157600080fd5b8051600681106200076157600080fd5b600082601f8301126200081f578081fd5b81516001600160401b0381111562000835578182fd5b60206200084b601f8301601f1916820162000b0a565b925081835284818386010111156200086257600080fd5b60005b828110156200088257848101820151848201830152810162000865565b82811115620008945760008284860101525b50505092915050565b80516001600160801b03811681146200076157600080fd5b80516001600160401b03811681146200076157600080fd5b600060208284031215620008df578081fd5b8151620008ec8162000b31565b9392505050565b6000806000806000806000806000806101408b8d03121562000913578586fd5b6200091f8c8c62000754565b9950620009308c60208d01620007ed565b9850620009418c60408d01620007fe565b9750620009528c60608d0162000754565b9650620009638c60808d016200089d565b9550620009748c60a08d016200089d565b9450620009858c60c08d016200089d565b60e08c01519094506001600160401b0380821115620009a2578485fd5b620009b08e838f016200080e565b94506101008d0151915080821115620009c7578384fd5b50620009d68d828e0162000767565b925050620009e98c6101208d01620008b5565b90509295989b9194979a5092959850565b600080600080600080600080610100898b03121562000a17578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915062000a548a60e08b01620008b5565b90509295985092959890939650565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b602080825260129082015271696e636f7272656374206c6576657261676560701b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040518181016001600160401b038111828210171562000b2957600080fd5b604052919050565b6001600160a01b038116811462000b4757600080fd5b50565b60805160601c60a05160801c60c05160601c60e0516101005160f81c6101205160f81c6101405160c01c6101605160601c6101805160601c6101a05160601c6101c0516101e05160801c6102005160801c6102205160f81c6133eb62000c4e60003980610da152806113095250806105345280610d59528061132a52806113d852806118ad5250806104fb5280610c485280611842528061188c525080610c245250806116b752806117565250806112da525080611447528061160a525080610d355280611b3e528061222c52806125c2528061269a525080610c005280611a74525050806110cd525080611a1652508061094a52806119325250506133eb6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806378025ec41161013b578063b7bc347e116100b8578063db69a4621161007c578063db69a462146104b9578063f2db10fe146104c1578063f2fde38b146104c9578063f7e9dfff146104dc578063fd5e6dd1146104e457610248565b8063b7bc347e14610463578063c623674f1461046b578063c8b5c24814610480578063cbe230c314610493578063d7a5c422146104a657610248565b80639b19251a116100ff5780639b19251a146104255780639fabeb0014610438578063a224ee9c14610440578063a7e8d8d414610448578063b1659bad1461045b57610248565b806378025ec4146103e75780637fd788aa146103fa5780638d21c770146104025780638da5cb5b1461041557806396f76f111461041d57610248565b806346e0fbae116101c95780635ae698ff1161018d5780635ae698ff1461039e5780635c1c20de146103b15780635e5f2e26146103b9578063639b6fc3146103cc578063715018a6146103df57610248565b806346e0fbae14610322578063484fbf2b146103375780634e0c91f61461034a5780634fb2647e1461036a57806357ac94f01461037d57610248565b80632526743a116102105780632526743a146102bb57806326db18ac146102d05780632c86d98e146102e35780633385d334146102f85780634190edde1461030057610248565b8063021eef7f1461024d5780630bea440d14610276578063171e44ea1461028b57806318e454271461029e5780631bf30929146102a6575b600080fd5b61026061025b366004612b19565b6104f7565b60405161026d9190612da9565b60405180910390f35b610289610284366004612b49565b610574565b005b6102896102993660046128fe565b610726565b610260610bfe565b6102ae610c22565b60405161026d9190612db4565b6102c3610c46565b60405161026d919061328e565b6102896102de366004612b49565b610c6a565b6102eb610d33565b60405161026d9190613315565b6102c3610d57565b61031361030e366004612b19565b610d7b565b60405161026d939291906132b9565b61032a610d9f565b60405161026d9190612dbd565b6102ae6103453660046128fe565b610dc3565b61035d6103583660046128fe565b610dd5565b60405161026d9190612d58565b61035d6103783660046128fe565b610df0565b61039061038b366004612936565b610e0b565b60405161026d929190612d6c565b6102896103ac3660046129cd565b610fe7565b6102ae6110cb565b61035d6103c7366004612b19565b6110ef565b6102ae6103da3660046128fe565b611116565b610289611128565b6102ae6103f5366004612b19565b6111b1565b6102606111cf565b610289610410366004612961565b6111d8565b61035d6112c6565b6102606112d5565b6102606104333660046128fe565b61142a565b6102ae61143f565b61035d611445565b6102606104563660046128fe565b611469565b6102ae61147e565b6102ae611484565b61047361148a565b60405161026d9190612df7565b61028961048e366004612b49565b611518565b6102606104a13660046128fe565b6115a4565b6102896104b4366004612b9f565b6115ff565b61035d611921565b6102c3611930565b6102896104d73660046128fe565b611954565b61035d611a14565b61035d6104f2366004612b19565b611a38565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168210156105325750600061056f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b031682111561056b5750600061056f565b5060015b919050565b816000811161059e5760405162461bcd60e51b8152600401610595906131ee565b60405180910390fd5b60006105a86112d5565b905080156105c85760405162461bcd60e51b815260040161059590613135565b6105d28484611a45565b336001600160a01b0316600e54846001600160a01b03167f1bd1eb6b4fd3f08e718d7a241c54c4641c9f36004b6949383f48d15a2fcc8f52876040516106189190612db4565b60405180910390a4600b5460408051636830483560e01b815290516000926001600160a01b0316916368304835916004808301926020929190829003018186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061291a565b604051635948284760e11b81529091506001600160a01b0382169063b290508e906106cc903390600401612d58565b602060405180830381600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190612a6d565b505050505050565b61072e611fa8565b6001600160a01b031661073f6112c6565b6001600160a01b0316146107655760405162461bcd60e51b8152600401610595906130ae565b60015460408051637b8041cf60e11b815290516000926001600160a01b03169163f700839e91600480830192610100929190829003018186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612be3565b5096505050505050506107f5826115a4565b156108125760405162461bcd60e51b815260040161059590613017565b60015460405163cbe230c360e01b81526001600160a01b039091169063cbe230c390610842908590600401612d58565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612a6d565b6108ae5760405162461bcd60e51b815260040161059590612f01565b6008805460018101825560008290527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038516179055548110156109185760405162461bcd60e51b8152600401610595906130e3565b60405163fc966d4560e01b815260609073__$89e48f3f2b1d5dfed70cd34b0db16ca79e$__9063fc966d4590610972907f00000000000000000000000000000000000000000000000000000000000000009060040161328e565b60006040518083038186803b15801561098a57600080fd5b505af415801561099e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c69190810190612a8d565b90506060816040516020016109db9190612ca0565b60405160208183030381529060405290506060826040516020016109ff9190612cd3565b6040516020818303038152906040529050606083604051602001610a239190612d03565b6040516020818303038152906040529050606084604051602001610a479190612d35565b60408051601f1981840301815290829052600154633350214760e11b83529092506000916001600160a01b03909116906366a0428e90610a8d9088908890600401612e0a565b602060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf919061291a565b600154604051633350214760e11b81529192506000916001600160a01b03909116906366a0428e90610b179087908790600401612e0a565b602060405180830381600087803b158015610b3157600080fd5b505af1158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b69919061291a565b6001600160a01b03808b16600081815260056020908152604080832080548688166001600160a01b0319918216811790925560049093529281902080549589169590921685179091555193945091927fce8c390dc55dbcd418078f1391fbb7d471c01c228fc4464926095354cb27c02990610beb90899081908d908190612e38565b60405180910390a4505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8160008111610c8b5760405162461bcd60e51b8152600401610595906131ee565b610c936112c6565b6001600160a01b0316336001600160a01b031614610cd6576000610cb56112d5565b905080610cd45760405162461bcd60e51b81526004016105959061303e565b505b336001600160a01b0316600e54836001600160a01b03167f5d73c1b3aab5bae46e08e09668d192166389623bef76bbe8cdae8df8ad320fce86604051610d1c9190612db4565b60405180910390a4610d2e8383611fac565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f6020526000908152604090208054600182015460029092015490919060ff1683565b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020526000908152604090205481565b6004602052600090815260409020546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b600080600060088481548110610e1d57fe5b6000918252602090912001546001600160a01b03169050610e3c6112c6565b6001600160a01b0316856001600160a01b03161415610e78576001600160a01b0381166000908152600260205260409020549092509050610fe0565b6001600160a01b0380821660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190612b31565b905080610f18575090925060009150610fe09050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610f47908b90600401612d58565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612b31565b6001600160a01b0385166000908152600360205260409020549091508490610fd7908490610fcb908563ffffffff61215316565b9063ffffffff61219616565b95509550505050505b9250929050565b610fef611fa8565b6001600160a01b03166110006112c6565b6001600160a01b0316146110265760405162461bcd60e51b8152600401610595906130ae565b60005b81518110156110c7576009600083838151811061104257fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166110bf5760016009600084848151811061107f57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101611029565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600881815481106110fc57fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205481565b611130611fa8565b6001600160a01b03166111416112c6565b6001600160a01b0316146111675760405162461bcd60e51b8152600401610595906130ae565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600c81815481106111be57fe5b600091825260209091200154905081565b600d5460ff1690565b6111e0611fa8565b6001600160a01b03166111f16112c6565b6001600160a01b0316146112175760405162461bcd60e51b8152600401610595906130ae565b60005b81811015610d2e576009600084848481811061123257fe5b905060200201602081019061124791906128fe565b6001600160a01b0316815260208101919091526040016000205460ff161515600114156112be5760006009600085858581811061128057fe5b905060200201602081019061129591906128fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b60010161121a565b6000546001600160a01b031690565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffa612357f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611366929190612dd1565b604080518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612bc0565b600d5490925060ff161515600114905080611424575080421015801561142457507f00000000000000000000000000000000000000000000000000000000000000006001600160801b03166000908152600f6020526040812060029081015460ff169081111561142157fe5b14155b91505090565b60096020526000908152604090205460ff1681565b60065490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020526000908152604090205460ff1681565b600e5481565b60085490565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b505050505081565b81600081116115395760405162461bcd60e51b8152600401610595906131ee565b60006115436112d5565b9050336001600160a01b0316600e54846001600160a01b03167fbd9be3d6449ecbdf4b3b9980b1631ec06c13d8cf9e09e2433075f123b348e3ba8760405161158b9190612db4565b60405180910390a461159e8484836121c8565b50505050565b6000805b6008548110156115f657826001600160a01b0316600882815481106115c957fe5b6000918252602090912001546001600160a01b031614156115ee57600191505061056f565b6001016115a8565b50600092915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116475760405162461bcd60e51b81526004016105959061310d565b7fc95987c1992805ee34bdc915e017cceae36ba1c156b9911fa7e691e6435eb46e42838360405161167a939291906132df565b60405180910390a16001808201600e556000828152600f60205260408082209283018590554283555163a7b72ac560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7b72ac5906116ec903090600401612d58565b604080518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190612b78565b50604051631993b9df60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631993b9df9061178d90879030906004016132a2565b60206040518083038186803b1580156117a557600080fd5b505afa1580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190612a6d565b156118f5576002828101805460ff191660011790556127109060009061182b9061180b90610fcb8987612403565b610fcb8461181f8a8863ffffffff61242816565b9063ffffffff61215316565b90506000611879600161186d886001600160801b037f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61242816565b9063ffffffff61240316565b905060006118df6001600160801b0360017f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000030116610fcb858563ffffffff61215316565b90506118ec878286612450565b5050505061159e565b6002828101805460ff1916909117905561190e8361256f565b600d805460ff1916600117905550505050565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b61195c611fa8565b6001600160a01b031661196d6112c6565b6001600160a01b0316146119935760405162461bcd60e51b8152600401610595906130ae565b6001600160a01b0381166119b95760405162461bcd60e51b815260040161059590612e84565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681815481106110fc57fe5b80611a4f816115a4565b1515600114611a705760405162461bcd60e51b815260040161059590612f38565b60017f000000000000000000000000000000000000000000000000000000000000000015151415611acf573360009081526009602052604090205460ff161515600114611acf5760405162461bcd60e51b8152600401610595906131c5565b611aea6001600160a01b03831633308663ffffffff6126d416565b611af26112c6565b6001600160a01b0316336001600160a01b031614611d62576001600160a01b03821660009081526002602090815260408083205460039092529091205481611b6e67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661181f848963ffffffff61240316565b1115611b8c5760405162461bcd60e51b815260040161059590613197565b6001600160a01b0380851660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015611bde57600080fd5b505afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612b31565b905080611c82576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611c4b9033908b90600401612d6c565b600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611d16565b6001600160a01b03861660009081526003602052604081205490611cb082610fcb8b8663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611ce19033908590600401612d6c565b600060405180830381600087803b158015611cfb57600080fd5b505af1158015611d0f573d6000803e3d6000fd5b5050505050505b6001600160a01b038616600090815260036020526040902054611d3f908863ffffffff61240316565b6001600160a01b03871660009081526003602052604090205550611f3092505050565b6001600160a01b0380831660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b158015611db357600080fd5b505afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb9190612b31565b905080611e57576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611e209033908990600401612d6c565b600060405180830381600087803b158015611e3a57600080fd5b505af1158015611e4e573d6000803e3d6000fd5b50505050611eeb565b6001600160a01b03841660009081526002602052604081205490611e8582610fcb898663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611eb69033908590600401612d6c565b600060405180830381600087803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b5050505050505b6001600160a01b038416600090815260026020526040902054611f14908663ffffffff61240316565b6001600160a01b03851660009081526002602052604090205550505b3360009081526007602052604090205460ff16610d2e57336000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055505050565b3390565b80611fb6816115a4565b1515600114611fd75760405162461bcd60e51b815260040161059590612f38565b6001600160a01b0380831660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612b31565b6001600160a01b03851660009081526003602052604081205491925061209182610fcb898663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc6790906120c29033908590600401612d6c565b600060405180830381600087803b1580156120dc57600080fd5b505af11580156120f0573d6000803e3d6000fd5b5050506001600160a01b03871660009081526003602052604090205461211d91508863ffffffff61242816565b6001600160a01b03871660008181526003602052604090209190915561214a90338963ffffffff61272c16565b50505050505050565b60008261216257506000612190565b8282028284828161216f57fe5b041461218d5760405162461bcd60e51b81526004016105959061306d565b90505b92915050565b60008082116121b75760405162461bcd60e51b815260040161059590612fe0565b8183816121c057fe5b049392505050565b816121d2816115a4565b15156001146121f35760405162461bcd60e51b815260040161059590612f38565b6001600160a01b03831660009081526002602090815260408083205460039092529091205483612285576122578167ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b612267838863ffffffff61242816565b10156122855760405162461bcd60e51b815260040161059590613262565b6001600160a01b0380861660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190612b31565b6001600160a01b03881660009081526002602052604081205491925061233e82610fcb8c8663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc67909061236f9033908590600401612d6c565b600060405180830381600087803b15801561238957600080fd5b505af115801561239d573d6000803e3d6000fd5b5050506001600160a01b038a166000908152600260205260409020546123ca91508b63ffffffff61242816565b6001600160a01b038a166000818152600260205260409020919091556123f790338c63ffffffff61272c16565b50505050505050505050565b60008282018381101561218d5760405162461bcd60e51b815260040161059590612eca565b60008282111561244a5760405162461bcd60e51b815260040161059590612f63565b50900390565b60005b60085481101561159e5760006008828154811061246c57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906124a885610fcb848963ffffffff61215316565b6001600160a01b0384166000908152600360205260409020549091506124d4908263ffffffff61242816565b6001600160a01b038416600090815260036020908152604080832093909355600290522054612509908263ffffffff61240316565b6001600160a01b0384166000818152600260205260409081902092909255905188907f3173c1c4b679e2da86dbb0382bde749a6e16cd31912c5410e17985cd7d2b90529061255c908a908a9087906132df565b60405180910390a3505050600101612453565b60005b6008548110156110c75760006008828154811061258b57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906125ed8267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b6001600160a01b038416600090815260026020526040902054909150612619908263ffffffff61242816565b6001600160a01b03841660009081526002602090815260408083209390935560039052205461264e908263ffffffff61240316565b6001600160a01b0384166000818152600360205260409081902092909255905186907f89385e9d619600da63726158403c0cfd9772b2cac90d3e093387a5456ee1a247906126c19086907f00000000000000000000000000000000000000000000000000000000000000009087906132f5565b60405180910390a3505050600101612572565b61159e846323b872dd60e01b8585856040516024016126f593929190612d85565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261274b565b610d2e8363a9059cbb60e01b84846040516024016126f5929190612d6c565b60606127a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127da9092919063ffffffff16565b805190915015610d2e57808060200190518101906127be9190612a6d565b610d2e5760405162461bcd60e51b815260040161059590613218565b60606127e984846000856127f3565b90505b9392505050565b6060824710156128155760405162461bcd60e51b815260040161059590612f9a565b61281e856128b4565b61283a5760405162461bcd60e51b815260040161059590613160565b60006060866001600160a01b031685876040516128579190612c84565b60006040518083038185875af1925050503d8060008114612894576040519150601f19603f3d011682016040523d82523d6000602084013e612899565b606091505b50915091506128a98282866128ba565b979650505050505050565b3b151590565b606083156128c95750816127ec565b8251156128d95782518084602001fd5b8160405162461bcd60e51b81526004016105959190612df7565b80356121908161339d565b60006020828403121561290f578081fd5b813561218d8161339d565b60006020828403121561292b578081fd5b815161218d8161339d565b60008060408385031215612948578081fd5b82356129538161339d565b946020939093013593505050565b60008060208385031215612973578182fd5b823567ffffffffffffffff8082111561298a578384fd5b81850186601f82011261299b578485fd5b80359250818311156129ab578485fd5b86602080850283010111156129be578485fd5b60200196919550909350505050565b600060208083850312156129df578182fd5b823567ffffffffffffffff8111156129f5578283fd5b80840185601f820112612a06578384fd5b80359150612a1b612a1683613351565b61332a565b8281528381019082850185850284018601891015612a37578687fd5b8693505b84841015612a6157612a4d89826128f3565b835260019390930192918501918501612a3b565b50979650505050505050565b600060208284031215612a7e578081fd5b8151801515811461218d578182fd5b600060208284031215612a9e578081fd5b815167ffffffffffffffff80821115612ab5578283fd5b81840185601f820112612ac6578384fd5b8051925081831115612ad6578384fd5b612ae9601f8401601f191660200161332a565b9150828252856020848301011115612aff578384fd5b612b10836020840160208401613371565b50949350505050565b600060208284031215612b2a578081fd5b5035919050565b600060208284031215612b42578081fd5b5051919050565b60008060408385031215612b5b578182fd5b823591506020830135612b6d8161339d565b809150509250929050565b60008060408385031215612b8a578182fd5b82519150602083015160068110612b6d578182fd5b60008060408385031215612bb1578182fd5b50508035926020909101359150565b60008060408385031215612bd2578182fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215612bff578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015167ffffffffffffffff81168114612c47578182fd5b809150509295985092959890939650565b60008151808452612c70816020860160208601613371565b601f01601f19169290920160200192915050565b60008251612c96818460208701613371565b9190910192915050565b60006a44534c412d53484f52542d60a81b82528251612cc681600b850160208701613371565b91909101600b0192915050565b60006744534c412d53502d60c01b82528251612cf6816008850160208701613371565b9190910160080192915050565b60006944534c412d4c4f4e472d60b01b82528251612d2881600a850160208701613371565b91909101600a0192915050565b60006744534c412d4c502d60c01b82528251612cf6816008850160208701613371565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6020810160068310612dcb57fe5b91905290565b6040810160068410612ddf57fe5b9281526001600160801b039190911660209091015290565b6000602082526127ec6020830184612c58565b600060408252612e1d6040830185612c58565b8281036020840152612e2f8185612c58565b95945050505050565b600060808252612e4b6080830187612c58565b8281036020840152612e5d8187612c58565b8381036040850152612e6f8187612c58565b91505082810360608401526128a98185612c58565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601a908201527f6e6f7420616c6c6f77656420627920534c415265676973747279000000000000604082015260600190565b6020808252601190820152701d1bdad95b881b9bdd08185b1b1bddd959607a1b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600d908201526c185b1c9958591e481859191959609a1b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f0dac2f040e8ded6cadc40d8cadccee8d60831b604082015260600190565b6020808252600e908201526d37b7363c9036b2b9b9b2b733b2b960911b604082015260600190565b602080825260119082015270199a5b9a5cda19590818dbdb9d1c9858dd607a1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260149082015273696e636f72726563742075736572207374616b6560601b604082015260600190565b6020808252600f908201526e1b9bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526010908201526f0616d6f756e742063616e7420626520360841b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260129082015271696e636f727265637420776974686472617760701b604082015260600190565b6001600160801b0391909116815260200190565b9182526001600160a01b0316602082015260400190565b8381526020810183905260608101600383106132d157fe5b826040830152949350505050565b9283526020830191909152604082015260600190565b92835267ffffffffffffffff919091166020830152604082015260600190565b67ffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561334957600080fd5b604052919050565b600067ffffffffffffffff821115613367578081fd5b5060209081020190565b60005b8381101561338c578181015183820152602001613374565b8381111561159e5750506000910152565b6001600160a01b03811681146133b257600080fd5b5056fea2646970667358221220b86e9511e61c712ad56a8bf108afa926c52182c45710508c26729f472bb2b9ab64736f6c634300060600338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220d35106eb9148aa3ef21387269b88844bcd5a15680b17632172b6c41ce628949564736f6c63430006060033",
      "linkReferences": {
        "@stacktical/dsla-protocol/contracts/StringUtils.sol": {
          "StringUtils": [
            {
              "length": 20,
              "start": 14112
            }
          ]
        }
      },
      "deployedLinkReferences": {
        "@stacktical/dsla-protocol/contracts/StringUtils.sol": {
          "StringUtils": [
            {
              "length": 20,
              "start": 13486
            }
          ]
        }
      },
      "devdoc": {
        "details": "SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements",
        "methods": {
          "allSLAs()": {
            "details": "public view function that returns all the service level agreements",
            "returns": {
              "_0": "SLA[] array of SLAs"
            }
          },
          "constructor": {
            "details": "constructor",
            "params": {
              "_checkPastPeriod": "5. -",
              "_messengerRegistry": "3. Messenger registry",
              "_periodRegistry": "2. Periods registry",
              "_sloRegistry": "1. SLO Registry",
              "_stakeRegistry": "4. Stake registry"
            }
          },
          "createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[],uint64)": {
            "details": "public function for creating canonical service level agreements",
            "params": {
              "_extraData": "9. -",
              "_finalPeriodId": "6. -",
              "_initialPeriodId": "5. -",
              "_ipfsHash": "3. -",
              "_leverage": "10. -",
              "_messengerAddress": "7. -",
              "_periodType": "4. -",
              "_sloType": "2. -",
              "_sloValue": "1. -",
              "_whitelisted": "8. -"
            }
          },
          "isRegisteredSLA(address)": {
            "details": "public view function that returns true if _slaAddress was deployed using this SLARegistry",
            "params": {
              "_slaAddress": "address of the SLA to be checked"
            }
          },
          "registerMessenger(address,string)": {
            "details": "function to declare this SLARegistry contract as SLARegistry of _messengerAddress",
            "params": {
              "_messengerAddress": "1. address of the messenger"
            }
          },
          "requestSLI(uint256,address,bool)": {
            "details": "Gets SLI information for the specified SLA and SLO",
            "params": {
              "_ownerApproval": "3. if approval by owner or msg.sender",
              "_periodId": "1. id of the period",
              "_sla": "2. SLA Address"
            }
          },
          "userSLAs(address)": {
            "details": "public view function that returns the service level agreements that the given user is the owner of",
            "params": {
              "_user": "Address of the user for which to return the service level agreements"
            },
            "returns": {
              "_0": "array of SLAs"
            }
          }
        },
        "title": "SLARegistry"
      },
      "evm": {
        "bytecode": {
          "linkReferences": {
            "@stacktical/dsla-protocol/contracts/StringUtils.sol": {
              "StringUtils": [
                {
                  "length": 20,
                  "start": 14112
                }
              ]
            }
          },
          "object": "60a06040523480156200001157600080fd5b5060405162006236380380620062368339810160408190526200003491620001b4565b600080546001600160a01b0319166001600160a01b03878116919091178083556040805163f388158960e01b81529051919092169263f3881589926004808201939182900301818387803b1580156200008c57600080fd5b505af1158015620000a1573d6000803e3d6000fd5b5050600180546001600160a01b038089166001600160a01b03199283161790925560038054878416921691909117908190556040805163f388158960e01b8152905191909216935063f38815899250600480830192600092919082900301818387803b1580156200011157600080fd5b505af115801562000126573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b0387811691909117918290556040805163f388158960e01b8152905192909116935063f3881589925060048082019260009290919082900301818387803b1580156200018857600080fd5b505af11580156200019d573d6000803e3d6000fd5b50505050151560f81b608052506200024f92505050565b600080600080600060a08688031215620001cc578081fd5b8551620001d98162000236565b6020870151909550620001ec8162000236565b6040870151909450620001ff8162000236565b6060870151909350620002128162000236565b6080870151909250801515811462000228578182fd5b809150509295509295909350565b6001600160a01b03811681146200024c57600080fd5b50565b60805160f81c615fc4620002726000398061043a52806114835250615fc46000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c806368304835116200009957806396bddc10116200006f57806396bddc1014620001b85780639fc4caa514620001c2578063a9e43e7f14620001cc578063c4277a7b14620001e557620000e2565b8063683048351462000180578063788164b1146200018a5780638d2113ed14620001a157620000e2565b80630d0f4db714620000e75780632575d7ca146200010057806350c5abfe1462000117578063516c285714620001465780635a7d1e5d146200016c5780635c4df3321462000176575b600080fd5b620000fe620000f8366004620017b1565b620001fc565b005b620000fe6200011136600462001643565b620007d5565b6200012e6200012836600462001739565b62000c17565b6040516200013d919062001960565b60405180910390f35b6200015d6200015736600462001643565b62000c3f565b6040516200013d919062001ac3565b6200012e62000d93565b6200012e62000da2565b6200012e62000db1565b620000fe6200019b3660046200176b565b62000dc0565b620000fe620001b236600462001688565b6200134b565b6200015d6200140e565b6200012e62001472565b620001d662001481565b6040516200013d919062001b12565b620001d6620001f636600462001643565b620014a5565b600154604051636efe27ef60e11b81526000916001600160a01b03169063ddfc4fde9062000231908a908a9060040162001b32565b60206040518083038186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002859190620016dc565b905080620002b05760405162461bcd60e51b8152600401620002a79062001ba9565b60405180910390fd5b600154604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde90620002e4908a90899060040162001b32565b60206040518083038186803b158015620002fd57600080fd5b505afa15801562000312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003389190620016dc565b9050806200035a5760405162461bcd60e51b8152600401620002a79062001df3565b6001546040516347ef60ed60e11b81526000916001600160a01b031690638fdec1da906200038d908b9060040162001b1d565b60206040518083038186803b158015620003a657600080fd5b505afa158015620003bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e19190620016dc565b905080620004035760405162461bcd60e51b8152600401620002a79062001b72565b866001600160801b0316866001600160801b03161015620004385760405162461bcd60e51b8152600401620002a79062001d83565b7f0000000000000000000000000000000000000000000000000000000000000000156200050d57600154604051631e8760ef60e21b81526000916001600160a01b031690637a1d83bc9062000494908c908c9060040162001b32565b60206040518083038186803b158015620004ad57600080fd5b505afa158015620004c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004e89190620016dc565b905080156200050b5760405162461bcd60e51b8152600401620002a79062001cc4565b505b60025460405163ef4003db60e01b81526000916001600160a01b03169063ef4003db9062000540908d9060040162001960565b60206040518083038186803b1580156200055957600080fd5b505afa1580156200056e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005949190620016dc565b9050600181151514620005bb5760405162461bcd60e51b8152600401620002a79062001ce9565b6000338c8b8d8c8c6004805490508d8d8d604051620005da90620014f3565b620005ef9a99989796959493929190620019d7565b604051809103906000f0801580156200060c573d6000803e3d6000fd5b5090506000809054906101000a90046001600160a01b03166001600160a01b0316630c7ad72b8f8f846040518463ffffffff1660e01b8152600401620006559392919062001e85565b600060405180830381600087803b1580156200067057600080fd5b505af115801562000685573d6000803e3d6000fd5b5050600354604051633d7da60560e11b81526001600160a01b039091169250637afb4c0a9150620006c490339085908e8e0360010190600401620019ab565b600060405180830381600087803b158015620006df57600080fd5b505af1158015620006f4573d6000803e3d6000fd5b505060048054600180820183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319166001600160a01b0387169081179091556000908152600660205260408120805460ff19168317905591549193506200076a9250620014c3565b33600081815260056020908152604080832080546001810182559084529183209091018490555192935090916001600160a01b038516917fb52f284a6c14f1a66ab5513b5b539066933e58e69e6432666f0e3c8c8a7d750391a3505050505050505050505050505050565b620007e081620014a5565b620007ff5760405162461bcd60e51b8152600401620002a79062001c17565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200083957600080fd5b505afa1580156200084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000874919062001669565b6001600160a01b0316336001600160a01b031614620008a75760405162461bcd60e51b8152600401620002a79062001c6b565b6000816001600160a01b0316633385d3346040518163ffffffff1660e01b815260040160206040518083038186803b158015620008e357600080fd5b505afa158015620008f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200091e91906200171a565b6001600160801b031690506000826001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200096557600080fd5b505afa1580156200097a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a09190620016fb565b60015460405160016259edcb60e01b031981529192506000916001600160a01b039091169063ffa6123590620009dd908590879060040162001b59565b604080518083038186803b158015620009f557600080fd5b505afa15801562000a0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a309190620018ae565b9150506000846001600160a01b0316634190edde856040518263ffffffff1660e01b815260040162000a63919062001e55565b60606040518083038186803b15801562000a7c57600080fd5b505afa15801562000a91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab79190620018d2565b92505050846001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000af557600080fd5b505afa15801562000b0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b309190620016dc565b8062000b55575081421015801562000b555750600081600281111562000b5257fe5b14155b62000b745760405162461bcd60e51b8152600401620002a79062001c3c565b60405133906001600160a01b038716907f892dba94a39dc15a34a9767dc9a0e553ace780857b076507becf599634bfbb6790600090a36003546040516312baebe560e11b81526001600160a01b0390911690632575d7ca9062000bdc90889060040162001960565b600060405180830381600087803b15801562000bf757600080fd5b505af115801562000c0c573d6000803e3d6000fd5b505050505050505050565b6004818154811062000c2557fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260056020526040902054606090818167ffffffffffffffff8111801562000c7457600080fd5b5060405190808252806020026020018201604052801562000c9f578160200160208202803683370190505b506001600160a01b0385166000908152600560209081526040918290208054835181840281018401909452808452939450606093909183018282801562000d0657602002820191906000526020600020905b81548152602001906001019080831162000cf1575b50939450600093505050505b8381101562000d8957600482828151811062000d2a57fe5b60200260200101518154811062000d3d57fe5b9060005260206000200160009054906101000a90046001600160a01b031683828151811062000d6857fe5b6001600160a01b039092166020928302919091019091015260010162000d12565b5090949350505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b62000dcb82620014a5565b62000dea5760405162461bcd60e51b8152600401620002a79062001c17565b816001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2457600080fd5b505afa15801562000e39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5f919062001752565b831462000e805760405162461bcd60e51b8152600401620002a79062001d4c565b6040516320c876ef60e11b81526000906001600160a01b03841690634190edde9062000eb190879060040162001e55565b60606040518083038186803b15801562000eca57600080fd5b505afa15801562000edf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f059190620018d2565b92506000915062000f139050565b81600281111562000f2057fe5b1462000f405760405162461bcd60e51b8152600401620002a79062001d20565b6000836001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f7c57600080fd5b505afa15801562000f91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fb79190620016dc565b9050801562000fda5760405162461bcd60e51b8152600401620002a79062001e2a565b60405163021eef7f60e01b81526000906001600160a01b0386169063021eef7f906200100b90899060040162001e55565b60206040518083038186803b1580156200102457600080fd5b505afa15801562001039573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105f9190620016dc565b905080620010815760405162461bcd60e51b8152600401620002a79062001dc8565b6000856001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620010bd57600080fd5b505afa158015620010d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f89190620016fb565b6001546040516331edb3ad60e21b81529192506000916001600160a01b039091169063c7b6ceb490620011329085908c9060040162001b59565b60206040518083038186803b1580156200114b57600080fd5b505afa15801562001160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011869190620016dc565b905080620011a85760405162461bcd60e51b8152600401620002a79062001c99565b6000876001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e457600080fd5b505afa158015620011f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200121f919062001669565b9050336001600160a01b0316886001600160a01b03167fa204d52d2c80fbd794029bca489fb7b1c4dd5f7d5967806277f579cc683431468b60405162001266919062001e55565b60405180910390a3604051634bd410c960e11b81526001600160a01b038216906397a8219290620012a2908c908c908c90339060040162001e5e565b600060405180830381600087803b158015620012bd57600080fd5b505af1158015620012d2573d6000803e3d6000fd5b50506003546040516308bcf0cf60e21b81526001600160a01b0390911692506322f3c33c91506200130c908b9033908e9060040162001a9f565b600060405180830381600087803b1580156200132757600080fd5b505af11580156200133c573d6000803e3d6000fd5b50505050505050505050505050565b816001600160a01b031663f38815896040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138757600080fd5b505af11580156200139c573d6000803e3d6000fd5b505060025460405163eabb8a7360e01b81526001600160a01b03909116925063eabb8a739150620013d69033908690869060040162001974565b600060405180830381600087803b158015620013f157600080fd5b505af115801562001406573d6000803e3d6000fd5b505050505050565b606060048054806020026020016040519081016040528092919081815260200182805480156200146857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001449575b5050505050905090565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526006602052604090205460ff1690565b600082821115620014e85760405162461bcd60e51b8152600401620002a79062001be0565b508082035b92915050565b6140598062001f3683390190565b8035620014ed8162001eec565b600082601f8301126200151f578081fd5b813567ffffffffffffffff81111562001536578182fd5b60208082026200154882820162001eb6565b838152935081840185830182870184018810156200156557600080fd5b600092505b848310156200158a5780358252600192909201919083019083016200156a565b505050505092915050565b8035620014ed8162001f02565b8035620014ed8162001f11565b600082601f830112620015c0578081fd5b813567ffffffffffffffff811115620015d7578182fd5b620015ec601f8201601f191660200162001eb6565b91508082528360208285010111156200160457600080fd5b8060208401602084013760009082016020015292915050565b8035620014ed8162001f1f565b803567ffffffffffffffff81168114620014ed57600080fd5b60006020828403121562001655578081fd5b8135620016628162001eec565b9392505050565b6000602082840312156200167b578081fd5b8151620016628162001eec565b600080604083850312156200169b578081fd5b8235620016a88162001eec565b9150602083013567ffffffffffffffff811115620016c4578182fd5b620016d285828601620015af565b9150509250929050565b600060208284031215620016ee578081fd5b8151620016628162001f02565b6000602082840312156200170d578081fd5b8151620016628162001f11565b6000602082840312156200172c578081fd5b8151620016628162001f1f565b6000602082840312156200174b578081fd5b5035919050565b60006020828403121562001764578081fd5b5051919050565b60008060006060848603121562001780578081fd5b833592506020840135620017948162001eec565b91506040840135620017a68162001f02565b809150509250925092565b6000806000806000806000806000806101408b8d031215620017d1578586fd5b8a359950620017e48c60208d01620015a2565b9850620017f58c60408d0162001595565b9750620018068c60608d0162001501565b9650620018178c60808d01620015a2565b9550620018288c60a08d016200161d565b9450620018398c60c08d016200161d565b935060e08b013567ffffffffffffffff8082111562001856578485fd5b620018648e838f01620015af565b94506101008d01359150808211156200187b578384fd5b506200188a8d828e016200150e565b9250506200189d8c6101208d016200162a565b90509295989b9194979a5092959850565b60008060408385031215620018c1578182fd5b505080516020909101519092909150565b600080600060608486031215620018e7578081fd5b8351925060208401519150604084015160038110620017a6578182fd5b60008151808452815b818110156200192b576020818501810151868301820152016200190d565b818111156200193d5782602083870101525b50601f01601f19169290920160200192915050565b67ffffffffffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03848116825283166020820152606060408201819052600090620019a29083018462001904565b95945050505050565b6001600160a01b0393841681529190921660208201526001600160801b03909116604082015260600190565b600061014060018060a01b03808e16845260208d151581860152620019fc8d62001ede565b8c6040860152818c1660608601526001600160801b039150818b166080860152818a1660a086015281891660c08601528260e086015262001a408386018962001904565b858103610100870152875180825290820193508188019250845b8181101562001a785783518552938201939282019260010162001a5a565b505050508091505062001a9061012083018462001952565b9b9a5050505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b8181101562001b065783516001600160a01b03168352928401929184019160010162001adf565b50909695505050505050565b901515815260200190565b6020810162001b2c8362001ede565b91905290565b6040810162001b418462001ede565b9281526001600160801b039190911660209091015290565b6040810162001b688462001ede565b9281526020015290565b6020808252601b908201527f706572696f642074797065206e6f7420696e697469616c697a65640000000000604082015260600190565b60208082526017908201527f666972737420706572696f6420696420696e76616c6964000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600b908201526a696e76616c696420534c4160a81b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526014908201527336b9b39739b2b73232b9103737ba1037bbb732b960611b604082015260600190565b6020808252601190820152701c195c9a5bd9081d5b999a5b9a5cda1959607a1b604082015260600190565b6020808252600b908201526a1c185cdd081c195c9a5bd960aa1b604082015260600190565b60208082526018908201527f6d657373656e676572206e6f7420726567697374657265640000000000000000604082015260600190565b602080825260129082015271696e76616c696420534c412073746174757360701b604082015260600190565b60208082526018908201527f6e6f74206e65787456657269666961626c65506572696f640000000000000000604082015260600190565b60208082526025908201527f696e76616c69642066696e616c506572696f6449642f696e697469616c5065726040820152641a5bd9125960da1b606082015260800190565b6020808252601190820152701a5b9d985b1a59081c195c9a5bd9081259607a1b604082015260600190565b60208082526017908201527f66696e616c20706572696f6420696420696e76616c6964000000000000000000604082015260600190565b602080825260119082015270189c995858da19590818dbdb9d1c9858dd607a1b604082015260600190565b90815260200190565b9384526001600160a01b039283166020850152901515604084015216606082015260800190565b8381526060810162001e978462001ede565b60208201939093526001600160a01b0391909116604090910152919050565b60405181810167ffffffffffffffff8111828210171562001ed657600080fd5b604052919050565b6006811062001ee957fe5b50565b6001600160a01b038116811462001ee957600080fd5b801515811462001ee957600080fd5b6006811062001ee957600080fd5b6001600160801b038116811462001ee957600080fdfe610240604052600d805460ff191690553480156200001c57600080fd5b5060405162004059380380620040598339810160408190526200003f91620008f3565b33888a86848e60006200005a6001600160e01b036200059616565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062004039833981519152908290a350856001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001089190620008cd565b600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b0316639fc4caa56040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016857600080fd5b505afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a39190620008cd565b60601b6001600160601b031916608052846005811115620001c057fe5b610100816005811115620001d057fe5b60f890811b909152851515901b610120525060015460408051637b8041cf60e11b8152905160009283926001600160a01b039091169163f700839e9160048082019261010092909190829003018186803b1580156200022e57600080fd5b505afa15801562000243573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002699190620009fa565b97505050505050509150600160009054906101000a90046001600160a01b03166001600160a01b0316638b8e53096040518163ffffffff1660e01b815260040160206040518083038186803b158015620002c257600080fd5b505afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd9190620008cd565b60601b6001600160601b03191660c05260e08290526001600160a01b03831660009081526009602052604090208054600160ff19909116179055608085901b6001600160801b03191660a0526001600160401b03818116908516118015906200037057506001846001600160401b031610155b620003985760405162461bcd60e51b81526004016200038f9062000aa9565b60405180910390fd5b50505060c01b6001600160c01b0319166101405250620003bd92508c9150506200059b565b8251620003d290600a90602086019062000675565b506001600160601b0319606088901b1661016052600b80546001600160a01b03191633179081905560408051639fc4caa560e01b815290516001600160a01b039290921691639fc4caa591600480820192602092909190829003018186803b1580156200043e57600080fd5b505afa15801562000453573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004799190620008cd565b60601b6001600160601b03191661018052600b5460408051635a7d1e5d60e01b815290516001600160a01b0390921691635a7d1e5d91600480820192602092909190829003018186803b158015620004d057600080fd5b505afa158015620004e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200050b9190620008cd565b60601b6001600160601b0319166101a052436101c052608086811b6001600160801b03199081166101e0529086901b16610200528760058111156200054c57fe5b6102208160058111156200055c57fe5b60f81b90525081516200057790600c906020850190620006fa565b5050506001600160801b03909316600e555062000b4a95505050505050565b335b90565b620005ae6001600160e01b036200059616565b6001600160a01b0316620005ca6001600160e01b036200066616565b6001600160a01b031614620005f35760405162461bcd60e51b81526004016200038f9062000ad5565b6001600160a01b0381166200061c5760405162461bcd60e51b81526004016200038f9062000a63565b600080546040516001600160a01b03808516939216916000805160206200403983398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006b857805160ff1916838001178555620006e8565b82800160010185558215620006e8579182015b82811115620006e8578251825591602001919060010190620006cb565b50620006f692915062000737565b5090565b828054828255906000526020600020908101928215620006e85791602002820182811115620006e8578251825591602001919060010190620006cb565b6200059891905b80821115620006f657600081556001016200073e565b8051620007618162000b31565b92915050565b600082601f83011262000778578081fd5b81516001600160401b038111156200078e578182fd5b6020808202620007a082820162000b0a565b83815293508184018583018287018401881015620007bd57600080fd5b600092505b84831015620007e2578051825260019290920191908301908301620007c2565b505050505092915050565b805180151581146200076157600080fd5b8051600681106200076157600080fd5b600082601f8301126200081f578081fd5b81516001600160401b0381111562000835578182fd5b60206200084b601f8301601f1916820162000b0a565b925081835284818386010111156200086257600080fd5b60005b828110156200088257848101820151848201830152810162000865565b82811115620008945760008284860101525b50505092915050565b80516001600160801b03811681146200076157600080fd5b80516001600160401b03811681146200076157600080fd5b600060208284031215620008df578081fd5b8151620008ec8162000b31565b9392505050565b6000806000806000806000806000806101408b8d03121562000913578586fd5b6200091f8c8c62000754565b9950620009308c60208d01620007ed565b9850620009418c60408d01620007fe565b9750620009528c60608d0162000754565b9650620009638c60808d016200089d565b9550620009748c60a08d016200089d565b9450620009858c60c08d016200089d565b60e08c01519094506001600160401b0380821115620009a2578485fd5b620009b08e838f016200080e565b94506101008d0151915080821115620009c7578384fd5b50620009d68d828e0162000767565b925050620009e98c6101208d01620008b5565b90509295989b9194979a5092959850565b600080600080600080600080610100898b03121562000a17578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915062000a548a60e08b01620008b5565b90509295985092959890939650565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b602080825260129082015271696e636f7272656374206c6576657261676560701b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040518181016001600160401b038111828210171562000b2957600080fd5b604052919050565b6001600160a01b038116811462000b4757600080fd5b50565b60805160601c60a05160801c60c05160601c60e0516101005160f81c6101205160f81c6101405160c01c6101605160601c6101805160601c6101a05160601c6101c0516101e05160801c6102005160801c6102205160f81c6133eb62000c4e60003980610da152806113095250806105345280610d59528061132a52806113d852806118ad5250806104fb5280610c485280611842528061188c525080610c245250806116b752806117565250806112da525080611447528061160a525080610d355280611b3e528061222c52806125c2528061269a525080610c005280611a74525050806110cd525080611a1652508061094a52806119325250506133eb6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806378025ec41161013b578063b7bc347e116100b8578063db69a4621161007c578063db69a462146104b9578063f2db10fe146104c1578063f2fde38b146104c9578063f7e9dfff146104dc578063fd5e6dd1146104e457610248565b8063b7bc347e14610463578063c623674f1461046b578063c8b5c24814610480578063cbe230c314610493578063d7a5c422146104a657610248565b80639b19251a116100ff5780639b19251a146104255780639fabeb0014610438578063a224ee9c14610440578063a7e8d8d414610448578063b1659bad1461045b57610248565b806378025ec4146103e75780637fd788aa146103fa5780638d21c770146104025780638da5cb5b1461041557806396f76f111461041d57610248565b806346e0fbae116101c95780635ae698ff1161018d5780635ae698ff1461039e5780635c1c20de146103b15780635e5f2e26146103b9578063639b6fc3146103cc578063715018a6146103df57610248565b806346e0fbae14610322578063484fbf2b146103375780634e0c91f61461034a5780634fb2647e1461036a57806357ac94f01461037d57610248565b80632526743a116102105780632526743a146102bb57806326db18ac146102d05780632c86d98e146102e35780633385d334146102f85780634190edde1461030057610248565b8063021eef7f1461024d5780630bea440d14610276578063171e44ea1461028b57806318e454271461029e5780631bf30929146102a6575b600080fd5b61026061025b366004612b19565b6104f7565b60405161026d9190612da9565b60405180910390f35b610289610284366004612b49565b610574565b005b6102896102993660046128fe565b610726565b610260610bfe565b6102ae610c22565b60405161026d9190612db4565b6102c3610c46565b60405161026d919061328e565b6102896102de366004612b49565b610c6a565b6102eb610d33565b60405161026d9190613315565b6102c3610d57565b61031361030e366004612b19565b610d7b565b60405161026d939291906132b9565b61032a610d9f565b60405161026d9190612dbd565b6102ae6103453660046128fe565b610dc3565b61035d6103583660046128fe565b610dd5565b60405161026d9190612d58565b61035d6103783660046128fe565b610df0565b61039061038b366004612936565b610e0b565b60405161026d929190612d6c565b6102896103ac3660046129cd565b610fe7565b6102ae6110cb565b61035d6103c7366004612b19565b6110ef565b6102ae6103da3660046128fe565b611116565b610289611128565b6102ae6103f5366004612b19565b6111b1565b6102606111cf565b610289610410366004612961565b6111d8565b61035d6112c6565b6102606112d5565b6102606104333660046128fe565b61142a565b6102ae61143f565b61035d611445565b6102606104563660046128fe565b611469565b6102ae61147e565b6102ae611484565b61047361148a565b60405161026d9190612df7565b61028961048e366004612b49565b611518565b6102606104a13660046128fe565b6115a4565b6102896104b4366004612b9f565b6115ff565b61035d611921565b6102c3611930565b6102896104d73660046128fe565b611954565b61035d611a14565b61035d6104f2366004612b19565b611a38565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168210156105325750600061056f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b031682111561056b5750600061056f565b5060015b919050565b816000811161059e5760405162461bcd60e51b8152600401610595906131ee565b60405180910390fd5b60006105a86112d5565b905080156105c85760405162461bcd60e51b815260040161059590613135565b6105d28484611a45565b336001600160a01b0316600e54846001600160a01b03167f1bd1eb6b4fd3f08e718d7a241c54c4641c9f36004b6949383f48d15a2fcc8f52876040516106189190612db4565b60405180910390a4600b5460408051636830483560e01b815290516000926001600160a01b0316916368304835916004808301926020929190829003018186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061291a565b604051635948284760e11b81529091506001600160a01b0382169063b290508e906106cc903390600401612d58565b602060405180830381600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190612a6d565b505050505050565b61072e611fa8565b6001600160a01b031661073f6112c6565b6001600160a01b0316146107655760405162461bcd60e51b8152600401610595906130ae565b60015460408051637b8041cf60e11b815290516000926001600160a01b03169163f700839e91600480830192610100929190829003018186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612be3565b5096505050505050506107f5826115a4565b156108125760405162461bcd60e51b815260040161059590613017565b60015460405163cbe230c360e01b81526001600160a01b039091169063cbe230c390610842908590600401612d58565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612a6d565b6108ae5760405162461bcd60e51b815260040161059590612f01565b6008805460018101825560008290527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038516179055548110156109185760405162461bcd60e51b8152600401610595906130e3565b60405163fc966d4560e01b815260609073__$89e48f3f2b1d5dfed70cd34b0db16ca79e$__9063fc966d4590610972907f00000000000000000000000000000000000000000000000000000000000000009060040161328e565b60006040518083038186803b15801561098a57600080fd5b505af415801561099e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c69190810190612a8d565b90506060816040516020016109db9190612ca0565b60405160208183030381529060405290506060826040516020016109ff9190612cd3565b6040516020818303038152906040529050606083604051602001610a239190612d03565b6040516020818303038152906040529050606084604051602001610a479190612d35565b60408051601f1981840301815290829052600154633350214760e11b83529092506000916001600160a01b03909116906366a0428e90610a8d9088908890600401612e0a565b602060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf919061291a565b600154604051633350214760e11b81529192506000916001600160a01b03909116906366a0428e90610b179087908790600401612e0a565b602060405180830381600087803b158015610b3157600080fd5b505af1158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b69919061291a565b6001600160a01b03808b16600081815260056020908152604080832080548688166001600160a01b0319918216811790925560049093529281902080549589169590921685179091555193945091927fce8c390dc55dbcd418078f1391fbb7d471c01c228fc4464926095354cb27c02990610beb90899081908d908190612e38565b60405180910390a4505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8160008111610c8b5760405162461bcd60e51b8152600401610595906131ee565b610c936112c6565b6001600160a01b0316336001600160a01b031614610cd6576000610cb56112d5565b905080610cd45760405162461bcd60e51b81526004016105959061303e565b505b336001600160a01b0316600e54836001600160a01b03167f5d73c1b3aab5bae46e08e09668d192166389623bef76bbe8cdae8df8ad320fce86604051610d1c9190612db4565b60405180910390a4610d2e8383611fac565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f6020526000908152604090208054600182015460029092015490919060ff1683565b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020526000908152604090205481565b6004602052600090815260409020546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b600080600060088481548110610e1d57fe5b6000918252602090912001546001600160a01b03169050610e3c6112c6565b6001600160a01b0316856001600160a01b03161415610e78576001600160a01b0381166000908152600260205260409020549092509050610fe0565b6001600160a01b0380821660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190612b31565b905080610f18575090925060009150610fe09050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610f47908b90600401612d58565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612b31565b6001600160a01b0385166000908152600360205260409020549091508490610fd7908490610fcb908563ffffffff61215316565b9063ffffffff61219616565b95509550505050505b9250929050565b610fef611fa8565b6001600160a01b03166110006112c6565b6001600160a01b0316146110265760405162461bcd60e51b8152600401610595906130ae565b60005b81518110156110c7576009600083838151811061104257fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166110bf5760016009600084848151811061107f57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101611029565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600881815481106110fc57fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205481565b611130611fa8565b6001600160a01b03166111416112c6565b6001600160a01b0316146111675760405162461bcd60e51b8152600401610595906130ae565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600c81815481106111be57fe5b600091825260209091200154905081565b600d5460ff1690565b6111e0611fa8565b6001600160a01b03166111f16112c6565b6001600160a01b0316146112175760405162461bcd60e51b8152600401610595906130ae565b60005b81811015610d2e576009600084848481811061123257fe5b905060200201602081019061124791906128fe565b6001600160a01b0316815260208101919091526040016000205460ff161515600114156112be5760006009600085858581811061128057fe5b905060200201602081019061129591906128fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b60010161121a565b6000546001600160a01b031690565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffa612357f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611366929190612dd1565b604080518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612bc0565b600d5490925060ff161515600114905080611424575080421015801561142457507f00000000000000000000000000000000000000000000000000000000000000006001600160801b03166000908152600f6020526040812060029081015460ff169081111561142157fe5b14155b91505090565b60096020526000908152604090205460ff1681565b60065490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020526000908152604090205460ff1681565b600e5481565b60085490565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b505050505081565b81600081116115395760405162461bcd60e51b8152600401610595906131ee565b60006115436112d5565b9050336001600160a01b0316600e54846001600160a01b03167fbd9be3d6449ecbdf4b3b9980b1631ec06c13d8cf9e09e2433075f123b348e3ba8760405161158b9190612db4565b60405180910390a461159e8484836121c8565b50505050565b6000805b6008548110156115f657826001600160a01b0316600882815481106115c957fe5b6000918252602090912001546001600160a01b031614156115ee57600191505061056f565b6001016115a8565b50600092915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116475760405162461bcd60e51b81526004016105959061310d565b7fc95987c1992805ee34bdc915e017cceae36ba1c156b9911fa7e691e6435eb46e42838360405161167a939291906132df565b60405180910390a16001808201600e556000828152600f60205260408082209283018590554283555163a7b72ac560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7b72ac5906116ec903090600401612d58565b604080518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190612b78565b50604051631993b9df60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631993b9df9061178d90879030906004016132a2565b60206040518083038186803b1580156117a557600080fd5b505afa1580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190612a6d565b156118f5576002828101805460ff191660011790556127109060009061182b9061180b90610fcb8987612403565b610fcb8461181f8a8863ffffffff61242816565b9063ffffffff61215316565b90506000611879600161186d886001600160801b037f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61242816565b9063ffffffff61240316565b905060006118df6001600160801b0360017f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000030116610fcb858563ffffffff61215316565b90506118ec878286612450565b5050505061159e565b6002828101805460ff1916909117905561190e8361256f565b600d805460ff1916600117905550505050565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b61195c611fa8565b6001600160a01b031661196d6112c6565b6001600160a01b0316146119935760405162461bcd60e51b8152600401610595906130ae565b6001600160a01b0381166119b95760405162461bcd60e51b815260040161059590612e84565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681815481106110fc57fe5b80611a4f816115a4565b1515600114611a705760405162461bcd60e51b815260040161059590612f38565b60017f000000000000000000000000000000000000000000000000000000000000000015151415611acf573360009081526009602052604090205460ff161515600114611acf5760405162461bcd60e51b8152600401610595906131c5565b611aea6001600160a01b03831633308663ffffffff6126d416565b611af26112c6565b6001600160a01b0316336001600160a01b031614611d62576001600160a01b03821660009081526002602090815260408083205460039092529091205481611b6e67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661181f848963ffffffff61240316565b1115611b8c5760405162461bcd60e51b815260040161059590613197565b6001600160a01b0380851660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015611bde57600080fd5b505afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612b31565b905080611c82576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611c4b9033908b90600401612d6c565b600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611d16565b6001600160a01b03861660009081526003602052604081205490611cb082610fcb8b8663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611ce19033908590600401612d6c565b600060405180830381600087803b158015611cfb57600080fd5b505af1158015611d0f573d6000803e3d6000fd5b5050505050505b6001600160a01b038616600090815260036020526040902054611d3f908863ffffffff61240316565b6001600160a01b03871660009081526003602052604090205550611f3092505050565b6001600160a01b0380831660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b158015611db357600080fd5b505afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb9190612b31565b905080611e57576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611e209033908990600401612d6c565b600060405180830381600087803b158015611e3a57600080fd5b505af1158015611e4e573d6000803e3d6000fd5b50505050611eeb565b6001600160a01b03841660009081526002602052604081205490611e8582610fcb898663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611eb69033908590600401612d6c565b600060405180830381600087803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b5050505050505b6001600160a01b038416600090815260026020526040902054611f14908663ffffffff61240316565b6001600160a01b03851660009081526002602052604090205550505b3360009081526007602052604090205460ff16610d2e57336000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055505050565b3390565b80611fb6816115a4565b1515600114611fd75760405162461bcd60e51b815260040161059590612f38565b6001600160a01b0380831660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612b31565b6001600160a01b03851660009081526003602052604081205491925061209182610fcb898663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc6790906120c29033908590600401612d6c565b600060405180830381600087803b1580156120dc57600080fd5b505af11580156120f0573d6000803e3d6000fd5b5050506001600160a01b03871660009081526003602052604090205461211d91508863ffffffff61242816565b6001600160a01b03871660008181526003602052604090209190915561214a90338963ffffffff61272c16565b50505050505050565b60008261216257506000612190565b8282028284828161216f57fe5b041461218d5760405162461bcd60e51b81526004016105959061306d565b90505b92915050565b60008082116121b75760405162461bcd60e51b815260040161059590612fe0565b8183816121c057fe5b049392505050565b816121d2816115a4565b15156001146121f35760405162461bcd60e51b815260040161059590612f38565b6001600160a01b03831660009081526002602090815260408083205460039092529091205483612285576122578167ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b612267838863ffffffff61242816565b10156122855760405162461bcd60e51b815260040161059590613262565b6001600160a01b0380861660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190612b31565b6001600160a01b03881660009081526002602052604081205491925061233e82610fcb8c8663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc67909061236f9033908590600401612d6c565b600060405180830381600087803b15801561238957600080fd5b505af115801561239d573d6000803e3d6000fd5b5050506001600160a01b038a166000908152600260205260409020546123ca91508b63ffffffff61242816565b6001600160a01b038a166000818152600260205260409020919091556123f790338c63ffffffff61272c16565b50505050505050505050565b60008282018381101561218d5760405162461bcd60e51b815260040161059590612eca565b60008282111561244a5760405162461bcd60e51b815260040161059590612f63565b50900390565b60005b60085481101561159e5760006008828154811061246c57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906124a885610fcb848963ffffffff61215316565b6001600160a01b0384166000908152600360205260409020549091506124d4908263ffffffff61242816565b6001600160a01b038416600090815260036020908152604080832093909355600290522054612509908263ffffffff61240316565b6001600160a01b0384166000818152600260205260409081902092909255905188907f3173c1c4b679e2da86dbb0382bde749a6e16cd31912c5410e17985cd7d2b90529061255c908a908a9087906132df565b60405180910390a3505050600101612453565b60005b6008548110156110c75760006008828154811061258b57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906125ed8267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b6001600160a01b038416600090815260026020526040902054909150612619908263ffffffff61242816565b6001600160a01b03841660009081526002602090815260408083209390935560039052205461264e908263ffffffff61240316565b6001600160a01b0384166000818152600360205260409081902092909255905186907f89385e9d619600da63726158403c0cfd9772b2cac90d3e093387a5456ee1a247906126c19086907f00000000000000000000000000000000000000000000000000000000000000009087906132f5565b60405180910390a3505050600101612572565b61159e846323b872dd60e01b8585856040516024016126f593929190612d85565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261274b565b610d2e8363a9059cbb60e01b84846040516024016126f5929190612d6c565b60606127a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127da9092919063ffffffff16565b805190915015610d2e57808060200190518101906127be9190612a6d565b610d2e5760405162461bcd60e51b815260040161059590613218565b60606127e984846000856127f3565b90505b9392505050565b6060824710156128155760405162461bcd60e51b815260040161059590612f9a565b61281e856128b4565b61283a5760405162461bcd60e51b815260040161059590613160565b60006060866001600160a01b031685876040516128579190612c84565b60006040518083038185875af1925050503d8060008114612894576040519150601f19603f3d011682016040523d82523d6000602084013e612899565b606091505b50915091506128a98282866128ba565b979650505050505050565b3b151590565b606083156128c95750816127ec565b8251156128d95782518084602001fd5b8160405162461bcd60e51b81526004016105959190612df7565b80356121908161339d565b60006020828403121561290f578081fd5b813561218d8161339d565b60006020828403121561292b578081fd5b815161218d8161339d565b60008060408385031215612948578081fd5b82356129538161339d565b946020939093013593505050565b60008060208385031215612973578182fd5b823567ffffffffffffffff8082111561298a578384fd5b81850186601f82011261299b578485fd5b80359250818311156129ab578485fd5b86602080850283010111156129be578485fd5b60200196919550909350505050565b600060208083850312156129df578182fd5b823567ffffffffffffffff8111156129f5578283fd5b80840185601f820112612a06578384fd5b80359150612a1b612a1683613351565b61332a565b8281528381019082850185850284018601891015612a37578687fd5b8693505b84841015612a6157612a4d89826128f3565b835260019390930192918501918501612a3b565b50979650505050505050565b600060208284031215612a7e578081fd5b8151801515811461218d578182fd5b600060208284031215612a9e578081fd5b815167ffffffffffffffff80821115612ab5578283fd5b81840185601f820112612ac6578384fd5b8051925081831115612ad6578384fd5b612ae9601f8401601f191660200161332a565b9150828252856020848301011115612aff578384fd5b612b10836020840160208401613371565b50949350505050565b600060208284031215612b2a578081fd5b5035919050565b600060208284031215612b42578081fd5b5051919050565b60008060408385031215612b5b578182fd5b823591506020830135612b6d8161339d565b809150509250929050565b60008060408385031215612b8a578182fd5b82519150602083015160068110612b6d578182fd5b60008060408385031215612bb1578182fd5b50508035926020909101359150565b60008060408385031215612bd2578182fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215612bff578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015167ffffffffffffffff81168114612c47578182fd5b809150509295985092959890939650565b60008151808452612c70816020860160208601613371565b601f01601f19169290920160200192915050565b60008251612c96818460208701613371565b9190910192915050565b60006a44534c412d53484f52542d60a81b82528251612cc681600b850160208701613371565b91909101600b0192915050565b60006744534c412d53502d60c01b82528251612cf6816008850160208701613371565b9190910160080192915050565b60006944534c412d4c4f4e472d60b01b82528251612d2881600a850160208701613371565b91909101600a0192915050565b60006744534c412d4c502d60c01b82528251612cf6816008850160208701613371565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6020810160068310612dcb57fe5b91905290565b6040810160068410612ddf57fe5b9281526001600160801b039190911660209091015290565b6000602082526127ec6020830184612c58565b600060408252612e1d6040830185612c58565b8281036020840152612e2f8185612c58565b95945050505050565b600060808252612e4b6080830187612c58565b8281036020840152612e5d8187612c58565b8381036040850152612e6f8187612c58565b91505082810360608401526128a98185612c58565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601a908201527f6e6f7420616c6c6f77656420627920534c415265676973747279000000000000604082015260600190565b6020808252601190820152701d1bdad95b881b9bdd08185b1b1bddd959607a1b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600d908201526c185b1c9958591e481859191959609a1b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f0dac2f040e8ded6cadc40d8cadccee8d60831b604082015260600190565b6020808252600e908201526d37b7363c9036b2b9b9b2b733b2b960911b604082015260600190565b602080825260119082015270199a5b9a5cda19590818dbdb9d1c9858dd607a1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260149082015273696e636f72726563742075736572207374616b6560601b604082015260600190565b6020808252600f908201526e1b9bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526010908201526f0616d6f756e742063616e7420626520360841b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260129082015271696e636f727265637420776974686472617760701b604082015260600190565b6001600160801b0391909116815260200190565b9182526001600160a01b0316602082015260400190565b8381526020810183905260608101600383106132d157fe5b826040830152949350505050565b9283526020830191909152604082015260600190565b92835267ffffffffffffffff919091166020830152604082015260600190565b67ffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561334957600080fd5b604052919050565b600067ffffffffffffffff821115613367578081fd5b5060209081020190565b60005b8381101561338c578181015183820152602001613374565b8381111561159e5750506000910152565b6001600160a01b03811681146133b257600080fd5b5056fea2646970667358221220b86e9511e61c712ad56a8bf108afa926c52182c45710508c26729f472bb2b9ab64736f6c634300060600338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220d35106eb9148aa3ef21387269b88844bcd5a15680b17632172b6c41ce628949564736f6c63430006060033",
          "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x6236 CODESIZE SUB DUP1 PUSH3 0x6236 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1B4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP1 DUP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xF3881589 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 PUSH4 0xF3881589 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD DUP8 DUP5 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xF3881589 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xF3881589 SWAP3 POP PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x126 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xF3881589 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP4 POP PUSH4 0xF3881589 SWAP3 POP PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x19D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0x80 MSTORE POP PUSH3 0x24F SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x1CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x1D9 DUP2 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x1EC DUP2 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x1FF DUP2 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x212 DUP2 PUSH3 0x236 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x228 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xF8 SHR PUSH2 0x5FC4 PUSH3 0x272 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x43A MSTORE DUP1 PUSH2 0x1483 MSTORE POP PUSH2 0x5FC4 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0xE2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68304835 GT PUSH3 0x99 JUMPI DUP1 PUSH4 0x96BDDC10 GT PUSH3 0x6F JUMPI DUP1 PUSH4 0x96BDDC10 EQ PUSH3 0x1B8 JUMPI DUP1 PUSH4 0x9FC4CAA5 EQ PUSH3 0x1C2 JUMPI DUP1 PUSH4 0xA9E43E7F EQ PUSH3 0x1CC JUMPI DUP1 PUSH4 0xC4277A7B EQ PUSH3 0x1E5 JUMPI PUSH3 0xE2 JUMP JUMPDEST DUP1 PUSH4 0x68304835 EQ PUSH3 0x180 JUMPI DUP1 PUSH4 0x788164B1 EQ PUSH3 0x18A JUMPI DUP1 PUSH4 0x8D2113ED EQ PUSH3 0x1A1 JUMPI PUSH3 0xE2 JUMP JUMPDEST DUP1 PUSH4 0xD0F4DB7 EQ PUSH3 0xE7 JUMPI DUP1 PUSH4 0x2575D7CA EQ PUSH3 0x100 JUMPI DUP1 PUSH4 0x50C5ABFE EQ PUSH3 0x117 JUMPI DUP1 PUSH4 0x516C2857 EQ PUSH3 0x146 JUMPI DUP1 PUSH4 0x5A7D1E5D EQ PUSH3 0x16C JUMPI DUP1 PUSH4 0x5C4DF332 EQ PUSH3 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFE PUSH3 0xF8 CALLDATASIZE PUSH1 0x4 PUSH3 0x17B1 JUMP JUMPDEST PUSH3 0x1FC JUMP JUMPDEST STOP JUMPDEST PUSH3 0xFE PUSH3 0x111 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0x7D5 JUMP JUMPDEST PUSH3 0x12E PUSH3 0x128 CALLDATASIZE PUSH1 0x4 PUSH3 0x1739 JUMP JUMPDEST PUSH3 0xC17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x15D PUSH3 0x157 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1AC3 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xD93 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xDA2 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xDB1 JUMP JUMPDEST PUSH3 0xFE PUSH3 0x19B CALLDATASIZE PUSH1 0x4 PUSH3 0x176B JUMP JUMPDEST PUSH3 0xDC0 JUMP JUMPDEST PUSH3 0xFE PUSH3 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH3 0x1688 JUMP JUMPDEST PUSH3 0x134B JUMP JUMPDEST PUSH3 0x15D PUSH3 0x140E JUMP JUMPDEST PUSH3 0x12E PUSH3 0x1472 JUMP JUMPDEST PUSH3 0x1D6 PUSH3 0x1481 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1B12 JUMP JUMPDEST PUSH3 0x1D6 PUSH3 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0x14A5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EFE27EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDDFC4FDE SWAP1 PUSH3 0x231 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x25F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x285 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x2B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1BA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EFE27EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDDFC4FDE SWAP1 PUSH3 0x2E4 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x312 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x338 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1DF3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x47EF60ED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8FDEC1DA SWAP1 PUSH3 0x38D SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x3BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3E1 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x403 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1B72 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH3 0x438 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D83 JUMP JUMPDEST PUSH32 0x0 ISZERO PUSH3 0x50D JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1E8760EF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x7A1D83BC SWAP1 PUSH3 0x494 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4E8 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0x50B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1CC4 JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xEF4003DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF4003DB SWAP1 PUSH3 0x540 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x56E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x594 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 ISZERO ISZERO EQ PUSH3 0x5BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1CE9 JUMP JUMPDEST PUSH1 0x0 CALLER DUP13 DUP12 DUP14 DUP13 DUP13 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH3 0x5DA SWAP1 PUSH3 0x14F3 JUMP JUMPDEST PUSH3 0x5EF SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x19D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x60C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC7AD72B DUP16 DUP16 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x655 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1E85 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x685 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3D7DA605 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x7AFB4C0A SWAP2 POP PUSH3 0x6C4 SWAP1 CALLER SWAP1 DUP6 SWAP1 DUP15 DUP15 SUB PUSH1 0x1 ADD SWAP1 PUSH1 0x4 ADD PUSH3 0x19AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x6F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 SWAP4 POP PUSH3 0x76A SWAP3 POP PUSH3 0x14C3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP5 SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0xB52F284A6C14F1A66AB5513B5B539066933E58E69E6432666F0E3C8C8A7D7503 SWAP2 LOG3 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7E0 DUP2 PUSH3 0x14A5 JUMP JUMPDEST PUSH3 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x84E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x874 SWAP2 SWAP1 PUSH3 0x1669 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x8A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C6B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3385D334 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x8F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x91E SWAP2 SWAP1 PUSH3 0x171A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x46E0FBAE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x97A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x9A0 SWAP2 SWAP1 PUSH3 0x16FB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x59EDCB PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xFFA61235 SWAP1 PUSH3 0x9DD SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA30 SWAP2 SWAP1 PUSH3 0x18AE JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4190EDDE DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA63 SWAP2 SWAP1 PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAB7 SWAP2 SWAP1 PUSH3 0x18D2 JUMP JUMPDEST SWAP3 POP POP POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7FD788AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xB0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xB30 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST DUP1 PUSH3 0xB55 JUMPI POP DUP2 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH3 0xB55 JUMPI POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0xB52 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH3 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0x892DBA94A39DC15A34A9767DC9A0E553ACE780857B076507BECF599634BFBB67 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x12BAEBE5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2575D7CA SWAP1 PUSH3 0xBDC SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xBF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0xC25 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 DUP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH3 0xC74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0xC9F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0xD06 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0xCF1 JUMPI JUMPDEST POP SWAP4 SWAP5 POP PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD89 JUMPI PUSH1 0x4 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xD2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH3 0xD3D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xD68 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH3 0xD12 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0xDCB DUP3 PUSH3 0x14A5 JUMP JUMPDEST PUSH3 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB1659BAD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE5F SWAP2 SWAP1 PUSH3 0x1752 JUMP JUMPDEST DUP4 EQ PUSH3 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x20C876EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x4190EDDE SWAP1 PUSH3 0xEB1 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xEDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xF05 SWAP2 SWAP1 PUSH3 0x18D2 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH3 0xF13 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0xF20 JUMPI INVALID JUMPDEST EQ PUSH3 0xF40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D20 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7FD788AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xF91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xFB7 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0xFDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1E2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21EEF7F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x21EEF7F SWAP1 PUSH3 0x100B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1039 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x105F SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x1081 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1DC8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x46E0FBAE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x10BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x10D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x10F8 SWAP2 SWAP1 PUSH3 0x16FB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31EDB3AD PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC7B6CEB4 SWAP1 PUSH3 0x1132 SWAP1 DUP6 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B59 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x114B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1186 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x11A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C99 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA224EE9C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x11E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x11F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x121F SWAP2 SWAP1 PUSH3 0x1669 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xA204D52D2C80FBD794029BCA489FB7B1C4DD5F7D5967806277F579CC68343146 DUP12 PUSH1 0x40 MLOAD PUSH3 0x1266 SWAP2 SWAP1 PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH4 0x4BD410C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x97A82192 SWAP1 PUSH3 0x12A2 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH3 0x1E5E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x12BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8BCF0CF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x22F3C33C SWAP2 POP PUSH3 0x130C SWAP1 DUP12 SWAP1 CALLER SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH3 0x1A9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x133C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF3881589 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x139C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xEABB8A73 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0xEABB8A73 SWAP2 POP PUSH3 0x13D6 SWAP1 CALLER SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH3 0x1974 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x13F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1406 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x1468 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x1449 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH3 0x14E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1BE0 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4059 DUP1 PUSH3 0x1F36 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1EEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x151F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1536 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH3 0x1548 DUP3 DUP3 ADD PUSH3 0x1EB6 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH3 0x1565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0x158A JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH3 0x156A JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x15C0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x15D7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x15EC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0x1EB6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F1F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1655 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1662 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x167B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1EEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x169B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH3 0x16A8 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x16D2 DUP6 DUP3 DUP7 ADD PUSH3 0x15AF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x16EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F02 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x170D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x172C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x174B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1764 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1780 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH3 0x1794 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH3 0x17A6 DUP2 PUSH3 0x1F02 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x17D1 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP11 CALLDATALOAD SWAP10 POP PUSH3 0x17E4 DUP13 PUSH1 0x20 DUP14 ADD PUSH3 0x15A2 JUMP JUMPDEST SWAP9 POP PUSH3 0x17F5 DUP13 PUSH1 0x40 DUP14 ADD PUSH3 0x1595 JUMP JUMPDEST SWAP8 POP PUSH3 0x1806 DUP13 PUSH1 0x60 DUP14 ADD PUSH3 0x1501 JUMP JUMPDEST SWAP7 POP PUSH3 0x1817 DUP13 PUSH1 0x80 DUP14 ADD PUSH3 0x15A2 JUMP JUMPDEST SWAP6 POP PUSH3 0x1828 DUP13 PUSH1 0xA0 DUP14 ADD PUSH3 0x161D JUMP JUMPDEST SWAP5 POP PUSH3 0x1839 DUP13 PUSH1 0xC0 DUP14 ADD PUSH3 0x161D JUMP JUMPDEST SWAP4 POP PUSH1 0xE0 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1856 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x1864 DUP15 DUP4 DUP16 ADD PUSH3 0x15AF JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x187B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x188A DUP14 DUP3 DUP15 ADD PUSH3 0x150E JUMP JUMPDEST SWAP3 POP POP PUSH3 0x189D DUP13 PUSH2 0x120 DUP14 ADD PUSH3 0x162A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x18C1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x18E7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x3 DUP2 LT PUSH3 0x17A6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x192B JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x190D JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x193D JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x19A2 SWAP1 DUP4 ADD DUP5 PUSH3 0x1904 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP15 AND DUP5 MSTORE PUSH1 0x20 DUP14 ISZERO ISZERO DUP2 DUP7 ADD MSTORE PUSH3 0x19FC DUP14 PUSH3 0x1EDE JUMP JUMPDEST DUP13 PUSH1 0x40 DUP7 ADD MSTORE DUP2 DUP13 AND PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 POP DUP2 DUP12 AND PUSH1 0x80 DUP7 ADD MSTORE DUP2 DUP11 AND PUSH1 0xA0 DUP7 ADD MSTORE DUP2 DUP10 AND PUSH1 0xC0 DUP7 ADD MSTORE DUP3 PUSH1 0xE0 DUP7 ADD MSTORE PUSH3 0x1A40 DUP4 DUP7 ADD DUP10 PUSH3 0x1904 JUMP JUMPDEST DUP6 DUP2 SUB PUSH2 0x100 DUP8 ADD MSTORE DUP8 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP4 POP DUP2 DUP9 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1A78 JUMPI DUP4 MLOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP3 DUP3 ADD SWAP3 PUSH1 0x1 ADD PUSH3 0x1A5A JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH3 0x1A90 PUSH2 0x120 DUP4 ADD DUP5 PUSH3 0x1952 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1B06 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x1ADF JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x1B2C DUP4 PUSH3 0x1EDE JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x1B41 DUP5 PUSH3 0x1EDE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x1B68 DUP5 PUSH3 0x1EDE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x706572696F642074797065206E6F7420696E697469616C697A65640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x666972737420706572696F6420696420696E76616C6964000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x696E76616C696420534C41 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x1B9BDD08199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x36B9B39739B2B73232B9103737BA1037BBB732B9 PUSH1 0x61 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1C195C9A5BD9081D5B999A5B9A5CDA1959 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x1C185CDD081C195C9A5BD9 PUSH1 0xAA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x6D657373656E676572206E6F7420726567697374657265640000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E76616C696420534C4120737461747573 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F74206E65787456657269666961626C65506572696F640000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x696E76616C69642066696E616C506572696F6449642F696E697469616C506572 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x1A5BD91259 PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1A5B9D985B1A59081C195C9A5BD9081259 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C20706572696F6420696420696E76616C6964000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x189C995858DA19590818DBDB9D1C9858DD PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 DUP2 ADD PUSH3 0x1E97 DUP5 PUSH3 0x1EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 DUP2 LT PUSH3 0x1EE9 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP2 LT PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH2 0x240 PUSH1 0x40 MSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4059 CODESIZE SUB DUP1 PUSH3 0x4059 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3F SWAP2 PUSH3 0x8F3 JUMP JUMPDEST CALLER DUP9 DUP11 DUP7 DUP5 DUP15 PUSH1 0x0 PUSH3 0x5A PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x596 AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4039 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x68304835 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x108 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9FC4CAA5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x17D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1A3 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE DUP5 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1C0 JUMPI INVALID JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1D0 JUMPI INVALID JUMPDEST PUSH1 0xF8 SWAP1 DUP2 SHL SWAP1 SWAP2 MSTORE DUP6 ISZERO ISZERO SWAP1 SHL PUSH2 0x120 MSTORE POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x7B8041CF PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xF700839E SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH2 0x100 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x243 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x269 SWAP2 SWAP1 PUSH3 0x9FA JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP SWAP2 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8B8E5309 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2FD SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xC0 MSTORE PUSH1 0xE0 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x80 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP2 AND SWAP1 DUP6 AND GT DUP1 ISZERO SWAP1 PUSH3 0x370 JUMPI POP PUSH1 0x1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO JUMPDEST PUSH3 0x398 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xAA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0xC0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH2 0x140 MSTORE POP PUSH3 0x3BD SWAP3 POP DUP13 SWAP2 POP POP PUSH3 0x59B JUMP JUMPDEST DUP3 MLOAD PUSH3 0x3D2 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x675 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP9 SWAP1 SHL AND PUSH2 0x160 MSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x9FC4CAA5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x9FC4CAA5 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x43E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x453 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x479 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH2 0x180 MSTORE PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5A7D1E5D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x5A7D1E5D SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x50B SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH2 0x1A0 MSTORE NUMBER PUSH2 0x1C0 MSTORE PUSH1 0x80 DUP7 DUP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 DUP2 AND PUSH2 0x1E0 MSTORE SWAP1 DUP7 SWAP1 SHL AND PUSH2 0x200 MSTORE DUP8 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x54C JUMPI INVALID JUMPDEST PUSH2 0x220 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x55C JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL SWAP1 MSTORE POP DUP2 MLOAD PUSH3 0x577 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6FA JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND PUSH1 0xE SSTORE POP PUSH3 0xB4A SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLER JUMPDEST SWAP1 JUMP JUMPDEST PUSH3 0x5AE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x596 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x5CA PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x666 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xAD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x61C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xA63 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4039 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x6B8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x6E8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x6E8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x6E8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6CB JUMP JUMPDEST POP PUSH3 0x6F6 SWAP3 SWAP2 POP PUSH3 0x737 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x6E8 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD DUP3 DUP2 GT ISZERO PUSH3 0x6E8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6CB JUMP JUMPDEST PUSH3 0x598 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x6F6 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x73E JUMP JUMPDEST DUP1 MLOAD PUSH3 0x761 DUP2 PUSH3 0xB31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x778 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x78E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH3 0x7A0 DUP3 DUP3 ADD PUSH3 0xB0A JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH3 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0x7E2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH3 0x7C2 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x6 DUP2 LT PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x81F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x835 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 PUSH3 0x84B PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH3 0xB0A JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP5 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0x862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x882 JUMPI DUP5 DUP2 ADD DUP3 ADD MLOAD DUP5 DUP3 ADD DUP4 ADD MSTORE DUP2 ADD PUSH3 0x865 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x894 JUMPI PUSH1 0x0 DUP3 DUP5 DUP7 ADD ADD MSTORE JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x8DF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x8EC DUP2 PUSH3 0xB31 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x913 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH3 0x91F DUP13 DUP13 PUSH3 0x754 JUMP JUMPDEST SWAP10 POP PUSH3 0x930 DUP13 PUSH1 0x20 DUP14 ADD PUSH3 0x7ED JUMP JUMPDEST SWAP9 POP PUSH3 0x941 DUP13 PUSH1 0x40 DUP14 ADD PUSH3 0x7FE JUMP JUMPDEST SWAP8 POP PUSH3 0x952 DUP13 PUSH1 0x60 DUP14 ADD PUSH3 0x754 JUMP JUMPDEST SWAP7 POP PUSH3 0x963 DUP13 PUSH1 0x80 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST SWAP6 POP PUSH3 0x974 DUP13 PUSH1 0xA0 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST SWAP5 POP PUSH3 0x985 DUP13 PUSH1 0xC0 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST PUSH1 0xE0 DUP13 ADD MLOAD SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9A2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x9B0 DUP15 DUP4 DUP16 ADD PUSH3 0x80E JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x9C7 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x9D6 DUP14 DUP3 DUP15 ADD PUSH3 0x767 JUMP JUMPDEST SWAP3 POP POP PUSH3 0x9E9 DUP13 PUSH2 0x120 DUP14 ADD PUSH3 0x8B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH3 0xA17 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 MLOAD SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP5 POP PUSH1 0x80 DUP10 ADD MLOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD MLOAD SWAP2 POP PUSH3 0xA54 DUP11 PUSH1 0xE0 DUP12 ADD PUSH3 0x8B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E636F7272656374206C65766572616765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xB47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x80 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xF8 SHR PUSH2 0x120 MLOAD PUSH1 0xF8 SHR PUSH2 0x140 MLOAD PUSH1 0xC0 SHR PUSH2 0x160 MLOAD PUSH1 0x60 SHR PUSH2 0x180 MLOAD PUSH1 0x60 SHR PUSH2 0x1A0 MLOAD PUSH1 0x60 SHR PUSH2 0x1C0 MLOAD PUSH2 0x1E0 MLOAD PUSH1 0x80 SHR PUSH2 0x200 MLOAD PUSH1 0x80 SHR PUSH2 0x220 MLOAD PUSH1 0xF8 SHR PUSH2 0x33EB PUSH3 0xC4E PUSH1 0x0 CODECOPY DUP1 PUSH2 0xDA1 MSTORE DUP1 PUSH2 0x1309 MSTORE POP DUP1 PUSH2 0x534 MSTORE DUP1 PUSH2 0xD59 MSTORE DUP1 PUSH2 0x132A MSTORE DUP1 PUSH2 0x13D8 MSTORE DUP1 PUSH2 0x18AD MSTORE POP DUP1 PUSH2 0x4FB MSTORE DUP1 PUSH2 0xC48 MSTORE DUP1 PUSH2 0x1842 MSTORE DUP1 PUSH2 0x188C MSTORE POP DUP1 PUSH2 0xC24 MSTORE POP DUP1 PUSH2 0x16B7 MSTORE DUP1 PUSH2 0x1756 MSTORE POP DUP1 PUSH2 0x12DA MSTORE POP DUP1 PUSH2 0x1447 MSTORE DUP1 PUSH2 0x160A MSTORE POP DUP1 PUSH2 0xD35 MSTORE DUP1 PUSH2 0x1B3E MSTORE DUP1 PUSH2 0x222C MSTORE DUP1 PUSH2 0x25C2 MSTORE DUP1 PUSH2 0x269A MSTORE POP DUP1 PUSH2 0xC00 MSTORE DUP1 PUSH2 0x1A74 MSTORE POP POP DUP1 PUSH2 0x10CD MSTORE POP DUP1 PUSH2 0x1A16 MSTORE POP DUP1 PUSH2 0x94A MSTORE DUP1 PUSH2 0x1932 MSTORE POP POP PUSH2 0x33EB PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x248 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78025EC4 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0xB7BC347E GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xDB69A462 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDB69A462 EQ PUSH2 0x4B9 JUMPI DUP1 PUSH4 0xF2DB10FE EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xF7E9DFFF EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xFD5E6DD1 EQ PUSH2 0x4E4 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0xB7BC347E EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xC623674F EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0xC8B5C248 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xCBE230C3 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0xD7A5C422 EQ PUSH2 0x4A6 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x9B19251A GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x9FABEB00 EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA224EE9C EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0xA7E8D8D4 EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0xB1659BAD EQ PUSH2 0x45B JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x78025EC4 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x7FD788AA EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x8D21C770 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0x96F76F11 EQ PUSH2 0x41D JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x46E0FBAE GT PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x5AE698FF GT PUSH2 0x18D JUMPI DUP1 PUSH4 0x5AE698FF EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0x5C1C20DE EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x5E5F2E26 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x639B6FC3 EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3DF JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x46E0FBAE EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x484FBF2B EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x4E0C91F6 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x4FB2647E EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x57AC94F0 EQ PUSH2 0x37D JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x2526743A GT PUSH2 0x210 JUMPI DUP1 PUSH4 0x2526743A EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x26DB18AC EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x2C86D98E EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3385D334 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x4190EDDE EQ PUSH2 0x300 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x21EEF7F EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xBEA440D EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x171E44EA EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x18E45427 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x1BF30929 EQ PUSH2 0x2A6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x260 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x289 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x289 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST PUSH2 0x260 PUSH2 0xBFE JUMP JUMPDEST PUSH2 0x2AE PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x328E JUMP JUMPDEST PUSH2 0x289 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0xC6A JUMP JUMPDEST PUSH2 0x2EB PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x3315 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0xD7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32B9 JUMP JUMPDEST PUSH2 0x32A PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DBD JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDF0 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x2936 JUMP JUMPDEST PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP3 SWAP2 SWAP1 PUSH2 0x2D6C JUMP JUMPDEST PUSH2 0x289 PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x29CD JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x10CB JUMP JUMPDEST PUSH2 0x35D PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x3DA CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x11B1 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x11CF JUMP JUMPDEST PUSH2 0x289 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x2961 JUMP JUMPDEST PUSH2 0x11D8 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x433 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x142A JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x143F JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1445 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x456 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x147E JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x1484 JUMP JUMPDEST PUSH2 0x473 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0x1518 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x4B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B9F JUMP JUMPDEST PUSH2 0x15FF JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1921 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0x1930 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x4D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1954 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1A14 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x1A38 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT ISZERO PUSH2 0x532 JUMPI POP PUSH1 0x0 PUSH2 0x56F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 GT ISZERO PUSH2 0x56B JUMPI POP PUSH1 0x0 PUSH2 0x56F JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0x59E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3135 JUMP JUMPDEST PUSH2 0x5D2 DUP5 DUP5 PUSH2 0x1A45 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x1BD1EB6B4FD3F08E718D7A241C54C4641C9F36004B6949383F48D15A2FCC8F52 DUP8 PUSH1 0x40 MLOAD PUSH2 0x618 SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x68304835 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x68304835 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x679 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x59482847 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB290508E SWAP1 PUSH2 0x6CC SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71E SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x72E PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x73F PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x7B8041CF PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF700839E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH2 0x100 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E3 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH2 0x7F5 DUP3 PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3017 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH2 0x842 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST PUSH2 0x8AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F01 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 DUP3 SWAP1 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE SLOAD DUP2 LT ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFC966D45 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xFC966D45 SWAP1 PUSH2 0x972 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x328E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x99E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9C6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2A8D JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9FF SWAP2 SWAP1 PUSH2 0x2CD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA23 SWAP2 SWAP1 PUSH2 0x2D03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA47 SWAP2 SWAP1 PUSH2 0x2D35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x1 SLOAD PUSH4 0x33502147 PUSH1 0xE1 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x66A0428E SWAP1 PUSH2 0xA8D SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xABB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xADF SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x33502147 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x66A0428E SWAP1 PUSH2 0xB17 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB45 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP6 DUP10 AND SWAP6 SWAP1 SWAP3 AND DUP6 OR SWAP1 SWAP2 SSTORE MLOAD SWAP4 SWAP5 POP SWAP2 SWAP3 PUSH32 0xCE8C390DC55DBCD418078F1391FBB7D471C01C228FC4464926095354CB27C029 SWAP1 PUSH2 0xBEB SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP14 SWAP1 DUP2 SWAP1 PUSH2 0x2E38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0xC8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH2 0xC93 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCD6 JUMPI PUSH1 0x0 PUSH2 0xCB5 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x303E JUMP JUMPDEST POP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5D73C1B3AAB5BAE46E08E09668D192166389623BEF76BBE8CDAE8DF8AD320FCE DUP7 PUSH1 0x40 MLOAD PUSH2 0xD1C SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xD2E DUP4 DUP4 PUSH2 0x1FAC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x8 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0xE1D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH2 0xE3C PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE78 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF02 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xF18 JUMPI POP SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0xFE0 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xF47 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF97 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP5 SWAP1 PUSH2 0xFD7 SWAP1 DUP5 SWAP1 PUSH2 0xFCB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2196 AND JUMP JUMPDEST SWAP6 POP SWAP6 POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFEF PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1000 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1026 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x9 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1042 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x10BF JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x107F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1029 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x10FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1130 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1141 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11BE JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11E0 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11F1 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1217 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD2E JUMPI PUSH1 0x9 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1232 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1247 SWAP2 SWAP1 PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x12BE JUMPI PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x1280 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1295 SWAP2 SWAP1 PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x121A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFFA61235 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1366 SWAP3 SWAP2 SWAP1 PUSH2 0x2DD1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x137D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13B5 SWAP2 SWAP1 PUSH2 0x2BC0 JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP3 POP PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ SWAP1 POP DUP1 PUSH2 0x1424 JUMPI POP DUP1 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 0x1424 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x1421 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1510 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1510 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0x1539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1543 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xBD9BE3D6449ECBDF4B3B9980B1631EC06C13D8CF9E09E2433075F123B348E3BA DUP8 PUSH1 0x40 MLOAD PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x159E DUP5 DUP5 DUP4 PUSH2 0x21C8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x15F6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15C9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15EE JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x56F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15A8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1647 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x310D JUMP JUMPDEST PUSH32 0xC95987C1992805EE34BDC915E017CCEAE36BA1C156B9911FA7E691E6435EB46E TIMESTAMP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x167A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 DUP3 ADD PUSH1 0xE SSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 DUP4 ADD DUP6 SWAP1 SSTORE TIMESTAMP DUP4 SSTORE MLOAD PUSH4 0xA7B72AC5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA7B72AC5 SWAP1 PUSH2 0x16EC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x173B SWAP2 SWAP1 PUSH2 0x2B78 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1993B9DF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1993B9DF SWAP1 PUSH2 0x178D SWAP1 DUP8 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x32A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17DD SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST ISZERO PUSH2 0x18F5 JUMPI PUSH1 0x2 DUP3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2710 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x182B SWAP1 PUSH2 0x180B SWAP1 PUSH2 0xFCB DUP10 DUP8 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xFCB DUP5 PUSH2 0x181F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1879 PUSH1 0x1 PUSH2 0x186D DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18DF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x1 PUSH32 0x0 PUSH32 0x0 SUB ADD AND PUSH2 0xFCB DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x18EC DUP8 DUP3 DUP7 PUSH2 0x2450 JUMP JUMPDEST POP POP POP POP PUSH2 0x159E JUMP JUMPDEST PUSH1 0x2 DUP3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x190E DUP4 PUSH2 0x256F JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x195C PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x196D PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1993 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x19B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2E84 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x10FC JUMPI INVALID JUMPDEST DUP1 PUSH2 0x1A4F DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1A70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x0 ISZERO ISZERO EQ ISZERO PUSH2 0x1ACF JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1ACF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31C5 JUMP JUMPDEST PUSH2 0x1AEA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP7 PUSH4 0xFFFFFFFF PUSH2 0x26D4 AND JUMP JUMPDEST PUSH2 0x1AF2 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D62 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP2 PUSH2 0x1B6E PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x181F DUP5 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST GT ISZERO PUSH2 0x1B8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C16 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C82 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1C4B SWAP1 CALLER SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x1CB0 DUP3 PUSH2 0xFCB DUP12 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1CE1 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D3F SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x1F30 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP5 AND SWAP4 DUP5 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DEB SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1E57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1E20 SWAP1 CALLER SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x1E85 DUP3 PUSH2 0xFCB DUP10 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1EB6 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ED0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F14 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP POP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD2E JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1FB6 DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1FD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2029 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x203D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2061 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x2091 DUP3 PUSH2 0xFCB DUP10 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x20C2 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x211D SWAP2 POP DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x214A SWAP1 CALLER DUP10 PUSH4 0xFFFFFFFF PUSH2 0x272C AND JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2162 JUMPI POP PUSH1 0x0 PUSH2 0x2190 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x216F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x218D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x306D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x21B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2FE0 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x21C0 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x21D2 DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x21F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP4 PUSH2 0x2285 JUMPI PUSH2 0x2257 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH2 0x2267 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST LT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3262 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP5 AND SWAP4 DUP5 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x230E SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x233E DUP3 PUSH2 0xFCB DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x236F SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x239D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x23CA SWAP2 POP DUP12 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x23F7 SWAP1 CALLER DUP13 PUSH4 0xFFFFFFFF PUSH2 0x272C AND JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x218D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2ECA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x244A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F63 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x159E JUMPI PUSH1 0x0 PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x246C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 PUSH2 0x24A8 DUP6 PUSH2 0xFCB DUP5 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x24D4 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x2509 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP9 SWAP1 PUSH32 0x3173C1C4B679E2DA86DBB0382BDE749A6E16CD31912C5410E17985CD7D2B9052 SWAP1 PUSH2 0x255C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP8 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP PUSH1 0x1 ADD PUSH2 0x2453 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x0 PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x258B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 PUSH2 0x25ED DUP3 PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x2619 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x264E SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP7 SWAP1 PUSH32 0x89385E9D619600DA63726158403C0CFD9772B2CAC90D3E093387A5456EE1A247 SWAP1 PUSH2 0x26C1 SWAP1 DUP7 SWAP1 PUSH32 0x0 SWAP1 DUP8 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP PUSH1 0x1 ADD PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x159E DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x274B JUMP JUMPDEST PUSH2 0xD2E DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26F5 SWAP3 SWAP2 SWAP1 PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27A0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x27DA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD2E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x27BE SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST PUSH2 0xD2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27E9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x27F3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F9A JUMP JUMPDEST PUSH2 0x281E DUP6 PUSH2 0x28B4 JUMP JUMPDEST PUSH2 0x283A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2857 SWAP2 SWAP1 PUSH2 0x2C84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2894 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2899 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x28A9 DUP3 DUP3 DUP7 PUSH2 0x28BA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x28C9 JUMPI POP DUP2 PUSH2 0x27EC JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x28D9 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2190 DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x218D DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x292B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x218D DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2948 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2953 DUP2 PUSH2 0x339D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2973 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x298A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x299B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x29AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x29BE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29F5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2A06 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x2A1B PUSH2 0x2A16 DUP4 PUSH2 0x3351 JUMP JUMPDEST PUSH2 0x332A JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x2A37 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x2A61 JUMPI PUSH2 0x2A4D DUP10 DUP3 PUSH2 0x28F3 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x2A3B JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A7E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x218D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A9E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2AB5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2AC6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x2AD6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2AE9 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x332A JUMP JUMPDEST SWAP2 POP DUP3 DUP3 MSTORE DUP6 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x2AFF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2B10 DUP4 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x3371 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B2A JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B42 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B5B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2B6D DUP2 PUSH2 0x339D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x6 DUP2 LT PUSH2 0x2B6D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BB1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BD2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2BFF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 MLOAD SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP5 POP PUSH1 0x80 DUP10 ADD MLOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD MLOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2C47 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2C70 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3371 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x44534C412D53484F52542D PUSH1 0xA8 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CC6 DUP2 PUSH1 0xB DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0xB ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x44534C412D53502D PUSH1 0xC0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CF6 DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x8 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0x44534C412D4C4F4E472D PUSH1 0xB0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2D28 DUP2 PUSH1 0xA DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x44534C412D4C502D PUSH1 0xC0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CF6 DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x6 DUP4 LT PUSH2 0x2DCB JUMPI INVALID JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x2DDF JUMPI INVALID JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x27EC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2E1D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2C58 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2E2F DUP2 DUP6 PUSH2 0x2C58 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x2E4B PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x2C58 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2E5D DUP2 DUP8 PUSH2 0x2C58 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2E6F DUP2 DUP8 PUSH2 0x2C58 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x28A9 DUP2 DUP6 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420616C6C6F77656420627920534C415265676973747279000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1D1BDAD95B881B9BDD08185B1B1BDDD959 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x185B1C9958591E481859191959 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x1B9BDD08199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0xDAC2F040E8DED6CADC40D8CADCCEE8D PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x37B7363C9036B2B9B9B2B733B2B9 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x696E636F72726563742075736572207374616B65 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x616D6F756E742063616E74206265203 PUSH1 0x84 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E636F7272656374207769746864726177 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x32D1 JUMPI INVALID JUMPDEST DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3367 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x338C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3374 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x159E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 PUSH15 0x9511E61C712AD56A8BF108AFA926C5 0x21 DUP3 0xC4 JUMPI LT POP DUP13 0x26 PUSH19 0x9F472BB2B9AB64736F6C634300060600338BE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A2646970667358221220D35106EB9148AA3EF2 SGT DUP8 0x26 SWAP12 DUP9 DUP5 0x4B 0xCD GAS ISZERO PUSH9 0xB17632172B6C41CE6 0x28 SWAP5 SWAP6 PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ",
          "sourceMap": "484:8928:36:-:0;;;2276:553;5:9:-1;2:2;;;27:1;24;17:12;2:2;2276:553:36;;;;;;;;;;;;;;;;;;;;;2500:11;:26;;-1:-1:-1;;;;;;2500:26:36;-1:-1:-1;;;;;2500:26:36;;;;;;;;;;2536:28;;;-1:-1:-1;;;2536:28:36;;;;:11;;;;;:26;;:28;;;;;;;;;;;2500:11;2536;:28;;;2:2:-1;;;;27:1;24;17:12;2:2;2536:28:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;2574:14:36;:32;;-1:-1:-1;;;;;2574:32:36;;;-1:-1:-1;;;;;;2574:32:36;;;;;;;2616:13;:30;;;;;;;;;;;;;;;2656;;;-1:-1:-1;;;2656:30:36;;;;:13;;;;;-1:-1:-1;2656:28:36;;-1:-1:-1;2656:30:36;;;;;2574:14;;2656:30;;;;;;;2574:14;2656:13;:30;;;2:2:-1;;;;27:1;24;17:12;2:2;2656:30:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;2696:17:36;:38;;-1:-1:-1;;;;;;2696:38:36;-1:-1:-1;;;;;2696:38:36;;;;;;;;;;;2744:34;;;-1:-1:-1;;;2744:34:36;;;;:17;;;;;-1:-1:-1;2744:32:36;;-1:-1:-1;2744:34:36;;;;;-1:-1:-1;;2744:34:36;;;;;;;;-1:-1:-1;2744:17:36;:34;;;2:2:-1;;;;27:1;24;17:12;2:2;2744:34:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;;2788:34:36;;;;;;-1:-1:-1;484:8928:36;;-1:-1:-1;;;484:8928:36;890:989:-1;;;;;;1163:3;1151:9;1142:7;1138:23;1134:33;1131:2;;;-1:-1;;1170:12;1131:2;625:6;619:13;637:54;685:5;637:54;;;1354:2;1427:22;;434:13;1222:95;;-1:-1;452:56;434:13;452:56;;;1496:2;1572:22;;244:13;1362:97;;-1:-1;262:59;244:13;262:59;;;1641:2;1714:22;;804:13;1504:100;;-1:-1;822:56;804:13;822:56;;;1783:3;1831:22;;80:13;1649:97;;-1:-1;2050:13;;2043:21;2745:32;;2735:2;;-1:-1;;2781:12;2735:2;1792:71;;;;1125:754;;;;;;;;;2807:169;-1:-1;;;;;2623:54;;2892:61;;2882:2;;2967:1;;2957:12;2882:2;2876:100;;;484:8928:36;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {
            "9312": [
              {
                "length": 32,
                "start": 1082
              },
              {
                "length": 32,
                "start": 5251
              }
            ]
          },
          "linkReferences": {
            "@stacktical/dsla-protocol/contracts/StringUtils.sol": {
              "StringUtils": [
                {
                  "length": 20,
                  "start": 13486
                }
              ]
            }
          },
          "object": "60806040523480156200001157600080fd5b5060043610620000e25760003560e01c806368304835116200009957806396bddc10116200006f57806396bddc1014620001b85780639fc4caa514620001c2578063a9e43e7f14620001cc578063c4277a7b14620001e557620000e2565b8063683048351462000180578063788164b1146200018a5780638d2113ed14620001a157620000e2565b80630d0f4db714620000e75780632575d7ca146200010057806350c5abfe1462000117578063516c285714620001465780635a7d1e5d146200016c5780635c4df3321462000176575b600080fd5b620000fe620000f8366004620017b1565b620001fc565b005b620000fe6200011136600462001643565b620007d5565b6200012e6200012836600462001739565b62000c17565b6040516200013d919062001960565b60405180910390f35b6200015d6200015736600462001643565b62000c3f565b6040516200013d919062001ac3565b6200012e62000d93565b6200012e62000da2565b6200012e62000db1565b620000fe6200019b3660046200176b565b62000dc0565b620000fe620001b236600462001688565b6200134b565b6200015d6200140e565b6200012e62001472565b620001d662001481565b6040516200013d919062001b12565b620001d6620001f636600462001643565b620014a5565b600154604051636efe27ef60e11b81526000916001600160a01b03169063ddfc4fde9062000231908a908a9060040162001b32565b60206040518083038186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002859190620016dc565b905080620002b05760405162461bcd60e51b8152600401620002a79062001ba9565b60405180910390fd5b600154604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde90620002e4908a90899060040162001b32565b60206040518083038186803b158015620002fd57600080fd5b505afa15801562000312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003389190620016dc565b9050806200035a5760405162461bcd60e51b8152600401620002a79062001df3565b6001546040516347ef60ed60e11b81526000916001600160a01b031690638fdec1da906200038d908b9060040162001b1d565b60206040518083038186803b158015620003a657600080fd5b505afa158015620003bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e19190620016dc565b905080620004035760405162461bcd60e51b8152600401620002a79062001b72565b866001600160801b0316866001600160801b03161015620004385760405162461bcd60e51b8152600401620002a79062001d83565b7f0000000000000000000000000000000000000000000000000000000000000000156200050d57600154604051631e8760ef60e21b81526000916001600160a01b031690637a1d83bc9062000494908c908c9060040162001b32565b60206040518083038186803b158015620004ad57600080fd5b505afa158015620004c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004e89190620016dc565b905080156200050b5760405162461bcd60e51b8152600401620002a79062001cc4565b505b60025460405163ef4003db60e01b81526000916001600160a01b03169063ef4003db9062000540908d9060040162001960565b60206040518083038186803b1580156200055957600080fd5b505afa1580156200056e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005949190620016dc565b9050600181151514620005bb5760405162461bcd60e51b8152600401620002a79062001ce9565b6000338c8b8d8c8c6004805490508d8d8d604051620005da90620014f3565b620005ef9a99989796959493929190620019d7565b604051809103906000f0801580156200060c573d6000803e3d6000fd5b5090506000809054906101000a90046001600160a01b03166001600160a01b0316630c7ad72b8f8f846040518463ffffffff1660e01b8152600401620006559392919062001e85565b600060405180830381600087803b1580156200067057600080fd5b505af115801562000685573d6000803e3d6000fd5b5050600354604051633d7da60560e11b81526001600160a01b039091169250637afb4c0a9150620006c490339085908e8e0360010190600401620019ab565b600060405180830381600087803b158015620006df57600080fd5b505af1158015620006f4573d6000803e3d6000fd5b505060048054600180820183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b0319166001600160a01b0387169081179091556000908152600660205260408120805460ff19168317905591549193506200076a9250620014c3565b33600081815260056020908152604080832080546001810182559084529183209091018490555192935090916001600160a01b038516917fb52f284a6c14f1a66ab5513b5b539066933e58e69e6432666f0e3c8c8a7d750391a3505050505050505050505050505050565b620007e081620014a5565b620007ff5760405162461bcd60e51b8152600401620002a79062001c17565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200083957600080fd5b505afa1580156200084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000874919062001669565b6001600160a01b0316336001600160a01b031614620008a75760405162461bcd60e51b8152600401620002a79062001c6b565b6000816001600160a01b0316633385d3346040518163ffffffff1660e01b815260040160206040518083038186803b158015620008e357600080fd5b505afa158015620008f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200091e91906200171a565b6001600160801b031690506000826001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200096557600080fd5b505afa1580156200097a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a09190620016fb565b60015460405160016259edcb60e01b031981529192506000916001600160a01b039091169063ffa6123590620009dd908590879060040162001b59565b604080518083038186803b158015620009f557600080fd5b505afa15801562000a0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a309190620018ae565b9150506000846001600160a01b0316634190edde856040518263ffffffff1660e01b815260040162000a63919062001e55565b60606040518083038186803b15801562000a7c57600080fd5b505afa15801562000a91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab79190620018d2565b92505050846001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000af557600080fd5b505afa15801562000b0a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b309190620016dc565b8062000b55575081421015801562000b555750600081600281111562000b5257fe5b14155b62000b745760405162461bcd60e51b8152600401620002a79062001c3c565b60405133906001600160a01b038716907f892dba94a39dc15a34a9767dc9a0e553ace780857b076507becf599634bfbb6790600090a36003546040516312baebe560e11b81526001600160a01b0390911690632575d7ca9062000bdc90889060040162001960565b600060405180830381600087803b15801562000bf757600080fd5b505af115801562000c0c573d6000803e3d6000fd5b505050505050505050565b6004818154811062000c2557fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116600090815260056020526040902054606090818167ffffffffffffffff8111801562000c7457600080fd5b5060405190808252806020026020018201604052801562000c9f578160200160208202803683370190505b506001600160a01b0385166000908152600560209081526040918290208054835181840281018401909452808452939450606093909183018282801562000d0657602002820191906000526020600020905b81548152602001906001019080831162000cf1575b50939450600093505050505b8381101562000d8957600482828151811062000d2a57fe5b60200260200101518154811062000d3d57fe5b9060005260206000200160009054906101000a90046001600160a01b031683828151811062000d6857fe5b6001600160a01b039092166020928302919091019091015260010162000d12565b5090949350505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b62000dcb82620014a5565b62000dea5760405162461bcd60e51b8152600401620002a79062001c17565b816001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2457600080fd5b505afa15801562000e39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5f919062001752565b831462000e805760405162461bcd60e51b8152600401620002a79062001d4c565b6040516320c876ef60e11b81526000906001600160a01b03841690634190edde9062000eb190879060040162001e55565b60606040518083038186803b15801562000eca57600080fd5b505afa15801562000edf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f059190620018d2565b92506000915062000f139050565b81600281111562000f2057fe5b1462000f405760405162461bcd60e51b8152600401620002a79062001d20565b6000836001600160a01b0316637fd788aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f7c57600080fd5b505afa15801562000f91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fb79190620016dc565b9050801562000fda5760405162461bcd60e51b8152600401620002a79062001e2a565b60405163021eef7f60e01b81526000906001600160a01b0386169063021eef7f906200100b90899060040162001e55565b60206040518083038186803b1580156200102457600080fd5b505afa15801562001039573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200105f9190620016dc565b905080620010815760405162461bcd60e51b8152600401620002a79062001dc8565b6000856001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620010bd57600080fd5b505afa158015620010d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f89190620016fb565b6001546040516331edb3ad60e21b81529192506000916001600160a01b039091169063c7b6ceb490620011329085908c9060040162001b59565b60206040518083038186803b1580156200114b57600080fd5b505afa15801562001160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011869190620016dc565b905080620011a85760405162461bcd60e51b8152600401620002a79062001c99565b6000876001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e457600080fd5b505afa158015620011f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200121f919062001669565b9050336001600160a01b0316886001600160a01b03167fa204d52d2c80fbd794029bca489fb7b1c4dd5f7d5967806277f579cc683431468b60405162001266919062001e55565b60405180910390a3604051634bd410c960e11b81526001600160a01b038216906397a8219290620012a2908c908c908c90339060040162001e5e565b600060405180830381600087803b158015620012bd57600080fd5b505af1158015620012d2573d6000803e3d6000fd5b50506003546040516308bcf0cf60e21b81526001600160a01b0390911692506322f3c33c91506200130c908b9033908e9060040162001a9f565b600060405180830381600087803b1580156200132757600080fd5b505af11580156200133c573d6000803e3d6000fd5b50505050505050505050505050565b816001600160a01b031663f38815896040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138757600080fd5b505af11580156200139c573d6000803e3d6000fd5b505060025460405163eabb8a7360e01b81526001600160a01b03909116925063eabb8a739150620013d69033908690869060040162001974565b600060405180830381600087803b158015620013f157600080fd5b505af115801562001406573d6000803e3d6000fd5b505050505050565b606060048054806020026020016040519081016040528092919081815260200182805480156200146857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001449575b5050505050905090565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b031660009081526006602052604090205460ff1690565b600082821115620014e85760405162461bcd60e51b8152600401620002a79062001be0565b508082035b92915050565b6140598062001f3683390190565b8035620014ed8162001eec565b600082601f8301126200151f578081fd5b813567ffffffffffffffff81111562001536578182fd5b60208082026200154882820162001eb6565b838152935081840185830182870184018810156200156557600080fd5b600092505b848310156200158a5780358252600192909201919083019083016200156a565b505050505092915050565b8035620014ed8162001f02565b8035620014ed8162001f11565b600082601f830112620015c0578081fd5b813567ffffffffffffffff811115620015d7578182fd5b620015ec601f8201601f191660200162001eb6565b91508082528360208285010111156200160457600080fd5b8060208401602084013760009082016020015292915050565b8035620014ed8162001f1f565b803567ffffffffffffffff81168114620014ed57600080fd5b60006020828403121562001655578081fd5b8135620016628162001eec565b9392505050565b6000602082840312156200167b578081fd5b8151620016628162001eec565b600080604083850312156200169b578081fd5b8235620016a88162001eec565b9150602083013567ffffffffffffffff811115620016c4578182fd5b620016d285828601620015af565b9150509250929050565b600060208284031215620016ee578081fd5b8151620016628162001f02565b6000602082840312156200170d578081fd5b8151620016628162001f11565b6000602082840312156200172c578081fd5b8151620016628162001f1f565b6000602082840312156200174b578081fd5b5035919050565b60006020828403121562001764578081fd5b5051919050565b60008060006060848603121562001780578081fd5b833592506020840135620017948162001eec565b91506040840135620017a68162001f02565b809150509250925092565b6000806000806000806000806000806101408b8d031215620017d1578586fd5b8a359950620017e48c60208d01620015a2565b9850620017f58c60408d0162001595565b9750620018068c60608d0162001501565b9650620018178c60808d01620015a2565b9550620018288c60a08d016200161d565b9450620018398c60c08d016200161d565b935060e08b013567ffffffffffffffff8082111562001856578485fd5b620018648e838f01620015af565b94506101008d01359150808211156200187b578384fd5b506200188a8d828e016200150e565b9250506200189d8c6101208d016200162a565b90509295989b9194979a5092959850565b60008060408385031215620018c1578182fd5b505080516020909101519092909150565b600080600060608486031215620018e7578081fd5b8351925060208401519150604084015160038110620017a6578182fd5b60008151808452815b818110156200192b576020818501810151868301820152016200190d565b818111156200193d5782602083870101525b50601f01601f19169290920160200192915050565b67ffffffffffffffff169052565b6001600160a01b0391909116815260200190565b6001600160a01b03848116825283166020820152606060408201819052600090620019a29083018462001904565b95945050505050565b6001600160a01b0393841681529190921660208201526001600160801b03909116604082015260600190565b600061014060018060a01b03808e16845260208d151581860152620019fc8d62001ede565b8c6040860152818c1660608601526001600160801b039150818b166080860152818a1660a086015281891660c08601528260e086015262001a408386018962001904565b858103610100870152875180825290820193508188019250845b8181101562001a785783518552938201939282019260010162001a5a565b505050508091505062001a9061012083018462001952565b9b9a5050505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b8181101562001b065783516001600160a01b03168352928401929184019160010162001adf565b50909695505050505050565b901515815260200190565b6020810162001b2c8362001ede565b91905290565b6040810162001b418462001ede565b9281526001600160801b039190911660209091015290565b6040810162001b688462001ede565b9281526020015290565b6020808252601b908201527f706572696f642074797065206e6f7420696e697469616c697a65640000000000604082015260600190565b60208082526017908201527f666972737420706572696f6420696420696e76616c6964000000000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600b908201526a696e76616c696420534c4160a81b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526014908201527336b9b39739b2b73232b9103737ba1037bbb732b960611b604082015260600190565b6020808252601190820152701c195c9a5bd9081d5b999a5b9a5cda1959607a1b604082015260600190565b6020808252600b908201526a1c185cdd081c195c9a5bd960aa1b604082015260600190565b60208082526018908201527f6d657373656e676572206e6f7420726567697374657265640000000000000000604082015260600190565b602080825260129082015271696e76616c696420534c412073746174757360701b604082015260600190565b60208082526018908201527f6e6f74206e65787456657269666961626c65506572696f640000000000000000604082015260600190565b60208082526025908201527f696e76616c69642066696e616c506572696f6449642f696e697469616c5065726040820152641a5bd9125960da1b606082015260800190565b6020808252601190820152701a5b9d985b1a59081c195c9a5bd9081259607a1b604082015260600190565b60208082526017908201527f66696e616c20706572696f6420696420696e76616c6964000000000000000000604082015260600190565b602080825260119082015270189c995858da19590818dbdb9d1c9858dd607a1b604082015260600190565b90815260200190565b9384526001600160a01b039283166020850152901515604084015216606082015260800190565b8381526060810162001e978462001ede565b60208201939093526001600160a01b0391909116604090910152919050565b60405181810167ffffffffffffffff8111828210171562001ed657600080fd5b604052919050565b6006811062001ee957fe5b50565b6001600160a01b038116811462001ee957600080fd5b801515811462001ee957600080fd5b6006811062001ee957600080fd5b6001600160801b038116811462001ee957600080fdfe610240604052600d805460ff191690553480156200001c57600080fd5b5060405162004059380380620040598339810160408190526200003f91620008f3565b33888a86848e60006200005a6001600160e01b036200059616565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062004039833981519152908290a350856001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001089190620008cd565b600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b0316639fc4caa56040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016857600080fd5b505afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a39190620008cd565b60601b6001600160601b031916608052846005811115620001c057fe5b610100816005811115620001d057fe5b60f890811b909152851515901b610120525060015460408051637b8041cf60e11b8152905160009283926001600160a01b039091169163f700839e9160048082019261010092909190829003018186803b1580156200022e57600080fd5b505afa15801562000243573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002699190620009fa565b97505050505050509150600160009054906101000a90046001600160a01b03166001600160a01b0316638b8e53096040518163ffffffff1660e01b815260040160206040518083038186803b158015620002c257600080fd5b505afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd9190620008cd565b60601b6001600160601b03191660c05260e08290526001600160a01b03831660009081526009602052604090208054600160ff19909116179055608085901b6001600160801b03191660a0526001600160401b03818116908516118015906200037057506001846001600160401b031610155b620003985760405162461bcd60e51b81526004016200038f9062000aa9565b60405180910390fd5b50505060c01b6001600160c01b0319166101405250620003bd92508c9150506200059b565b8251620003d290600a90602086019062000675565b506001600160601b0319606088901b1661016052600b80546001600160a01b03191633179081905560408051639fc4caa560e01b815290516001600160a01b039290921691639fc4caa591600480820192602092909190829003018186803b1580156200043e57600080fd5b505afa15801562000453573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004799190620008cd565b60601b6001600160601b03191661018052600b5460408051635a7d1e5d60e01b815290516001600160a01b0390921691635a7d1e5d91600480820192602092909190829003018186803b158015620004d057600080fd5b505afa158015620004e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200050b9190620008cd565b60601b6001600160601b0319166101a052436101c052608086811b6001600160801b03199081166101e0529086901b16610200528760058111156200054c57fe5b6102208160058111156200055c57fe5b60f81b90525081516200057790600c906020850190620006fa565b5050506001600160801b03909316600e555062000b4a95505050505050565b335b90565b620005ae6001600160e01b036200059616565b6001600160a01b0316620005ca6001600160e01b036200066616565b6001600160a01b031614620005f35760405162461bcd60e51b81526004016200038f9062000ad5565b6001600160a01b0381166200061c5760405162461bcd60e51b81526004016200038f9062000a63565b600080546040516001600160a01b03808516939216916000805160206200403983398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006b857805160ff1916838001178555620006e8565b82800160010185558215620006e8579182015b82811115620006e8578251825591602001919060010190620006cb565b50620006f692915062000737565b5090565b828054828255906000526020600020908101928215620006e85791602002820182811115620006e8578251825591602001919060010190620006cb565b6200059891905b80821115620006f657600081556001016200073e565b8051620007618162000b31565b92915050565b600082601f83011262000778578081fd5b81516001600160401b038111156200078e578182fd5b6020808202620007a082820162000b0a565b83815293508184018583018287018401881015620007bd57600080fd5b600092505b84831015620007e2578051825260019290920191908301908301620007c2565b505050505092915050565b805180151581146200076157600080fd5b8051600681106200076157600080fd5b600082601f8301126200081f578081fd5b81516001600160401b0381111562000835578182fd5b60206200084b601f8301601f1916820162000b0a565b925081835284818386010111156200086257600080fd5b60005b828110156200088257848101820151848201830152810162000865565b82811115620008945760008284860101525b50505092915050565b80516001600160801b03811681146200076157600080fd5b80516001600160401b03811681146200076157600080fd5b600060208284031215620008df578081fd5b8151620008ec8162000b31565b9392505050565b6000806000806000806000806000806101408b8d03121562000913578586fd5b6200091f8c8c62000754565b9950620009308c60208d01620007ed565b9850620009418c60408d01620007fe565b9750620009528c60608d0162000754565b9650620009638c60808d016200089d565b9550620009748c60a08d016200089d565b9450620009858c60c08d016200089d565b60e08c01519094506001600160401b0380821115620009a2578485fd5b620009b08e838f016200080e565b94506101008d0151915080821115620009c7578384fd5b50620009d68d828e0162000767565b925050620009e98c6101208d01620008b5565b90509295989b9194979a5092959850565b600080600080600080600080610100898b03121562000a17578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915062000a548a60e08b01620008b5565b90509295985092959890939650565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b602080825260129082015271696e636f7272656374206c6576657261676560701b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040518181016001600160401b038111828210171562000b2957600080fd5b604052919050565b6001600160a01b038116811462000b4757600080fd5b50565b60805160601c60a05160801c60c05160601c60e0516101005160f81c6101205160f81c6101405160c01c6101605160601c6101805160601c6101a05160601c6101c0516101e05160801c6102005160801c6102205160f81c6133eb62000c4e60003980610da152806113095250806105345280610d59528061132a52806113d852806118ad5250806104fb5280610c485280611842528061188c525080610c245250806116b752806117565250806112da525080611447528061160a525080610d355280611b3e528061222c52806125c2528061269a525080610c005280611a74525050806110cd525080611a1652508061094a52806119325250506133eb6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806378025ec41161013b578063b7bc347e116100b8578063db69a4621161007c578063db69a462146104b9578063f2db10fe146104c1578063f2fde38b146104c9578063f7e9dfff146104dc578063fd5e6dd1146104e457610248565b8063b7bc347e14610463578063c623674f1461046b578063c8b5c24814610480578063cbe230c314610493578063d7a5c422146104a657610248565b80639b19251a116100ff5780639b19251a146104255780639fabeb0014610438578063a224ee9c14610440578063a7e8d8d414610448578063b1659bad1461045b57610248565b806378025ec4146103e75780637fd788aa146103fa5780638d21c770146104025780638da5cb5b1461041557806396f76f111461041d57610248565b806346e0fbae116101c95780635ae698ff1161018d5780635ae698ff1461039e5780635c1c20de146103b15780635e5f2e26146103b9578063639b6fc3146103cc578063715018a6146103df57610248565b806346e0fbae14610322578063484fbf2b146103375780634e0c91f61461034a5780634fb2647e1461036a57806357ac94f01461037d57610248565b80632526743a116102105780632526743a146102bb57806326db18ac146102d05780632c86d98e146102e35780633385d334146102f85780634190edde1461030057610248565b8063021eef7f1461024d5780630bea440d14610276578063171e44ea1461028b57806318e454271461029e5780631bf30929146102a6575b600080fd5b61026061025b366004612b19565b6104f7565b60405161026d9190612da9565b60405180910390f35b610289610284366004612b49565b610574565b005b6102896102993660046128fe565b610726565b610260610bfe565b6102ae610c22565b60405161026d9190612db4565b6102c3610c46565b60405161026d919061328e565b6102896102de366004612b49565b610c6a565b6102eb610d33565b60405161026d9190613315565b6102c3610d57565b61031361030e366004612b19565b610d7b565b60405161026d939291906132b9565b61032a610d9f565b60405161026d9190612dbd565b6102ae6103453660046128fe565b610dc3565b61035d6103583660046128fe565b610dd5565b60405161026d9190612d58565b61035d6103783660046128fe565b610df0565b61039061038b366004612936565b610e0b565b60405161026d929190612d6c565b6102896103ac3660046129cd565b610fe7565b6102ae6110cb565b61035d6103c7366004612b19565b6110ef565b6102ae6103da3660046128fe565b611116565b610289611128565b6102ae6103f5366004612b19565b6111b1565b6102606111cf565b610289610410366004612961565b6111d8565b61035d6112c6565b6102606112d5565b6102606104333660046128fe565b61142a565b6102ae61143f565b61035d611445565b6102606104563660046128fe565b611469565b6102ae61147e565b6102ae611484565b61047361148a565b60405161026d9190612df7565b61028961048e366004612b49565b611518565b6102606104a13660046128fe565b6115a4565b6102896104b4366004612b9f565b6115ff565b61035d611921565b6102c3611930565b6102896104d73660046128fe565b611954565b61035d611a14565b61035d6104f2366004612b19565b611a38565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168210156105325750600061056f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b031682111561056b5750600061056f565b5060015b919050565b816000811161059e5760405162461bcd60e51b8152600401610595906131ee565b60405180910390fd5b60006105a86112d5565b905080156105c85760405162461bcd60e51b815260040161059590613135565b6105d28484611a45565b336001600160a01b0316600e54846001600160a01b03167f1bd1eb6b4fd3f08e718d7a241c54c4641c9f36004b6949383f48d15a2fcc8f52876040516106189190612db4565b60405180910390a4600b5460408051636830483560e01b815290516000926001600160a01b0316916368304835916004808301926020929190829003018186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d919061291a565b604051635948284760e11b81529091506001600160a01b0382169063b290508e906106cc903390600401612d58565b602060405180830381600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190612a6d565b505050505050565b61072e611fa8565b6001600160a01b031661073f6112c6565b6001600160a01b0316146107655760405162461bcd60e51b8152600401610595906130ae565b60015460408051637b8041cf60e11b815290516000926001600160a01b03169163f700839e91600480830192610100929190829003018186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612be3565b5096505050505050506107f5826115a4565b156108125760405162461bcd60e51b815260040161059590613017565b60015460405163cbe230c360e01b81526001600160a01b039091169063cbe230c390610842908590600401612d58565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612a6d565b6108ae5760405162461bcd60e51b815260040161059590612f01565b6008805460018101825560008290527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038516179055548110156109185760405162461bcd60e51b8152600401610595906130e3565b60405163fc966d4560e01b815260609073__$89e48f3f2b1d5dfed70cd34b0db16ca79e$__9063fc966d4590610972907f00000000000000000000000000000000000000000000000000000000000000009060040161328e565b60006040518083038186803b15801561098a57600080fd5b505af415801561099e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c69190810190612a8d565b90506060816040516020016109db9190612ca0565b60405160208183030381529060405290506060826040516020016109ff9190612cd3565b6040516020818303038152906040529050606083604051602001610a239190612d03565b6040516020818303038152906040529050606084604051602001610a479190612d35565b60408051601f1981840301815290829052600154633350214760e11b83529092506000916001600160a01b03909116906366a0428e90610a8d9088908890600401612e0a565b602060405180830381600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf919061291a565b600154604051633350214760e11b81529192506000916001600160a01b03909116906366a0428e90610b179087908790600401612e0a565b602060405180830381600087803b158015610b3157600080fd5b505af1158015610b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b69919061291a565b6001600160a01b03808b16600081815260056020908152604080832080548688166001600160a01b0319918216811790925560049093529281902080549589169590921685179091555193945091927fce8c390dc55dbcd418078f1391fbb7d471c01c228fc4464926095354cb27c02990610beb90899081908d908190612e38565b60405180910390a4505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b8160008111610c8b5760405162461bcd60e51b8152600401610595906131ee565b610c936112c6565b6001600160a01b0316336001600160a01b031614610cd6576000610cb56112d5565b905080610cd45760405162461bcd60e51b81526004016105959061303e565b505b336001600160a01b0316600e54836001600160a01b03167f5d73c1b3aab5bae46e08e09668d192166389623bef76bbe8cdae8df8ad320fce86604051610d1c9190612db4565b60405180910390a4610d2e8383611fac565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f6020526000908152604090208054600182015460029092015490919060ff1683565b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020526000908152604090205481565b6004602052600090815260409020546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b600080600060088481548110610e1d57fe5b6000918252602090912001546001600160a01b03169050610e3c6112c6565b6001600160a01b0316856001600160a01b03161415610e78576001600160a01b0381166000908152600260205260409020549092509050610fe0565b6001600160a01b0380821660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190612b31565b905080610f18575090925060009150610fe09050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610f47908b90600401612d58565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612b31565b6001600160a01b0385166000908152600360205260409020549091508490610fd7908490610fcb908563ffffffff61215316565b9063ffffffff61219616565b95509550505050505b9250929050565b610fef611fa8565b6001600160a01b03166110006112c6565b6001600160a01b0316146110265760405162461bcd60e51b8152600401610595906130ae565b60005b81518110156110c7576009600083838151811061104257fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166110bf5760016009600084848151811061107f57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101611029565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600881815481106110fc57fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205481565b611130611fa8565b6001600160a01b03166111416112c6565b6001600160a01b0316146111675760405162461bcd60e51b8152600401610595906130ae565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600c81815481106111be57fe5b600091825260209091200154905081565b600d5460ff1690565b6111e0611fa8565b6001600160a01b03166111f16112c6565b6001600160a01b0316146112175760405162461bcd60e51b8152600401610595906130ae565b60005b81811015610d2e576009600084848481811061123257fe5b905060200201602081019061124791906128fe565b6001600160a01b0316815260208101919091526040016000205460ff161515600114156112be5760006009600085858581811061128057fe5b905060200201602081019061129591906128fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b60010161121a565b6000546001600160a01b031690565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffa612357f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611366929190612dd1565b604080518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190612bc0565b600d5490925060ff161515600114905080611424575080421015801561142457507f00000000000000000000000000000000000000000000000000000000000000006001600160801b03166000908152600f6020526040812060029081015460ff169081111561142157fe5b14155b91505090565b60096020526000908152604090205460ff1681565b60065490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020526000908152604090205460ff1681565b600e5481565b60085490565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b505050505081565b81600081116115395760405162461bcd60e51b8152600401610595906131ee565b60006115436112d5565b9050336001600160a01b0316600e54846001600160a01b03167fbd9be3d6449ecbdf4b3b9980b1631ec06c13d8cf9e09e2433075f123b348e3ba8760405161158b9190612db4565b60405180910390a461159e8484836121c8565b50505050565b6000805b6008548110156115f657826001600160a01b0316600882815481106115c957fe5b6000918252602090912001546001600160a01b031614156115ee57600191505061056f565b6001016115a8565b50600092915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116475760405162461bcd60e51b81526004016105959061310d565b7fc95987c1992805ee34bdc915e017cceae36ba1c156b9911fa7e691e6435eb46e42838360405161167a939291906132df565b60405180910390a16001808201600e556000828152600f60205260408082209283018590554283555163a7b72ac560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7b72ac5906116ec903090600401612d58565b604080518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190612b78565b50604051631993b9df60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631993b9df9061178d90879030906004016132a2565b60206040518083038186803b1580156117a557600080fd5b505afa1580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190612a6d565b156118f5576002828101805460ff191660011790556127109060009061182b9061180b90610fcb8987612403565b610fcb8461181f8a8863ffffffff61242816565b9063ffffffff61215316565b90506000611879600161186d886001600160801b037f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61242816565b9063ffffffff61240316565b905060006118df6001600160801b0360017f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000030116610fcb858563ffffffff61215316565b90506118ec878286612450565b5050505061159e565b6002828101805460ff1916909117905561190e8361256f565b600d805460ff1916600117905550505050565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b61195c611fa8565b6001600160a01b031661196d6112c6565b6001600160a01b0316146119935760405162461bcd60e51b8152600401610595906130ae565b6001600160a01b0381166119b95760405162461bcd60e51b815260040161059590612e84565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681815481106110fc57fe5b80611a4f816115a4565b1515600114611a705760405162461bcd60e51b815260040161059590612f38565b60017f000000000000000000000000000000000000000000000000000000000000000015151415611acf573360009081526009602052604090205460ff161515600114611acf5760405162461bcd60e51b8152600401610595906131c5565b611aea6001600160a01b03831633308663ffffffff6126d416565b611af26112c6565b6001600160a01b0316336001600160a01b031614611d62576001600160a01b03821660009081526002602090815260408083205460039092529091205481611b6e67ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661181f848963ffffffff61240316565b1115611b8c5760405162461bcd60e51b815260040161059590613197565b6001600160a01b0380851660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b158015611bde57600080fd5b505afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612b31565b905080611c82576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611c4b9033908b90600401612d6c565b600060405180830381600087803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611d16565b6001600160a01b03861660009081526003602052604081205490611cb082610fcb8b8663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611ce19033908590600401612d6c565b600060405180830381600087803b158015611cfb57600080fd5b505af1158015611d0f573d6000803e3d6000fd5b5050505050505b6001600160a01b038616600090815260036020526040902054611d3f908863ffffffff61240316565b6001600160a01b03871660009081526003602052604090205550611f3092505050565b6001600160a01b0380831660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b158015611db357600080fd5b505afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb9190612b31565b905080611e57576040516340c10f1960e01b81526001600160a01b038316906340c10f1990611e209033908990600401612d6c565b600060405180830381600087803b158015611e3a57600080fd5b505af1158015611e4e573d6000803e3d6000fd5b50505050611eeb565b6001600160a01b03841660009081526002602052604081205490611e8582610fcb898663ffffffff61215316565b6040516340c10f1960e01b81529091506001600160a01b038516906340c10f1990611eb69033908590600401612d6c565b600060405180830381600087803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b5050505050505b6001600160a01b038416600090815260026020526040902054611f14908663ffffffff61240316565b6001600160a01b03851660009081526002602052604090205550505b3360009081526007602052604090205460ff16610d2e57336000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055505050565b3390565b80611fb6816115a4565b1515600114611fd75760405162461bcd60e51b815260040161059590612f38565b6001600160a01b0380831660009081526004602081815260408084205481516318160ddd60e01b8152915195169485936318160ddd938382019390929190829003018186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612b31565b6001600160a01b03851660009081526003602052604081205491925061209182610fcb898663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc6790906120c29033908590600401612d6c565b600060405180830381600087803b1580156120dc57600080fd5b505af11580156120f0573d6000803e3d6000fd5b5050506001600160a01b03871660009081526003602052604090205461211d91508863ffffffff61242816565b6001600160a01b03871660008181526003602052604090209190915561214a90338963ffffffff61272c16565b50505050505050565b60008261216257506000612190565b8282028284828161216f57fe5b041461218d5760405162461bcd60e51b81526004016105959061306d565b90505b92915050565b60008082116121b75760405162461bcd60e51b815260040161059590612fe0565b8183816121c057fe5b049392505050565b816121d2816115a4565b15156001146121f35760405162461bcd60e51b815260040161059590612f38565b6001600160a01b03831660009081526002602090815260408083205460039092529091205483612285576122578167ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b612267838863ffffffff61242816565b10156122855760405162461bcd60e51b815260040161059590613262565b6001600160a01b0380861660009081526005602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b1580156122d657600080fd5b505afa1580156122ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230e9190612b31565b6001600160a01b03881660009081526002602052604081205491925061233e82610fcb8c8663ffffffff61215316565b60405163079cc67960e41b81529091506001600160a01b038516906379cc67909061236f9033908590600401612d6c565b600060405180830381600087803b15801561238957600080fd5b505af115801561239d573d6000803e3d6000fd5b5050506001600160a01b038a166000908152600260205260409020546123ca91508b63ffffffff61242816565b6001600160a01b038a166000818152600260205260409020919091556123f790338c63ffffffff61272c16565b50505050505050505050565b60008282018381101561218d5760405162461bcd60e51b815260040161059590612eca565b60008282111561244a5760405162461bcd60e51b815260040161059590612f63565b50900390565b60005b60085481101561159e5760006008828154811061246c57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906124a885610fcb848963ffffffff61215316565b6001600160a01b0384166000908152600360205260409020549091506124d4908263ffffffff61242816565b6001600160a01b038416600090815260036020908152604080832093909355600290522054612509908263ffffffff61240316565b6001600160a01b0384166000818152600260205260409081902092909255905188907f3173c1c4b679e2da86dbb0382bde749a6e16cd31912c5410e17985cd7d2b90529061255c908a908a9087906132df565b60405180910390a3505050600101612453565b60005b6008548110156110c75760006008828154811061258b57fe5b60009182526020808320909101546001600160a01b031680835260039091526040822054909250906125ed8267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff61215316565b6001600160a01b038416600090815260026020526040902054909150612619908263ffffffff61242816565b6001600160a01b03841660009081526002602090815260408083209390935560039052205461264e908263ffffffff61240316565b6001600160a01b0384166000818152600360205260409081902092909255905186907f89385e9d619600da63726158403c0cfd9772b2cac90d3e093387a5456ee1a247906126c19086907f00000000000000000000000000000000000000000000000000000000000000009087906132f5565b60405180910390a3505050600101612572565b61159e846323b872dd60e01b8585856040516024016126f593929190612d85565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261274b565b610d2e8363a9059cbb60e01b84846040516024016126f5929190612d6c565b60606127a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127da9092919063ffffffff16565b805190915015610d2e57808060200190518101906127be9190612a6d565b610d2e5760405162461bcd60e51b815260040161059590613218565b60606127e984846000856127f3565b90505b9392505050565b6060824710156128155760405162461bcd60e51b815260040161059590612f9a565b61281e856128b4565b61283a5760405162461bcd60e51b815260040161059590613160565b60006060866001600160a01b031685876040516128579190612c84565b60006040518083038185875af1925050503d8060008114612894576040519150601f19603f3d011682016040523d82523d6000602084013e612899565b606091505b50915091506128a98282866128ba565b979650505050505050565b3b151590565b606083156128c95750816127ec565b8251156128d95782518084602001fd5b8160405162461bcd60e51b81526004016105959190612df7565b80356121908161339d565b60006020828403121561290f578081fd5b813561218d8161339d565b60006020828403121561292b578081fd5b815161218d8161339d565b60008060408385031215612948578081fd5b82356129538161339d565b946020939093013593505050565b60008060208385031215612973578182fd5b823567ffffffffffffffff8082111561298a578384fd5b81850186601f82011261299b578485fd5b80359250818311156129ab578485fd5b86602080850283010111156129be578485fd5b60200196919550909350505050565b600060208083850312156129df578182fd5b823567ffffffffffffffff8111156129f5578283fd5b80840185601f820112612a06578384fd5b80359150612a1b612a1683613351565b61332a565b8281528381019082850185850284018601891015612a37578687fd5b8693505b84841015612a6157612a4d89826128f3565b835260019390930192918501918501612a3b565b50979650505050505050565b600060208284031215612a7e578081fd5b8151801515811461218d578182fd5b600060208284031215612a9e578081fd5b815167ffffffffffffffff80821115612ab5578283fd5b81840185601f820112612ac6578384fd5b8051925081831115612ad6578384fd5b612ae9601f8401601f191660200161332a565b9150828252856020848301011115612aff578384fd5b612b10836020840160208401613371565b50949350505050565b600060208284031215612b2a578081fd5b5035919050565b600060208284031215612b42578081fd5b5051919050565b60008060408385031215612b5b578182fd5b823591506020830135612b6d8161339d565b809150509250929050565b60008060408385031215612b8a578182fd5b82519150602083015160068110612b6d578182fd5b60008060408385031215612bb1578182fd5b50508035926020909101359150565b60008060408385031215612bd2578182fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215612bff578384fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015167ffffffffffffffff81168114612c47578182fd5b809150509295985092959890939650565b60008151808452612c70816020860160208601613371565b601f01601f19169290920160200192915050565b60008251612c96818460208701613371565b9190910192915050565b60006a44534c412d53484f52542d60a81b82528251612cc681600b850160208701613371565b91909101600b0192915050565b60006744534c412d53502d60c01b82528251612cf6816008850160208701613371565b9190910160080192915050565b60006944534c412d4c4f4e472d60b01b82528251612d2881600a850160208701613371565b91909101600a0192915050565b60006744534c412d4c502d60c01b82528251612cf6816008850160208701613371565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b6020810160068310612dcb57fe5b91905290565b6040810160068410612ddf57fe5b9281526001600160801b039190911660209091015290565b6000602082526127ec6020830184612c58565b600060408252612e1d6040830185612c58565b8281036020840152612e2f8185612c58565b95945050505050565b600060808252612e4b6080830187612c58565b8281036020840152612e5d8187612c58565b8381036040850152612e6f8187612c58565b91505082810360608401526128a98185612c58565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601a908201527f6e6f7420616c6c6f77656420627920534c415265676973747279000000000000604082015260600190565b6020808252601190820152701d1bdad95b881b9bdd08185b1b1bddd959607a1b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600d908201526c185b1c9958591e481859191959609a1b604082015260600190565b6020808252601590820152741b9bdd08199a5b9a5cda19590818dbdb9d1c9858dd605a1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f0dac2f040e8ded6cadc40d8cadccee8d60831b604082015260600190565b6020808252600e908201526d37b7363c9036b2b9b9b2b733b2b960911b604082015260600190565b602080825260119082015270199a5b9a5cda19590818dbdb9d1c9858dd607a1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260149082015273696e636f72726563742075736572207374616b6560601b604082015260600190565b6020808252600f908201526e1b9bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526010908201526f0616d6f756e742063616e7420626520360841b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260129082015271696e636f727265637420776974686472617760701b604082015260600190565b6001600160801b0391909116815260200190565b9182526001600160a01b0316602082015260400190565b8381526020810183905260608101600383106132d157fe5b826040830152949350505050565b9283526020830191909152604082015260600190565b92835267ffffffffffffffff919091166020830152604082015260600190565b67ffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561334957600080fd5b604052919050565b600067ffffffffffffffff821115613367578081fd5b5060209081020190565b60005b8381101561338c578181015183820152602001613374565b8381111561159e5750506000910152565b6001600160a01b03811681146133b257600080fd5b5056fea2646970667358221220b86e9511e61c712ad56a8bf108afa926c52182c45710508c26729f472bb2b9ab64736f6c634300060600338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220d35106eb9148aa3ef21387269b88844bcd5a15680b17632172b6c41ce628949564736f6c63430006060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0xE2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x68304835 GT PUSH3 0x99 JUMPI DUP1 PUSH4 0x96BDDC10 GT PUSH3 0x6F JUMPI DUP1 PUSH4 0x96BDDC10 EQ PUSH3 0x1B8 JUMPI DUP1 PUSH4 0x9FC4CAA5 EQ PUSH3 0x1C2 JUMPI DUP1 PUSH4 0xA9E43E7F EQ PUSH3 0x1CC JUMPI DUP1 PUSH4 0xC4277A7B EQ PUSH3 0x1E5 JUMPI PUSH3 0xE2 JUMP JUMPDEST DUP1 PUSH4 0x68304835 EQ PUSH3 0x180 JUMPI DUP1 PUSH4 0x788164B1 EQ PUSH3 0x18A JUMPI DUP1 PUSH4 0x8D2113ED EQ PUSH3 0x1A1 JUMPI PUSH3 0xE2 JUMP JUMPDEST DUP1 PUSH4 0xD0F4DB7 EQ PUSH3 0xE7 JUMPI DUP1 PUSH4 0x2575D7CA EQ PUSH3 0x100 JUMPI DUP1 PUSH4 0x50C5ABFE EQ PUSH3 0x117 JUMPI DUP1 PUSH4 0x516C2857 EQ PUSH3 0x146 JUMPI DUP1 PUSH4 0x5A7D1E5D EQ PUSH3 0x16C JUMPI DUP1 PUSH4 0x5C4DF332 EQ PUSH3 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFE PUSH3 0xF8 CALLDATASIZE PUSH1 0x4 PUSH3 0x17B1 JUMP JUMPDEST PUSH3 0x1FC JUMP JUMPDEST STOP JUMPDEST PUSH3 0xFE PUSH3 0x111 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0x7D5 JUMP JUMPDEST PUSH3 0x12E PUSH3 0x128 CALLDATASIZE PUSH1 0x4 PUSH3 0x1739 JUMP JUMPDEST PUSH3 0xC17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x15D PUSH3 0x157 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1AC3 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xD93 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xDA2 JUMP JUMPDEST PUSH3 0x12E PUSH3 0xDB1 JUMP JUMPDEST PUSH3 0xFE PUSH3 0x19B CALLDATASIZE PUSH1 0x4 PUSH3 0x176B JUMP JUMPDEST PUSH3 0xDC0 JUMP JUMPDEST PUSH3 0xFE PUSH3 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH3 0x1688 JUMP JUMPDEST PUSH3 0x134B JUMP JUMPDEST PUSH3 0x15D PUSH3 0x140E JUMP JUMPDEST PUSH3 0x12E PUSH3 0x1472 JUMP JUMPDEST PUSH3 0x1D6 PUSH3 0x1481 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x13D SWAP2 SWAP1 PUSH3 0x1B12 JUMP JUMPDEST PUSH3 0x1D6 PUSH3 0x1F6 CALLDATASIZE PUSH1 0x4 PUSH3 0x1643 JUMP JUMPDEST PUSH3 0x14A5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EFE27EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDDFC4FDE SWAP1 PUSH3 0x231 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x25F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x285 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x2B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1BA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EFE27EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDDFC4FDE SWAP1 PUSH3 0x2E4 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x312 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x338 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1DF3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x47EF60ED PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8FDEC1DA SWAP1 PUSH3 0x38D SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B1D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x3BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3E1 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x403 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1B72 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT ISZERO PUSH3 0x438 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D83 JUMP JUMPDEST PUSH32 0x0 ISZERO PUSH3 0x50D JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1E8760EF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x7A1D83BC SWAP1 PUSH3 0x494 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B32 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4E8 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0x50B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1CC4 JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xEF4003DB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF4003DB SWAP1 PUSH3 0x540 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x56E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x594 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 ISZERO ISZERO EQ PUSH3 0x5BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1CE9 JUMP JUMPDEST PUSH1 0x0 CALLER DUP13 DUP12 DUP14 DUP13 DUP13 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH3 0x5DA SWAP1 PUSH3 0x14F3 JUMP JUMPDEST PUSH3 0x5EF SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x19D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x60C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC7AD72B DUP16 DUP16 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x655 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1E85 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x685 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3D7DA605 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x7AFB4C0A SWAP2 POP PUSH3 0x6C4 SWAP1 CALLER SWAP1 DUP6 SWAP1 DUP15 DUP15 SUB PUSH1 0x1 ADD SWAP1 PUSH1 0x4 ADD PUSH3 0x19AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x6DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x6F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 SWAP4 POP PUSH3 0x76A SWAP3 POP PUSH3 0x14C3 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP5 SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 PUSH32 0xB52F284A6C14F1A66AB5513B5B539066933E58E69E6432666F0E3C8C8A7D7503 SWAP2 LOG3 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7E0 DUP2 PUSH3 0x14A5 JUMP JUMPDEST PUSH3 0x7FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DA5CB5B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x84E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x874 SWAP2 SWAP1 PUSH3 0x1669 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x8A7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C6B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3385D334 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x8E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x8F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x91E SWAP2 SWAP1 PUSH3 0x171A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x46E0FBAE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x97A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x9A0 SWAP2 SWAP1 PUSH3 0x16FB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x59EDCB PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xFFA61235 SWAP1 PUSH3 0x9DD SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x9F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA30 SWAP2 SWAP1 PUSH3 0x18AE JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4190EDDE DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA63 SWAP2 SWAP1 PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAB7 SWAP2 SWAP1 PUSH3 0x18D2 JUMP JUMPDEST SWAP3 POP POP POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7FD788AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xAF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xB0A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xB30 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST DUP1 PUSH3 0xB55 JUMPI POP DUP2 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH3 0xB55 JUMPI POP PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0xB52 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH3 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C3C JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0x892DBA94A39DC15A34A9767DC9A0E553ACE780857B076507BECF599634BFBB67 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x12BAEBE5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2575D7CA SWAP1 PUSH3 0xBDC SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x1960 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xBF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xC0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0xC25 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 DUP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH3 0xC74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0xC9F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP5 POP PUSH1 0x60 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 0xD06 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0xCF1 JUMPI JUMPDEST POP SWAP4 SWAP5 POP PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD89 JUMPI PUSH1 0x4 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xD2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH3 0xD3D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xD68 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH3 0xD12 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0xDCB DUP3 PUSH3 0x14A5 JUMP JUMPDEST PUSH3 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C17 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB1659BAD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE5F SWAP2 SWAP1 PUSH3 0x1752 JUMP JUMPDEST DUP4 EQ PUSH3 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x20C876EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x4190EDDE SWAP1 PUSH3 0xEB1 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xEDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xF05 SWAP2 SWAP1 PUSH3 0x18D2 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH3 0xF13 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0xF20 JUMPI INVALID JUMPDEST EQ PUSH3 0xF40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1D20 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7FD788AA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xF91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xFB7 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0xFDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1E2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x21EEF7F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x21EEF7F SWAP1 PUSH3 0x100B SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1039 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x105F SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x1081 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1DC8 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x46E0FBAE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x10BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x10D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x10F8 SWAP2 SWAP1 PUSH3 0x16FB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31EDB3AD PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC7B6CEB4 SWAP1 PUSH3 0x1132 SWAP1 DUP6 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH3 0x1B59 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x114B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1160 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1186 SWAP2 SWAP1 PUSH3 0x16DC JUMP JUMPDEST SWAP1 POP DUP1 PUSH3 0x11A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1C99 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA224EE9C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x11E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x11F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x121F SWAP2 SWAP1 PUSH3 0x1669 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xA204D52D2C80FBD794029BCA489FB7B1C4DD5F7D5967806277F579CC68343146 DUP12 PUSH1 0x40 MLOAD PUSH3 0x1266 SWAP2 SWAP1 PUSH3 0x1E55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH4 0x4BD410C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x97A82192 SWAP1 PUSH3 0x12A2 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH3 0x1E5E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x12BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8BCF0CF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x22F3C33C SWAP2 POP PUSH3 0x130C SWAP1 DUP12 SWAP1 CALLER SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH3 0x1A9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x133C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF3881589 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x139C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xEABB8A73 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0xEABB8A73 SWAP2 POP PUSH3 0x13D6 SWAP1 CALLER SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH3 0x1974 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x13F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1406 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x1468 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x1449 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH3 0x14E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x2A7 SWAP1 PUSH3 0x1BE0 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4059 DUP1 PUSH3 0x1F36 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1EEC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x151F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1536 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH3 0x1548 DUP3 DUP3 ADD PUSH3 0x1EB6 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH3 0x1565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0x158A JUMPI DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH3 0x156A JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x15C0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x15D7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x15EC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0x1EB6 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x14ED DUP2 PUSH3 0x1F1F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1655 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1662 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x167B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1EEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x169B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH3 0x16A8 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x16C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x16D2 DUP6 DUP3 DUP7 ADD PUSH3 0x15AF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x16EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F02 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x170D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F11 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x172C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1662 DUP2 PUSH3 0x1F1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x174B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1764 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1780 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH3 0x1794 DUP2 PUSH3 0x1EEC JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH3 0x17A6 DUP2 PUSH3 0x1F02 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x17D1 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP11 CALLDATALOAD SWAP10 POP PUSH3 0x17E4 DUP13 PUSH1 0x20 DUP14 ADD PUSH3 0x15A2 JUMP JUMPDEST SWAP9 POP PUSH3 0x17F5 DUP13 PUSH1 0x40 DUP14 ADD PUSH3 0x1595 JUMP JUMPDEST SWAP8 POP PUSH3 0x1806 DUP13 PUSH1 0x60 DUP14 ADD PUSH3 0x1501 JUMP JUMPDEST SWAP7 POP PUSH3 0x1817 DUP13 PUSH1 0x80 DUP14 ADD PUSH3 0x15A2 JUMP JUMPDEST SWAP6 POP PUSH3 0x1828 DUP13 PUSH1 0xA0 DUP14 ADD PUSH3 0x161D JUMP JUMPDEST SWAP5 POP PUSH3 0x1839 DUP13 PUSH1 0xC0 DUP14 ADD PUSH3 0x161D JUMP JUMPDEST SWAP4 POP PUSH1 0xE0 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1856 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x1864 DUP15 DUP4 DUP16 ADD PUSH3 0x15AF JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x187B JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x188A DUP14 DUP3 DUP15 ADD PUSH3 0x150E JUMP JUMPDEST SWAP3 POP POP PUSH3 0x189D DUP13 PUSH2 0x120 DUP14 ADD PUSH3 0x162A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x18C1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x18E7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x3 DUP2 LT PUSH3 0x17A6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x192B JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x190D JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x193D JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND DUP3 MSTORE DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x19A2 SWAP1 DUP4 ADD DUP5 PUSH3 0x1904 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP15 AND DUP5 MSTORE PUSH1 0x20 DUP14 ISZERO ISZERO DUP2 DUP7 ADD MSTORE PUSH3 0x19FC DUP14 PUSH3 0x1EDE JUMP JUMPDEST DUP13 PUSH1 0x40 DUP7 ADD MSTORE DUP2 DUP13 AND PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 POP DUP2 DUP12 AND PUSH1 0x80 DUP7 ADD MSTORE DUP2 DUP11 AND PUSH1 0xA0 DUP7 ADD MSTORE DUP2 DUP10 AND PUSH1 0xC0 DUP7 ADD MSTORE DUP3 PUSH1 0xE0 DUP7 ADD MSTORE PUSH3 0x1A40 DUP4 DUP7 ADD DUP10 PUSH3 0x1904 JUMP JUMPDEST DUP6 DUP2 SUB PUSH2 0x100 DUP8 ADD MSTORE DUP8 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP4 POP DUP2 DUP9 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1A78 JUMPI DUP4 MLOAD DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP3 DUP3 ADD SWAP3 PUSH1 0x1 ADD PUSH3 0x1A5A JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH3 0x1A90 PUSH2 0x120 DUP4 ADD DUP5 PUSH3 0x1952 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1B06 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x1ADF JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH3 0x1B2C DUP4 PUSH3 0x1EDE JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x1B41 DUP5 PUSH3 0x1EDE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH3 0x1B68 DUP5 PUSH3 0x1EDE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x706572696F642074797065206E6F7420696E697469616C697A65640000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x666972737420706572696F6420696420696E76616C6964000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x696E76616C696420534C41 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x1B9BDD08199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x36B9B39739B2B73232B9103737BA1037BBB732B9 PUSH1 0x61 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1C195C9A5BD9081D5B999A5B9A5CDA1959 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x1C185CDD081C195C9A5BD9 PUSH1 0xAA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x6D657373656E676572206E6F7420726567697374657265640000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E76616C696420534C4120737461747573 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F74206E65787456657269666961626C65506572696F640000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x696E76616C69642066696E616C506572696F6449642F696E697469616C506572 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x1A5BD91259 PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1A5B9D985B1A59081C195C9A5BD9081259 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x66696E616C20706572696F6420696420696E76616C6964000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x189C995858DA19590818DBDB9D1C9858DD PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 DUP2 ADD PUSH3 0x1E97 DUP5 PUSH3 0x1EDE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x1ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 DUP2 LT PUSH3 0x1EE9 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP2 LT PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1EE9 JUMPI PUSH1 0x0 DUP1 REVERT INVALID PUSH2 0x240 PUSH1 0x40 MSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4059 CODESIZE SUB DUP1 PUSH3 0x4059 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3F SWAP2 PUSH3 0x8F3 JUMP JUMPDEST CALLER DUP9 DUP11 DUP7 DUP5 DUP15 PUSH1 0x0 PUSH3 0x5A PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x596 AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4039 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x68304835 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x108 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9FC4CAA5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x17D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1A3 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE DUP5 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1C0 JUMPI INVALID JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1D0 JUMPI INVALID JUMPDEST PUSH1 0xF8 SWAP1 DUP2 SHL SWAP1 SWAP2 MSTORE DUP6 ISZERO ISZERO SWAP1 SHL PUSH2 0x120 MSTORE POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x7B8041CF PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xF700839E SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH2 0x100 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x243 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x269 SWAP2 SWAP1 PUSH3 0x9FA JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP SWAP2 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8B8E5309 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2FD SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xC0 MSTORE PUSH1 0xE0 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x80 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP2 AND SWAP1 DUP6 AND GT DUP1 ISZERO SWAP1 PUSH3 0x370 JUMPI POP PUSH1 0x1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO JUMPDEST PUSH3 0x398 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xAA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0xC0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH2 0x140 MSTORE POP PUSH3 0x3BD SWAP3 POP DUP13 SWAP2 POP POP PUSH3 0x59B JUMP JUMPDEST DUP3 MLOAD PUSH3 0x3D2 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x675 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP9 SWAP1 SHL AND PUSH2 0x160 MSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x9FC4CAA5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH4 0x9FC4CAA5 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x43E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x453 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x479 SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH2 0x180 MSTORE PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5A7D1E5D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x5A7D1E5D SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x50B SWAP2 SWAP1 PUSH3 0x8CD JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH2 0x1A0 MSTORE NUMBER PUSH2 0x1C0 MSTORE PUSH1 0x80 DUP7 DUP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 DUP2 AND PUSH2 0x1E0 MSTORE SWAP1 DUP7 SWAP1 SHL AND PUSH2 0x200 MSTORE DUP8 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x54C JUMPI INVALID JUMPDEST PUSH2 0x220 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x55C JUMPI INVALID JUMPDEST PUSH1 0xF8 SHL SWAP1 MSTORE POP DUP2 MLOAD PUSH3 0x577 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6FA JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND PUSH1 0xE SSTORE POP PUSH3 0xB4A SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLER JUMPDEST SWAP1 JUMP JUMPDEST PUSH3 0x5AE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x596 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x5CA PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH3 0x666 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xAD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x61C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x38F SWAP1 PUSH3 0xA63 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x4039 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x6B8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x6E8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x6E8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x6E8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6CB JUMP JUMPDEST POP PUSH3 0x6F6 SWAP3 SWAP2 POP PUSH3 0x737 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x6E8 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD DUP3 DUP2 GT ISZERO PUSH3 0x6E8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x6CB JUMP JUMPDEST PUSH3 0x598 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x6F6 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x73E JUMP JUMPDEST DUP1 MLOAD PUSH3 0x761 DUP2 PUSH3 0xB31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x778 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x78E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH3 0x7A0 DUP3 DUP3 ADD PUSH3 0xB0A JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH3 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0x7E2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH3 0x7C2 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x6 DUP2 LT PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x81F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x835 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 PUSH3 0x84B PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH3 0xB0A JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP5 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0x862 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x882 JUMPI DUP5 DUP2 ADD DUP3 ADD MLOAD DUP5 DUP3 ADD DUP4 ADD MSTORE DUP2 ADD PUSH3 0x865 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x894 JUMPI PUSH1 0x0 DUP3 DUP5 DUP7 ADD ADD MSTORE JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x8DF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x8EC DUP2 PUSH3 0xB31 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x913 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH3 0x91F DUP13 DUP13 PUSH3 0x754 JUMP JUMPDEST SWAP10 POP PUSH3 0x930 DUP13 PUSH1 0x20 DUP14 ADD PUSH3 0x7ED JUMP JUMPDEST SWAP9 POP PUSH3 0x941 DUP13 PUSH1 0x40 DUP14 ADD PUSH3 0x7FE JUMP JUMPDEST SWAP8 POP PUSH3 0x952 DUP13 PUSH1 0x60 DUP14 ADD PUSH3 0x754 JUMP JUMPDEST SWAP7 POP PUSH3 0x963 DUP13 PUSH1 0x80 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST SWAP6 POP PUSH3 0x974 DUP13 PUSH1 0xA0 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST SWAP5 POP PUSH3 0x985 DUP13 PUSH1 0xC0 DUP14 ADD PUSH3 0x89D JUMP JUMPDEST PUSH1 0xE0 DUP13 ADD MLOAD SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9A2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x9B0 DUP15 DUP4 DUP16 ADD PUSH3 0x80E JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x9C7 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH3 0x9D6 DUP14 DUP3 DUP15 ADD PUSH3 0x767 JUMP JUMPDEST SWAP3 POP POP PUSH3 0x9E9 DUP13 PUSH2 0x120 DUP14 ADD PUSH3 0x8B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH3 0xA17 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 MLOAD SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP5 POP PUSH1 0x80 DUP10 ADD MLOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD MLOAD SWAP2 POP PUSH3 0xA54 DUP11 PUSH1 0xE0 DUP12 ADD PUSH3 0x8B5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E636F7272656374206C65766572616765 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xB47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x80 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xF8 SHR PUSH2 0x120 MLOAD PUSH1 0xF8 SHR PUSH2 0x140 MLOAD PUSH1 0xC0 SHR PUSH2 0x160 MLOAD PUSH1 0x60 SHR PUSH2 0x180 MLOAD PUSH1 0x60 SHR PUSH2 0x1A0 MLOAD PUSH1 0x60 SHR PUSH2 0x1C0 MLOAD PUSH2 0x1E0 MLOAD PUSH1 0x80 SHR PUSH2 0x200 MLOAD PUSH1 0x80 SHR PUSH2 0x220 MLOAD PUSH1 0xF8 SHR PUSH2 0x33EB PUSH3 0xC4E PUSH1 0x0 CODECOPY DUP1 PUSH2 0xDA1 MSTORE DUP1 PUSH2 0x1309 MSTORE POP DUP1 PUSH2 0x534 MSTORE DUP1 PUSH2 0xD59 MSTORE DUP1 PUSH2 0x132A MSTORE DUP1 PUSH2 0x13D8 MSTORE DUP1 PUSH2 0x18AD MSTORE POP DUP1 PUSH2 0x4FB MSTORE DUP1 PUSH2 0xC48 MSTORE DUP1 PUSH2 0x1842 MSTORE DUP1 PUSH2 0x188C MSTORE POP DUP1 PUSH2 0xC24 MSTORE POP DUP1 PUSH2 0x16B7 MSTORE DUP1 PUSH2 0x1756 MSTORE POP DUP1 PUSH2 0x12DA MSTORE POP DUP1 PUSH2 0x1447 MSTORE DUP1 PUSH2 0x160A MSTORE POP DUP1 PUSH2 0xD35 MSTORE DUP1 PUSH2 0x1B3E MSTORE DUP1 PUSH2 0x222C MSTORE DUP1 PUSH2 0x25C2 MSTORE DUP1 PUSH2 0x269A MSTORE POP DUP1 PUSH2 0xC00 MSTORE DUP1 PUSH2 0x1A74 MSTORE POP POP DUP1 PUSH2 0x10CD MSTORE POP DUP1 PUSH2 0x1A16 MSTORE POP DUP1 PUSH2 0x94A MSTORE DUP1 PUSH2 0x1932 MSTORE POP POP PUSH2 0x33EB PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x248 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78025EC4 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0xB7BC347E GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xDB69A462 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDB69A462 EQ PUSH2 0x4B9 JUMPI DUP1 PUSH4 0xF2DB10FE EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xF7E9DFFF EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xFD5E6DD1 EQ PUSH2 0x4E4 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0xB7BC347E EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xC623674F EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0xC8B5C248 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xCBE230C3 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0xD7A5C422 EQ PUSH2 0x4A6 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x9B19251A GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x9B19251A EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x9FABEB00 EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA224EE9C EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0xA7E8D8D4 EQ PUSH2 0x448 JUMPI DUP1 PUSH4 0xB1659BAD EQ PUSH2 0x45B JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x78025EC4 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x7FD788AA EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x8D21C770 EQ PUSH2 0x402 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0x96F76F11 EQ PUSH2 0x41D JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x46E0FBAE GT PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x5AE698FF GT PUSH2 0x18D JUMPI DUP1 PUSH4 0x5AE698FF EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0x5C1C20DE EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0x5E5F2E26 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x639B6FC3 EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3DF JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x46E0FBAE EQ PUSH2 0x322 JUMPI DUP1 PUSH4 0x484FBF2B EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x4E0C91F6 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x4FB2647E EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x57AC94F0 EQ PUSH2 0x37D JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x2526743A GT PUSH2 0x210 JUMPI DUP1 PUSH4 0x2526743A EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x26DB18AC EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x2C86D98E EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x3385D334 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x4190EDDE EQ PUSH2 0x300 JUMPI PUSH2 0x248 JUMP JUMPDEST DUP1 PUSH4 0x21EEF7F EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xBEA440D EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x171E44EA EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x18E45427 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x1BF30929 EQ PUSH2 0x2A6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x260 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x289 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x289 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST PUSH2 0x260 PUSH2 0xBFE JUMP JUMPDEST PUSH2 0x2AE PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x328E JUMP JUMPDEST PUSH2 0x289 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0xC6A JUMP JUMPDEST PUSH2 0x2EB PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x3315 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0xD7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32B9 JUMP JUMPDEST PUSH2 0x32A PUSH2 0xD9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DBD JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0xDF0 JUMP JUMPDEST PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x2936 JUMP JUMPDEST PUSH2 0xE0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP3 SWAP2 SWAP1 PUSH2 0x2D6C JUMP JUMPDEST PUSH2 0x289 PUSH2 0x3AC CALLDATASIZE PUSH1 0x4 PUSH2 0x29CD JUMP JUMPDEST PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x10CB JUMP JUMPDEST PUSH2 0x35D PUSH2 0x3C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x3DA CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x1128 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x11B1 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x11CF JUMP JUMPDEST PUSH2 0x289 PUSH2 0x410 CALLDATASIZE PUSH1 0x4 PUSH2 0x2961 JUMP JUMPDEST PUSH2 0x11D8 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x12C6 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x433 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x142A JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x143F JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1445 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x456 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1469 JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x147E JUMP JUMPDEST PUSH2 0x2AE PUSH2 0x1484 JUMP JUMPDEST PUSH2 0x473 PUSH2 0x148A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x2B49 JUMP JUMPDEST PUSH2 0x1518 JUMP JUMPDEST PUSH2 0x260 PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x15A4 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x4B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B9F JUMP JUMPDEST PUSH2 0x15FF JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1921 JUMP JUMPDEST PUSH2 0x2C3 PUSH2 0x1930 JUMP JUMPDEST PUSH2 0x289 PUSH2 0x4D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x28FE JUMP JUMPDEST PUSH2 0x1954 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x1A14 JUMP JUMPDEST PUSH2 0x35D PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0x1A38 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT ISZERO PUSH2 0x532 JUMPI POP PUSH1 0x0 PUSH2 0x56F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 GT ISZERO PUSH2 0x56B JUMPI POP PUSH1 0x0 PUSH2 0x56F JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0x59E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3135 JUMP JUMPDEST PUSH2 0x5D2 DUP5 DUP5 PUSH2 0x1A45 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x1BD1EB6B4FD3F08E718D7A241C54C4641C9F36004B6949383F48D15A2FCC8F52 DUP8 PUSH1 0x40 MLOAD PUSH2 0x618 SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x68304835 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x68304835 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x679 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x59482847 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB290508E SWAP1 PUSH2 0x6CC SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71E SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x72E PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x73F PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x765 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x7B8041CF PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF700839E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH2 0x100 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E3 SWAP2 SWAP1 PUSH2 0x2BE3 JUMP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH2 0x7F5 DUP3 PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3017 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xCBE230C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xCBE230C3 SWAP1 PUSH2 0x842 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST PUSH2 0x8AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F01 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 DUP3 SWAP1 MSTORE PUSH32 0xF3F7A9FE364FAAB93B216DA50A3214154F22A0A2B415B23A84C8169E8B636EE3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE SLOAD DUP2 LT ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFC966D45 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xFC966D45 SWAP1 PUSH2 0x972 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x328E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x99E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9C6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2A8D JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0x2CA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x9FF SWAP2 SWAP1 PUSH2 0x2CD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA23 SWAP2 SWAP1 PUSH2 0x2D03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x60 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA47 SWAP2 SWAP1 PUSH2 0x2D35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x1 SLOAD PUSH4 0x33502147 PUSH1 0xE1 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x66A0428E SWAP1 PUSH2 0xA8D SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xABB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xADF SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x33502147 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x66A0428E SWAP1 PUSH2 0xB17 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E0A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB45 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x291A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP6 DUP10 AND SWAP6 SWAP1 SWAP3 AND DUP6 OR SWAP1 SWAP2 SSTORE MLOAD SWAP4 SWAP5 POP SWAP2 SWAP3 PUSH32 0xCE8C390DC55DBCD418078F1391FBB7D471C01C228FC4464926095354CB27C029 SWAP1 PUSH2 0xBEB SWAP1 DUP10 SWAP1 DUP2 SWAP1 DUP14 SWAP1 DUP2 SWAP1 PUSH2 0x2E38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0xC8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH2 0xC93 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCD6 JUMPI PUSH1 0x0 PUSH2 0xCB5 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xCD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x303E JUMP JUMPDEST POP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5D73C1B3AAB5BAE46E08E09668D192166389623BEF76BBE8CDAE8DF8AD320FCE DUP7 PUSH1 0x40 MLOAD PUSH2 0xD1C SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xD2E DUP4 DUP4 PUSH2 0x1FAC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x8 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0xE1D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP PUSH2 0xE3C PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xE78 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF02 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xF18 JUMPI POP SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0xFE0 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xF47 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF97 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP5 SWAP1 PUSH2 0xFD7 SWAP1 DUP5 SWAP1 PUSH2 0xFCB SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2196 AND JUMP JUMPDEST SWAP6 POP SWAP6 POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFEF PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1000 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1026 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x9 PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1042 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x10BF JUMPI PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x107F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1029 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x10FC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1130 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1141 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1167 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11BE JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11E0 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11F1 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1217 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD2E JUMPI PUSH1 0x9 PUSH1 0x0 DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x1232 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1247 SWAP2 SWAP1 PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x12BE JUMPI PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x1280 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1295 SWAP2 SWAP1 PUSH2 0x28FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x121A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFFA61235 PUSH32 0x0 PUSH32 0x0 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1366 SWAP3 SWAP2 SWAP1 PUSH2 0x2DD1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x137D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1391 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13B5 SWAP2 SWAP1 PUSH2 0x2BC0 JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP3 POP PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ SWAP1 POP DUP1 PUSH2 0x1424 JUMPI POP DUP1 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 0x1424 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD SLOAD PUSH1 0xFF AND SWAP1 DUP2 GT ISZERO PUSH2 0x1421 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1510 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1510 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 GT PUSH2 0x1539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31EE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1543 PUSH2 0x12D5 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE SLOAD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xBD9BE3D6449ECBDF4B3B9980B1631EC06C13D8CF9E09E2433075F123B348E3BA DUP8 PUSH1 0x40 MLOAD PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x2DB4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x159E DUP5 DUP5 DUP4 PUSH2 0x21C8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x15F6 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x15C9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15EE JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x56F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x15A8 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1647 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x310D JUMP JUMPDEST PUSH32 0xC95987C1992805EE34BDC915E017CCEAE36BA1C156B9911FA7E691E6435EB46E TIMESTAMP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x167A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 DUP3 ADD PUSH1 0xE SSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 DUP4 ADD DUP6 SWAP1 SSTORE TIMESTAMP DUP4 SSTORE MLOAD PUSH4 0xA7B72AC5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA7B72AC5 SWAP1 PUSH2 0x16EC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1703 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1717 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x173B SWAP2 SWAP1 PUSH2 0x2B78 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1993B9DF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x1993B9DF SWAP1 PUSH2 0x178D SWAP1 DUP8 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x32A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17DD SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST ISZERO PUSH2 0x18F5 JUMPI PUSH1 0x2 DUP3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2710 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x182B SWAP1 PUSH2 0x180B SWAP1 PUSH2 0xFCB DUP10 DUP8 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xFCB DUP5 PUSH2 0x181F DUP11 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1879 PUSH1 0x1 PUSH2 0x186D DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x18DF PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x1 PUSH32 0x0 PUSH32 0x0 SUB ADD AND PUSH2 0xFCB DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x18EC DUP8 DUP3 DUP7 PUSH2 0x2450 JUMP JUMPDEST POP POP POP POP PUSH2 0x159E JUMP JUMPDEST PUSH1 0x2 DUP3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x190E DUP4 PUSH2 0x256F JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x195C PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x196D PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1993 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x30AE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x19B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2E84 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x10FC JUMPI INVALID JUMPDEST DUP1 PUSH2 0x1A4F DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1A70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x0 ISZERO ISZERO EQ ISZERO PUSH2 0x1ACF JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1ACF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x31C5 JUMP JUMPDEST PUSH2 0x1AEA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER ADDRESS DUP7 PUSH4 0xFFFFFFFF PUSH2 0x26D4 AND JUMP JUMPDEST PUSH2 0x1AF2 PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D62 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP2 PUSH2 0x1B6E PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH2 0x181F DUP5 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST GT ISZERO PUSH2 0x1B8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C16 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1C82 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1C4B SWAP1 CALLER SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x1CB0 DUP3 PUSH2 0xFCB DUP12 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1CE1 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D0F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1D3F SWAP1 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x1F30 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP5 AND SWAP4 DUP5 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DC7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DEB SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1E57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1E20 SWAP1 CALLER SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x1E85 DUP3 PUSH2 0xFCB DUP10 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH2 0x1EB6 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1ED0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F14 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP POP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD2E JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1FB6 DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1FD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP6 AND SWAP5 DUP6 SWAP4 PUSH4 0x18160DDD SWAP4 DUP4 DUP3 ADD SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2029 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x203D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2061 SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x2091 DUP3 PUSH2 0xFCB DUP10 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x20C2 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x211D SWAP2 POP DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x214A SWAP1 CALLER DUP10 PUSH4 0xFFFFFFFF PUSH2 0x272C AND JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2162 JUMPI POP PUSH1 0x0 PUSH2 0x2190 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x216F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x218D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x306D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x21B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2FE0 JUMP JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x21C0 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x21D2 DUP2 PUSH2 0x15A4 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x21F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD DUP4 PUSH2 0x2285 JUMPI PUSH2 0x2257 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH2 0x2267 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST LT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3262 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP5 AND SWAP4 DUP5 SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x230E SWAP2 SWAP1 PUSH2 0x2B31 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0x233E DUP3 PUSH2 0xFCB DUP13 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x236F SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x239D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x23CA SWAP2 POP DUP12 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x23F7 SWAP1 CALLER DUP13 PUSH4 0xFFFFFFFF PUSH2 0x272C AND JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x218D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2ECA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x244A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F63 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x159E JUMPI PUSH1 0x0 PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x246C JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 PUSH2 0x24A8 DUP6 PUSH2 0xFCB DUP5 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x24D4 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x2509 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP9 SWAP1 PUSH32 0x3173C1C4B679E2DA86DBB0382BDE749A6E16CD31912C5410E17985CD7D2B9052 SWAP1 PUSH2 0x255C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP8 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP PUSH1 0x1 ADD PUSH2 0x2453 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x8 SLOAD DUP2 LT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x0 PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x258B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 SWAP3 POP SWAP1 PUSH2 0x25ED DUP3 PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xFFFFFFFF PUSH2 0x2153 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x2619 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2428 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x3 SWAP1 MSTORE KECCAK256 SLOAD PUSH2 0x264E SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2403 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP7 SWAP1 PUSH32 0x89385E9D619600DA63726158403C0CFD9772B2CAC90D3E093387A5456EE1A247 SWAP1 PUSH2 0x26C1 SWAP1 DUP7 SWAP1 PUSH32 0x0 SWAP1 DUP8 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP PUSH1 0x1 ADD PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x159E DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x274B JUMP JUMPDEST PUSH2 0xD2E DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x26F5 SWAP3 SWAP2 SWAP1 PUSH2 0x2D6C JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27A0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x27DA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD2E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x27BE SWAP2 SWAP1 PUSH2 0x2A6D JUMP JUMPDEST PUSH2 0xD2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3218 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27E9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x27F3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x2F9A JUMP JUMPDEST PUSH2 0x281E DUP6 PUSH2 0x28B4 JUMP JUMPDEST PUSH2 0x283A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP1 PUSH2 0x3160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2857 SWAP2 SWAP1 PUSH2 0x2C84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2894 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2899 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x28A9 DUP3 DUP3 DUP7 PUSH2 0x28BA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x28C9 JUMPI POP DUP2 PUSH2 0x27EC JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x28D9 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x595 SWAP2 SWAP1 PUSH2 0x2DF7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2190 DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x218D DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x292B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x218D DUP2 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2948 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2953 DUP2 PUSH2 0x339D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2973 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x298A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x299B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x29AB JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x29BE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29F5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2A06 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x2A1B PUSH2 0x2A16 DUP4 PUSH2 0x3351 JUMP JUMPDEST PUSH2 0x332A JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x2A37 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x2A61 JUMPI PUSH2 0x2A4D DUP10 DUP3 PUSH2 0x28F3 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x2A3B JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A7E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x218D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A9E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2AB5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x2AC6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x2AD6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2AE9 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x332A JUMP JUMPDEST SWAP2 POP DUP3 DUP3 MSTORE DUP6 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x2AFF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2B10 DUP4 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x3371 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B2A JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B42 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B5B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2B6D DUP2 PUSH2 0x339D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B8A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x6 DUP2 LT PUSH2 0x2B6D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BB1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BD2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2BFF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP9 MLOAD SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP6 POP PUSH1 0x60 DUP10 ADD MLOAD SWAP5 POP PUSH1 0x80 DUP10 ADD MLOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD MLOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD MLOAD SWAP2 POP PUSH1 0xE0 DUP10 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2C47 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2C70 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x3371 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C96 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x44534C412D53484F52542D PUSH1 0xA8 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CC6 DUP2 PUSH1 0xB DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0xB ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x44534C412D53502D PUSH1 0xC0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CF6 DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x8 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0x44534C412D4C4F4E472D PUSH1 0xB0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2D28 DUP2 PUSH1 0xA DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x44534C412D4C502D PUSH1 0xC0 SHL DUP3 MSTORE DUP3 MLOAD PUSH2 0x2CF6 DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3371 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x6 DUP4 LT PUSH2 0x2DCB JUMPI INVALID JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x2DDF JUMPI INVALID JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x27EC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2E1D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2C58 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2E2F DUP2 DUP6 PUSH2 0x2C58 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x2E4B PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x2C58 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2E5D DUP2 DUP8 PUSH2 0x2C58 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2E6F DUP2 DUP8 PUSH2 0x2C58 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x28A9 DUP2 DUP6 PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420616C6C6F77656420627920534C415265676973747279000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x1D1BDAD95B881B9BDD08185B1B1BDDD959 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x185B1C9958591E481859191959 PUSH1 0x9A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x1B9BDD08199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0xDAC2F040E8DED6CADC40D8CADCCEE8D PUSH1 0x83 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x37B7363C9036B2B9B9B2B733B2B9 PUSH1 0x91 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x199A5B9A5CDA19590818DBDB9D1C9858DD PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x696E636F72726563742075736572207374616B65 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x616D6F756E742063616E74206265203 PUSH1 0x84 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x696E636F7272656374207769746864726177 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x32D1 JUMPI INVALID JUMPDEST DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3367 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x338C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3374 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x159E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x33B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 PUSH15 0x9511E61C712AD56A8BF108AFA926C5 0x21 DUP3 0xC4 JUMPI LT POP DUP13 0x26 PUSH19 0x9F472BB2B9AB64736F6C634300060600338BE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A2646970667358221220D35106EB9148AA3EF2 SGT DUP8 0x26 SWAP12 DUP9 DUP5 0x4B 0xCD GAS ISZERO PUSH9 0xB17632172B6C41CE6 0x28 SWAP5 SWAP6 PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ",
          "sourceMap": "484:8928:36:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;484:8928:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;3243:2136:36;;;;;;;;;:::i;:::-;;6888:850;;;;;;;;;:::i;877:17::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;8500:383;;;;;;;;;:::i;:::-;;;;;;;;570:30;;;:::i;711:42::-;;;:::i;787:34::-;;;:::i;5609:1273::-;;;;;;;;;:::i;7915:320::-;;;;;;;;;:::i;9019:84::-;;;:::i;636:36::-;;;:::i;1182:37::-;;;:::i;:::-;;;;;;;;9286:124;;;;;;;;;:::i;3243:2136::-;3652:14;;:59;;-1:-1:-1;;;3652:59:36;;3621:16;;-1:-1:-1;;;;;3652:14:36;;:28;;:59;;3681:11;;3694:16;;3652:59;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3652:59:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3652:59:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3652:59:36;;;;;;;;;3621:90;;3729:11;3721:47;;;;-1:-1:-1;;;3721:47:36;;;;;;;;;;;;;;;;;3792:14;;:57;;-1:-1:-1;;;3792:57:36;;-1:-1:-1;;;;;3792:14:36;;;;:28;;:57;;3821:11;;3834:14;;3792:57;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3792:57:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3792:57:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3792:57:36;;;;;;;;;3778:71;;3867:11;3859:47;;;;-1:-1:-1;;;3859:47:36;;;;;;;;;3953:14;;:47;;-1:-1:-1;;;3953:47:36;;3916:22;;-1:-1:-1;;;;;3953:14:36;;:34;;:47;;3988:11;;3953:47;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3953:47:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3953:47:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3953:47:36;;;;;;;;;3916:84;;4018:17;4010:57;;;;-1:-1:-1;;;4010:57:36;;;;;;;;;4116:16;-1:-1:-1;;;;;4098:34:36;:14;-1:-1:-1;;;;;4098:34:36;;;4077:118;;;;-1:-1:-1;;;4077:118:36;;;;;;;;;4210:15;4206:203;;;4281:14;;:62;;-1:-1:-1;;;4281:62:36;;4241:21;;-1:-1:-1;;;;;4281:14:36;;:31;;:62;;4313:11;;4326:16;;4281:62;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4281:62:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4281:62:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4281:62:36;;;;;;;;;4241:102;;4366:16;4365:17;4357:41;;;;-1:-1:-1;;;4357:41:36;;;;;;;;;4206:203;;4457:17;;:57;;-1:-1:-1;;;4457:57:36;;4418:24;;-1:-1:-1;;;;;4457:17:36;;:38;;:57;;4496:17;;4457:57;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4457:57:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4457:57:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4457:57:36;;;;;;;;;4418:96;-1:-1:-1;4555:4:36;4532:27;;;;4524:64;;;;-1:-1:-1;;;4524:64:36;;;;;;;;;4599:7;4646:10;4674:12;4704:11;4733:17;4768:16;4802:14;4842:4;:11;;;;4872:9;4899:10;4927:9;4621:329;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4621:329:36;4599:351;;4961:11;;;;;;;;;-1:-1:-1;;;;;4961:11:36;-1:-1:-1;;;;;4961:23:36;;4985:9;4996:8;5014:3;4961:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4961:58:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;5029:13:36;;:138;;-1:-1:-1;;;5029:138:36;;-1:-1:-1;;;;;5029:13:36;;;;-1:-1:-1;5029:27:36;;-1:-1:-1;5029:138:36;;5070:10;;5102:3;;5120:33;;;5029:13;5120:37;;5029:138;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5029:138:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;5177:4:36;27:10:-1;;39:1;23:18;;;45:23;;5177:14:36;;;;;;-1:-1:-1;;;;;;5177:14:36;-1:-1:-1;;;;;5177:14:36;;;;;;;;-1:-1:-1;5201:28:36;;;:14;5177;5201:28;;;;:35;;-1:-1:-1;;5201:35:36;;;;;5262:11;;-1:-1:-1;;;5262:18:36;;-1:-1:-1;5262:15:36;:18::i;:::-;5307:10;5290:28;;;;:16;:28;;;;;;;;27:10:-1;;39:1;23:18;;45:23;;5290:40:36;;;;;;;;;;;;5345:27;5246:34;;-1:-1:-1;5307:10:36;;-1:-1:-1;;;;;5345:27:36;;;;;;3243:2136;;;;;;;;;;;;;;;:::o;6888:850::-;6950:30;6974:4;6950:15;:30::i;:::-;6942:54;;;;-1:-1:-1;;;6942:54:36;;;;;;;;;7028:4;-1:-1:-1;;;;;7028:10:36;;:12;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7028:12:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7028:12:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7028:12:36;;;;;;;;;-1:-1:-1;;;;;7014:26:36;:10;-1:-1:-1;;;;;7014:26:36;;7006:59;;;;-1:-1:-1;;;7006:59:36;;;;;;;;;7075:25;7103:4;-1:-1:-1;;;;;7103:18:36;;:20;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7103:20:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7103:20:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7103:20:36;;;;;;;;;-1:-1:-1;;;;;7075:48:36;;;7133:36;7172:4;-1:-1:-1;;;;;7172:15:36;;:17;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7172:17:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7172:17:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7172:17:36;;;;;;;;;7246:14;;:66;;-1:-1:-1;;;;;;7246:66:36;;7133:56;;-1:-1:-1;7202:28:36;;-1:-1:-1;;;;;7246:14:36;;;;:35;;:66;;7133:56;;7294:17;;7246:66;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7246:66:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7246:66:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7246:66:36;;;;;;;;;7199:113;;;7328:27;7359:4;-1:-1:-1;;;;;7359:15:36;;7375:17;7359:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7359:34:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7359:34:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7359:34:36;;;;;;;;;7323:70;;;;7424:4;-1:-1:-1;;;;;7424:21:36;;:23;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7424:23:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7424:23:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7424:23:36;;;;;;;;;:150;;;;7487:20;7468:15;:39;;:105;;;;-1:-1:-1;7551:22:36;7531:16;:42;;;;;;;;;;7468:105;7403:218;;;;-1:-1:-1;;;7403:218:36;;;;;;;;;7631:44;;7664:10;;-1:-1:-1;;;;;7631:44:36;;;;;;;;7685:13;;:46;;-1:-1:-1;;;7685:46:36;;-1:-1:-1;;;;;7685:13:36;;;;:31;;:46;;7725:4;;7685:46;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7685:46:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7685:46:36;;;;6888:850;;;;;:::o;877:17::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;877:17:36;;-1:-1:-1;877:17:36;:::o;8500:383::-;-1:-1:-1;;;;;8594:23:36;;8578:13;8594:23;;;:16;:23;;;;;:30;8554:12;;;8594:30;8657:16;;;2:2:-1;;;;27:1;24;17:12;2:2;8657:16:36;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;144:17;;-1:-1;8657:16:36;-1:-1:-1;;;;;;8717:23:36;;;;;;:16;:23;;;;;;;;;8683:57;;;;;;;;;;;;;;;;;8634:39;;-1:-1:-1;8683:31:36;;8717:23;;8683:57;;8717:23;8683:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8683:57:36;;-1:-1:-1;8756:9:36;;-1:-1:-1;;;;8751:99:36;8775:5;8771:1;:9;8751:99;;;8815:4;8820:14;8835:1;8820:17;;;;;;;;;;;;;;8815:23;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8815:23:36;8801:7;8809:1;8801:10;;;;;;;;-1:-1:-1;;;;;8801:38:36;;;:10;;;;;;;;;;;:38;8782:3;;8751:99;;;-1:-1:-1;8868:7:36;;8500:383;-1:-1:-1;;;;8500:383:36:o;570:30::-;;;-1:-1:-1;;;;;570:30:36;;:::o;711:42::-;;;-1:-1:-1;;;;;711:42:36;;:::o;787:34::-;;;-1:-1:-1;;;;;787:34:36;;:::o;5609:1273::-;5734:30;5758:4;5734:15;:30::i;:::-;5726:54;;;;-1:-1:-1;;;5726:54:36;;;;;;;;;5811:4;-1:-1:-1;;;;;5811:25:36;;:27;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5811:27:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5811:27:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5811:27:36;;;;;;;;;5798:9;:40;5790:77;;;;-1:-1:-1;;;5790:77:36;;;;;;;;;5903:26;;-1:-1:-1;;;5903:26:36;;5882:17;;-1:-1:-1;;;;;5903:15:36;;;;;:26;;5919:9;;5903:26;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5903:26:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5903:26:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5903:26:36;;;;;;;;;5877:52;-1:-1:-1;5957:22:36;;-1:-1:-1;5947:32:36;;-1:-1:-1;5947:32:36;;:6;:32;;;;;;;;;5939:63;;;;-1:-1:-1;;;5939:63:36;;;;;;;;;6012:21;6036:4;-1:-1:-1;;;;;6036:21:36;;:23;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6036:23:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6036:23:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6036:23:36;;;;;;;;;6012:47;;6078:16;6077:17;6069:47;;;;-1:-1:-1;;;6069:47:36;;;;;;;;;6152:31;;-1:-1:-1;;;6152:31:36;;6126:23;;-1:-1:-1;;;;;6152:20:36;;;;;:31;;6173:9;;6152:31;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6152:31:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6152:31:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6152:31:36;;;;;;;;;6126:57;;6201:18;6193:48;;;;-1:-1:-1;;;6193:48:36;;;;;;;;;6251:39;6293:4;-1:-1:-1;;;;;6293:15:36;;:17;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6293:17:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6293:17:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6293:17:36;;;;;;;;;6354:14;;:57;;-1:-1:-1;;;6354:57:36;;6251:59;;-1:-1:-1;6320:19:36;;-1:-1:-1;;;;;6354:14:36;;;;:31;;:57;;6251:59;;6401:9;;6354:57;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6354:57:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6354:57:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6354:57:36;;;;;;;;;6320:91;;6429:14;6421:44;;;;-1:-1:-1;;;6421:44:36;;;;;;;;;6475:20;6498:4;-1:-1:-1;;;;;6498:21:36;;:23;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6498:23:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6498:23:36;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6498:23:36;;;;;;;;;6475:46;;6570:10;-1:-1:-1;;;;;6531:50:36;6563:4;-1:-1:-1;;;;;6531:50:36;;6544:9;6531:50;;;;;;;;;;;;;;;6591:147;;-1:-1:-1;;;6591:147:36;;-1:-1:-1;;;;;6591:35:36;;;;;:147;;6640:9;;6671:4;;6690:14;;6718:10;;6591:147;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6591:147:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;6748:13:36;;:127;;-1:-1:-1;;;6748:127:36;;-1:-1:-1;;;;;6748:13:36;;;;-1:-1:-1;6748:43:36;;-1:-1:-1;6748:127:36;;6813:4;;6832:10;;6856:9;;6748:127;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6748:127:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6748:127:36;;;;5609:1273;;;;;;;;;:::o;7915:320::-;8052:17;-1:-1:-1;;;;;8041:44:36;;:46;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8041:46:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8097:17:36;;:131;;-1:-1:-1;;;8097:131:36;;-1:-1:-1;;;;;8097:17:36;;;;-1:-1:-1;8097:35:36;;-1:-1:-1;8097:131:36;;8146:10;;8170:17;;8201;;8097:131;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8097:131:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8097:131:36;;;;7915:320;;:::o;9019:84::-;9059:12;9091:4;9083:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9083:13:36;;;;;;;;;;;;;;;;;;;;;;;9019:84;:::o;636:36::-;;;-1:-1:-1;;;;;636:36:36;;:::o;1182:37::-;;;:::o;9286:124::-;-1:-1:-1;;;;;9376:27:36;9353:4;9376:27;;;:14;:27;;;;;;;;;9286:124::o;3136:155:20:-;3194:7;3226:1;3221;:6;;3213:49;;;;-1:-1:-1;;;3213:49:20;;;;;;;;;-1:-1:-1;3279:5:20;;;3136:155;;;;;:::o;484:8928:36:-;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;301:707;;418:3;411:4;403:6;399:17;395:27;385:2;;-1:-1;;426:12;385:2;473:6;460:20;32642:18;32634:6;32631:30;32628:2;;;-1:-1;;32664:12;32628:2;32709:4;;32701:6;32697:17;495:80;32709:4;32697:17;32762:15;495:80;;;603:21;;;486:89;-1:-1;660:14;;;635:17;;;740:27;;;;;737:36;-1:-1;734:2;;;786:1;;776:12;734:2;811:1;802:10;;796:206;821:6;818:1;815:13;796:206;;;1349:20;;889:50;;843:1;836:9;;;;;953:14;;;;981;;796:206;;;800:14;;;;;378:630;;;;;1016:124;1080:20;;1105:30;1080:20;1105:30;;1580:160;1662:20;;1687:48;1662:20;1687:48;;2243:442;;2345:3;2338:4;2330:6;2326:17;2322:27;2312:2;;-1:-1;;2353:12;2312:2;2400:6;2387:20;32938:18;32930:6;32927:30;32924:2;;;-1:-1;;32960:12;32924:2;2422:65;33033:9;33014:17;;-1:-1;;33010:33;33101:4;33091:15;2422:65;;;2413:74;;2507:6;2500:5;2493:21;2611:3;33101:4;2602:6;2535;2593:16;;2590:25;2587:2;;;2628:1;;2618:12;2587:2;38143:6;33101:4;2535:6;2531:17;33101:4;2569:5;2565:16;38120:30;38199:1;38181:16;;;33101:4;38181:16;38174:27;2569:5;2305:380;-1:-1;;2305:380;2693:130;2760:20;;2785:33;2760:20;2785:33;;3249:128;3315:20;;35726:18;35715:30;;39981:34;;39971:2;;40029:1;;40019:12;3384:241;;3488:2;3476:9;3467:7;3463:23;3459:32;3456:2;;;-1:-1;;3494:12;3456:2;85:6;72:20;97:33;124:5;97:33;;;3546:63;3450:175;-1:-1;;;3450:175;3632:263;;3747:2;3735:9;3726:7;3722:23;3718:32;3715:2;;;-1:-1;;3753:12;3715:2;226:6;220:13;238:33;265:5;238:33;;3902:472;;;4033:2;4021:9;4012:7;4008:23;4004:32;4001:2;;;-1:-1;;4039:12;4001:2;85:6;72:20;97:33;124:5;97:33;;;4091:63;-1:-1;4219:2;4204:18;;4191:32;4243:18;4232:30;;4229:2;;;-1:-1;;4265:12;4229:2;4295:63;4350:7;4341:6;4330:9;4326:22;4295:63;;;4285:73;;;3995:379;;;;;;4381:257;;4493:2;4481:9;4472:7;4468:23;4464:32;4461:2;;;-1:-1;;4499:12;4461:2;1228:6;1222:13;1240:30;1264:5;1240:30;;4917:293;;5047:2;5035:9;5026:7;5022:23;5018:32;5015:2;;;-1:-1;;5053:12;5015:2;1846:6;1840:13;1858:48;1900:5;1858:48;;5217:263;;5332:2;5320:9;5311:7;5307:23;5303:32;5300:2;;;-1:-1;;5338:12;5300:2;2914:6;2908:13;2926:33;2953:5;2926:33;;5487:241;;5591:2;5579:9;5570:7;5566:23;5562:32;5559:2;;;-1:-1;;5597:12;5559:2;-1:-1;3038:20;;5553:175;-1:-1;5553:175;5735:263;;5850:2;5838:9;5829:7;5825:23;5821:32;5818:2;;;-1:-1;;5856:12;5818:2;-1:-1;3186:13;;5812:186;-1:-1;5812:186;6005:509;;;;6152:2;6140:9;6131:7;6127:23;6123:32;6120:2;;;-1:-1;;6158:12;6120:2;3051:6;3038:20;6210:63;;6310:2;6365:9;6361:22;1498:20;1523:45;1562:5;1523:45;;;6318:75;-1:-1;6430:2;6466:22;;1080:20;1105:30;1080:20;1105:30;;;6438:60;;;;6114:400;;;;;;6521:1661;;;;;;;;;;;6836:3;6824:9;6815:7;6811:23;6807:33;6804:2;;;-1:-1;;6843:12;6804:2;6926:22;3038:20;6895:63;;7013:65;7070:7;6995:2;7050:9;7046:22;7013:65;;;7003:75;;7133:50;7175:7;7115:2;7155:9;7151:22;7133:50;;;7123:60;;7238:53;7283:7;7220:2;7263:9;7259:22;7238:53;;;7228:63;;7347:68;7407:7;7328:3;7387:9;7383:22;7347:68;;;7337:78;;7471:53;7516:7;7452:3;7496:9;7492:22;7471:53;;;7461:63;;7580:53;7625:7;7561:3;7605:9;7601:22;7580:53;;;7570:63;;7698:3;7687:9;7683:19;7670:33;7723:18;;7715:6;7712:30;7709:2;;;-1:-1;;7745:12;7709:2;7775:63;7830:7;7821:6;7810:9;7806:22;7775:63;;;7765:73;;7903:3;7892:9;7888:19;7875:33;7861:47;;7723:18;7920:6;7917:30;7914:2;;;-1:-1;;7950:12;7914:2;;7980:78;8050:7;8041:6;8030:9;8026:22;7980:78;;;7970:88;;;8114:52;8158:7;8095:3;8138:9;8134:22;8114:52;;;8104:62;;6798:1384;;;;;;;;;;;;;;8189:399;;;8321:2;8309:9;8300:7;8296:23;8292:32;8289:2;;;-1:-1;;8327:12;8289:2;-1:-1;;3186:13;;8490:2;8540:22;;;3186:13;;;;;-1:-1;8283:305;8595:557;;;;8755:2;8743:9;8734:7;8730:23;8726:32;8723:2;;;-1:-1;;8761:12;8723:2;3192:6;3186:13;8813:74;;8924:2;8978:9;8974:22;3186:13;8932:74;;9043:2;9108:9;9104:22;2168:13;39643:1;39636:5;39633:12;39623:2;;-1:-1;;39649:12;12894:347;;13039:5;33554:12;34253:6;34248:3;34241:19;-1:-1;38288:101;38302:6;38299:1;38296:13;38288:101;;;34290:4;38369:11;;;;;38363:18;38350:11;;;;;38343:39;38317:10;38288:101;;;38404:6;38401:1;38398:13;38395:2;;;-1:-1;34290:4;38460:6;34285:3;38451:16;;38444:27;38395:2;-1:-1;33033:9;38560:14;-1:-1;;38556:28;13197:39;;;;34290:4;13197:39;;12986:255;-1:-1;;12986:255;18613:110;35726:18;35715:30;18682:36;;18676:47;18730:213;-1:-1;;;;;35509:54;;;;9767:37;;18848:2;18833:18;;18819:124;18950:539;-1:-1;;;;;35509:54;;;9626:58;;35509:54;;19324:2;19309:18;;9767:37;19152:2;19361;19346:18;;19339:48;;;18950:539;;19401:78;;19137:18;;19465:6;19401:78;;;19393:86;19123:366;-1:-1;;;;;19123:366;19496:451;-1:-1;;;;;35509:54;;;9626:58;;35509:54;;;;19850:2;19835:18;;9767:37;-1:-1;;;;;35389:46;;;19933:2;19918:18;;18431:50;19678:2;19663:18;;19649:298;19954:1481;;20407:3;32642:18;;35520:42;;;;34748:5;35509:54;9633:3;9626:58;20574:2;11431:5;34832:13;34825:21;20574:2;20563:9;20559:18;11404:34;35130:48;35172:5;35130:48;;;37515:39;20670:2;20659:9;20655:18;12666:63;35520:42;34748:5;35509:54;20753:2;20742:9;20738:18;9767:37;-1:-1;;;;;35400:34;;;18341:5;35389:46;20836:3;20825:9;20821:19;18311:37;35400:34;18341:5;35389:46;20920:3;20909:9;20905:19;18311:37;35400:34;18341:5;35389:46;21004:3;20993:9;20989:19;18311:37;20407:3;21042;21031:9;21027:19;21020:49;21083:78;20407:3;20396:9;20392:19;21147:6;21083:78;;;21200:20;;;21194:3;21179:19;;21172:49;33554:12;;34241:19;;;34281:14;;;;-1:-1;33238:14;;;;-1:-1;;10255:260;10280:6;10277:1;10274:13;10255:260;;;10341:13;;11511:37;;9313:14;;;;33969;;;;10302:1;10295:9;10255:260;;;10259:14;;;;21227:116;;;;21354:71;21420:3;21409:9;21405:19;21396:6;21354:71;;;20378:1057;;;;;;;;;;;;;;21442:451;-1:-1;;;;;35509:54;;;9767:37;;35509:54;;;;21796:2;21781:18;;9626:58;21879:2;21864:18;;11511:37;;;;21624:2;21609:18;;21595:298;21900:385;22080:2;22094:47;;;33554:12;;22065:18;;;34241:19;;;21900:385;;22080:2;33238:14;;;;34281;;;;21900:385;11025:284;11050:6;11047:1;11044:13;11025:284;;;11111:13;;-1:-1;;;;;35509:54;11657:76;;33969:14;;;;9519;;;;32642:18;11065:9;11025:284;;;-1:-1;22147:128;;22051:234;-1:-1;;;;;;22051:234;22292:201;34832:13;;34825:21;11404:34;;22404:2;22389:18;;22375:118;23810:239;23941:2;23926:18;;35130:48;35172:5;35130:48;;;12666:63;;;23912:137;;24056:350;24215:2;24200:18;;35130:48;35172:5;35130:48;;;12666:63;;;-1:-1;;;;;35389:46;;;;24392:2;24377:18;;;18431:50;24186:220;;24413:350;24572:2;24557:18;;35130:48;35172:5;35130:48;;;12666:63;;;24749:2;24734:18;11511:37;24543:220;;24770:407;24961:2;24975:47;;;13473:2;24946:18;;;34241:19;13509:29;34281:14;;;13489:50;13558:12;;;24932:245;25184:407;25375:2;25389:47;;;13809:2;25360:18;;;34241:19;13845:25;34281:14;;;13825:46;13890:12;;;25346:245;25598:407;25789:2;25803:47;;;14141:2;25774:18;;;34241:19;14177:32;34281:14;;;14157:53;14229:12;;;25760:245;26012:407;26203:2;26217:47;;;14480:2;26188:18;;;34241:19;-1:-1;;;34281:14;;;14496:34;14549:12;;;26174:245;26426:407;26617:2;26631:47;;;14800:2;26602:18;;;34241:19;-1:-1;;;34281:14;;;14816:44;14879:12;;;26588:245;26840:407;27031:2;27045:47;;;15130:2;27016:18;;;34241:19;-1:-1;;;34281:14;;;15146:43;15208:12;;;27002:245;27254:407;27445:2;27459:47;;;15459:2;27430:18;;;34241:19;-1:-1;;;34281:14;;;15475:40;15534:12;;;27416:245;27668:407;27859:2;27873:47;;;15785:2;27844:18;;;34241:19;-1:-1;;;34281:14;;;15801:34;15854:12;;;27830:245;28082:407;28273:2;28287:47;;;16105:2;28258:18;;;34241:19;16141:26;34281:14;;;16121:47;16187:12;;;28244:245;28496:407;28687:2;28701:47;;;16438:2;28672:18;;;34241:19;-1:-1;;;34281:14;;;16454:41;16514:12;;;28658:245;28910:407;29101:2;29115:47;;;16765:2;29086:18;;;34241:19;16801:26;34281:14;;;16781:47;16847:12;;;29072:245;29324:407;29515:2;29529:47;;;17098:2;29500:18;;;34241:19;17134:34;34281:14;;;17114:55;-1:-1;;;17189:12;;;17182:29;17230:12;;;29486:245;29738:407;29929:2;29943:47;;;17481:2;29914:18;;;34241:19;-1:-1;;;34281:14;;;17497:40;17556:12;;;29900:245;30152:407;30343:2;30357:47;;;17807:2;30328:18;;;34241:19;17843:25;34281:14;;;17823:46;17888:12;;;30314:245;30566:407;30757:2;30771:47;;;18139:2;30742:18;;;34241:19;-1:-1;;;34281:14;;;18155:40;18214:12;;;30728:245;30980:213;11511:37;;;31098:2;31083:18;;31069:124;31200:551;11511:37;;;-1:-1;;;;;35509:54;;;31569:2;31554:18;;9767:37;34832:13;;34825:21;31646:2;31631:18;;11404:34;35509:54;31737:2;31722:18;;9626:58;31404:3;31389:19;;31375:376;31758:455;11511:37;;;31942:2;31927:18;;35130:48;35172:5;35130:48;;;32116:2;32101:18;;12822:60;;;;-1:-1;;;;;35509:54;;;;32199:2;32184:18;;;9767:37;31913:300;;-1:-1;31913:300;32220:256;32282:2;32276:9;32308:17;;;32383:18;32368:34;;32404:22;;;32365:62;32362:2;;;32440:1;;32430:12;32362:2;32282;32449:22;32260:216;;-1:-1;32260:216;38597:106;38681:1;38674:5;38671:12;38661:2;;38687:9;38661:2;38655:48;;38820:117;-1:-1;;;;;35509:54;;38879:35;;38869:2;;38928:1;;38918:12;38944:111;39025:5;34832:13;34825:21;39003:5;39000:32;38990:2;;39046:1;;39036:12;39334:109;39418:1;39411:5;39408:12;39398:2;;39434:1;;39424:12;39675:117;-1:-1;;;;;39762:5;35389:46;39737:5;39734:35;39724:2;;39783:1;;39773:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4903200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "SLAs(uint256)": "2083",
            "allSLAs()": "infinite",
            "checkPastPeriod()": "infinite",
            "createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[],uint64)": "infinite",
            "isRegisteredSLA(address)": "1364",
            "messengerRegistry()": "1181",
            "periodRegistry()": "1114",
            "registerMessenger(address,string)": "infinite",
            "requestSLI(uint256,address,bool)": "infinite",
            "returnLockedValue(address)": "infinite",
            "sloRegistry()": "1159",
            "stakeRegistry()": "1093",
            "userSLAs(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "SLAs(uint256)": "50c5abfe",
          "allSLAs()": "96bddc10",
          "checkPastPeriod()": "a9e43e7f",
          "createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[],uint64)": "0d0f4db7",
          "isRegisteredSLA(address)": "c4277a7b",
          "messengerRegistry()": "5c4df332",
          "periodRegistry()": "9fc4caa5",
          "registerMessenger(address,string)": "8d2113ed",
          "requestSLI(uint256,address,bool)": "788164b1",
          "returnLockedValue(address)": "2575d7ca",
          "sloRegistry()": "5a7d1e5d",
          "stakeRegistry()": "68304835",
          "userSLAs(address)": "516c2857"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SLORegistry\",\"name\":\"_sloRegistry\",\"type\":\"address\"},{\"internalType\":\"contract PeriodRegistry\",\"name\":\"_periodRegistry\",\"type\":\"address\"},{\"internalType\":\"contract MessengerRegistry\",\"name\":\"_messengerRegistry\",\"type\":\"address\"},{\"internalType\":\"contract StakeRegistry\",\"name\":\"_stakeRegistry\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_checkPastPeriod\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ReturnLockedValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract SLA\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SLACreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SLIRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SLAs\",\"outputs\":[{\"internalType\":\"contract SLA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSLAs\",\"outputs\":[{\"internalType\":\"contract SLA[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPastPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sloValue\",\"type\":\"uint256\"},{\"internalType\":\"enum SLORegistry.SLOType\",\"name\":\"_sloType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_messengerAddress\",\"type\":\"address\"},{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_initialPeriodId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_finalPeriodId\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_extraData\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_leverage\",\"type\":\"uint64\"}],\"name\":\"createSLA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"}],\"name\":\"isRegisteredSLA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messengerRegistry\",\"outputs\":[{\"internalType\":\"contract MessengerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodRegistry\",\"outputs\":[{\"internalType\":\"contract PeriodRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_specificationUrl\",\"type\":\"string\"}],\"name\":\"registerMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"},{\"internalType\":\"contract SLA\",\"name\":\"_sla\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ownerApproval\",\"type\":\"bool\"}],\"name\":\"requestSLI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SLA\",\"name\":\"_sla\",\"type\":\"address\"}],\"name\":\"returnLockedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sloRegistry\",\"outputs\":[{\"internalType\":\"contract SLORegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contract StakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userSLAs\",\"outputs\":[{\"internalType\":\"contract SLA[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements\",\"methods\":{\"allSLAs()\":{\"details\":\"public view function that returns all the service level agreements\",\"returns\":{\"_0\":\"SLA[] array of SLAs\"}},\"constructor\":{\"details\":\"constructor\",\"params\":{\"_checkPastPeriod\":\"5. -\",\"_messengerRegistry\":\"3. Messenger registry\",\"_periodRegistry\":\"2. Periods registry\",\"_sloRegistry\":\"1. SLO Registry\",\"_stakeRegistry\":\"4. Stake registry\"}},\"createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[],uint64)\":{\"details\":\"public function for creating canonical service level agreements\",\"params\":{\"_extraData\":\"9. -\",\"_finalPeriodId\":\"6. -\",\"_initialPeriodId\":\"5. -\",\"_ipfsHash\":\"3. -\",\"_leverage\":\"10. -\",\"_messengerAddress\":\"7. -\",\"_periodType\":\"4. -\",\"_sloType\":\"2. -\",\"_sloValue\":\"1. -\",\"_whitelisted\":\"8. -\"}},\"isRegisteredSLA(address)\":{\"details\":\"public view function that returns true if _slaAddress was deployed using this SLARegistry\",\"params\":{\"_slaAddress\":\"address of the SLA to be checked\"}},\"registerMessenger(address,string)\":{\"details\":\"function to declare this SLARegistry contract as SLARegistry of _messengerAddress\",\"params\":{\"_messengerAddress\":\"1. address of the messenger\"}},\"requestSLI(uint256,address,bool)\":{\"details\":\"Gets SLI information for the specified SLA and SLO\",\"params\":{\"_ownerApproval\":\"3. if approval by owner or msg.sender\",\"_periodId\":\"1. id of the period\",\"_sla\":\"2. SLA Address\"}},\"userSLAs(address)\":{\"details\":\"public view function that returns the service level agreements that the given user is the owner of\",\"params\":{\"_user\":\"Address of the user for which to return the service level agreements\"},\"returns\":{\"_0\":\"array of SLAs\"}}},\"title\":\"SLARegistry\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@stacktical/dsla-protocol/contracts/SLARegistry.sol\":\"SLARegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa7c607ed4a0b2bebb811a398838ce4b5165e490f420a06337478eb2ba8c90cfc\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\"},\"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa22af140ae7ec1f8f2f3bed5869cd0d548dfaac66343f0efc7324ff34aaf1254\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\"},\"@stacktical/dsla-protocol/contracts/MessengerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./messenger/IMessenger.sol\\\";\\n\\n/**\\n * @title MessengerRegistry\\n * @dev MessengerRegistry is a contract to register openly distributed Messengers\\n */\\ncontract MessengerRegistry {\\n    struct Messenger {\\n        address ownerAddress;\\n        address messengerAddress;\\n        string specificationUrl;\\n        uint256 precision;\\n        uint256 requestsCounter;\\n        uint256 fulfillsCounter;\\n        uint256 id;\\n    }\\n\\n    /// @dev array to store the messengers\\n    Messenger[] public messengers;\\n    /// @dev (messengerAddress=>bool) to check if the Messenger was\\n    mapping(address => bool) public registeredMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the messengers of an owner\\n    mapping(address => uint256[]) public ownerMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the owner of a Messenger\\n    address public slaRegistry;\\n\\n    event MessengerRegistered(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    event MessengerModified(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev function to register a new Messenger\\n     */\\n    function registerMessenger(\\n        address _callerAddress,\\n        address _messengerAddress,\\n        string calldata _specificationUrl\\n    ) external {\\n        require(\\n            msg.sender == slaRegistry,\\n            \\\"Should only be called using the SLARegistry contract\\\"\\n        );\\n        require(\\n            !registeredMessengers[_messengerAddress],\\n            \\\"messenger already registered\\\"\\n        );\\n\\n        IMessenger messenger = IMessenger(_messengerAddress);\\n        address messengerOwner = messenger.owner();\\n        require(\\n            messengerOwner == _callerAddress,\\n            \\\"Should only be called by the messenger owner\\\"\\n        );\\n        uint256 precision = messenger.messengerPrecision();\\n        uint256 requestsCounter = messenger.requestsCounter();\\n        uint256 fulfillsCounter = messenger.fulfillsCounter();\\n        registeredMessengers[_messengerAddress] = true;\\n        uint256 id = messengers.length - 1;\\n        ownerMessengers[messengerOwner].push(id);\\n\\n        messengers.push(\\n            Messenger({\\n                ownerAddress: messengerOwner,\\n                messengerAddress: _messengerAddress,\\n                specificationUrl: _specificationUrl,\\n                precision: precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: id\\n            })\\n        );\\n\\n        emit MessengerRegistered(\\n            messengerOwner,\\n            _messengerAddress,\\n            _specificationUrl,\\n            precision,\\n            id\\n        );\\n    }\\n\\n    /**\\n     * @dev function to modifyMessenger a Messenger\\n     */\\n    function modifyMessenger(\\n        string calldata _specificationUrl,\\n        uint256 _messengerId\\n    ) external {\\n        Messenger storage storedMessenger = messengers[_messengerId];\\n        IMessenger messenger = IMessenger(storedMessenger.messengerAddress);\\n        require(\\n            msg.sender == messenger.owner(),\\n            \\\"Can only be modified by the owner\\\"\\n        );\\n        storedMessenger.specificationUrl = _specificationUrl;\\n        storedMessenger.ownerAddress = msg.sender;\\n        emit MessengerModified(\\n            storedMessenger.ownerAddress,\\n            storedMessenger.messengerAddress,\\n            storedMessenger.specificationUrl,\\n            storedMessenger.precision,\\n            storedMessenger.id\\n        );\\n    }\\n\\n    function getMessengers() external view returns (Messenger[] memory) {\\n        Messenger[] memory returnMessengers =\\n            new Messenger[](messengers.length);\\n        for (uint256 index = 0; index < messengers.length; index++) {\\n            IMessenger messenger =\\n                IMessenger(messengers[index].messengerAddress);\\n            uint256 requestsCounter = messenger.requestsCounter();\\n            uint256 fulfillsCounter = messenger.fulfillsCounter();\\n            returnMessengers[index] = Messenger({\\n                ownerAddress: messengers[index].ownerAddress,\\n                messengerAddress: messengers[index].messengerAddress,\\n                specificationUrl: messengers[index].specificationUrl,\\n                precision: messengers[index].precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: messengers[index].id\\n            });\\n        }\\n        return returnMessengers;\\n    }\\n\\n    function getMessengersLength() external view returns (uint256) {\\n        return messengers.length;\\n    }\\n}\\n\",\"keccak256\":\"0xb793303ab0dd9cc5be2a3b04b0db8e2b02506b2bc2ac5227246af4fb78e79616\"},\"@stacktical/dsla-protocol/contracts/PeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract PeriodRegistry is Ownable {\\n    using SafeMath for uint256;\\n\\n    enum PeriodType {Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly}\\n\\n    /// @dev struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @dev (periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of the starts of the period\\n     *@param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(\\n            !periodDefinition.initialized,\\n            \\\"Period type already initialized\\\"\\n        );\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            \\\"Period type starts and ends should match\\\"\\n        );\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev function to add new periods to certain period type\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of uint256 of the period starts to add\\n     *@param _periodEnds 3. array of uint256 of the period starts to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(periodDefinition.initialized, \\\"Period was not initialized yet\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length.sub(1)) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev public function to get the start and end of a period\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @dev public function to check if a periodType id is initialized\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        public\\n        view\\n        returns (bool initialized)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        initialized = periodDefinition.initialized;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period id is valid i.e. it belongs to the added id array\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        valid = periodDefinition.starts.length.sub(1) >= _periodId;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has finished\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has started\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to get the periodDefinitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\",\"keccak256\":\"0xbb188a59bdf036e8dba0d1b6b25a68ef0f4159fd3f6782540477957fa8c3ef53\"},\"@stacktical/dsla-protocol/contracts/SLA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./SLORegistry.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\n/**\\n * @title SLA\\n * @dev SLA is a service level agreement contract used for service downtime\\n * compensation\\n */\\ncontract SLA is Staking {\\n    using SafeMath for uint256;\\n\\n    enum Status {NotVerified, Respected, NotRespected}\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    //\\n    string public ipfsHash;\\n    address public immutable messengerAddress;\\n    SLARegistry public slaRegistry;\\n    PeriodRegistry private immutable periodRegistry;\\n    SLORegistry private immutable sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    PeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    bytes32[] public extraData;\\n\\n    bool private _breachedContract = false;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    /**\\n     * @dev event for SLI creation logging\\n     * @param timestamp 1. the time the SLI has been registered\\n     * @param sli 2. the value of the SLI\\n     * @param periodId 3. the id of the given period\\n     */\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev throws if called by any address other than the messenger contract.\\n     */\\n    modifier onlyMessenger() {\\n        require(\\n            msg.sender == messengerAddress,\\n            \\\"only messenger\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called by any address other than the messenger contract.\\n     */\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            \\\"only SLARegistry\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called with an amount less or equal to zero.\\n     */\\n    modifier notZero(uint256 _amount) {\\n        require(_amount > 0, \\\"amount cant be 0\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param _owner 1. -\\n     * @param _ipfsHash 3. -\\n     * @param _messengerAddress 3. -\\n     * @param _initialPeriodId 4. -\\n     * @param _finalPeriodId 4. -\\n     * @param _periodType 5. -\\n     * @param _whitelisted 8. -\\n     * @param _extraData 9. -\\n     * @param _slaID 10. -\\n     */\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        PeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        bytes32[] memory _extraData,\\n        uint64 _leverage\\n    )\\n        public\\n        Staking(\\n            SLARegistry(msg.sender),\\n            _periodType,\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        messengerAddress = _messengerAddress;\\n        slaRegistry = SLARegistry(msg.sender);\\n        periodRegistry = slaRegistry.periodRegistry();\\n        sloRegistry = slaRegistry.sloRegistry();\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        extraData = _extraData;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    /**\\n     * @dev external function to register SLI's and check them against the SLORegistry\\n     * @param _sli 1. the value of the SLI to check\\n     * @param _periodId 2. the id of the given period\\n     */\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n        (uint256 sloValue, ) = sloRegistry.registeredSLO(address(this));\\n        if (sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            uint256 precision = 10000;\\n            uint256 deviation =\\n                _sli.sub(sloValue).mul(precision).div(\\n                    _sli.add(sloValue).div(2)\\n                );\\n            uint256 normalizedPeriodId = _periodId.sub(initialPeriodId).add(1);\\n            uint256 rewardPercentage =\\n                deviation.mul(normalizedPeriodId).div(\\n                    finalPeriodId - initialPeriodId + 1\\n                );\\n            _setRespectedPeriodReward(_periodId, rewardPercentage, precision);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUsersCompensation(_periodId);\\n            _breachedContract = true;\\n        }\\n    }\\n\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        if (_periodId < initialPeriodId) return false;\\n        if (_periodId > finalPeriodId) return false;\\n        return true;\\n    }\\n\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) =\\n            periodRegistry.getPeriodStartAndEnd(periodType, finalPeriodId);\\n        return\\n            _breachedContract == true ||\\n            (block.timestamp >= endOfLastValidPeriod &&\\n                periodSLIs[finalPeriodId].status != Status.NotVerified);\\n    }\\n\\n    /**\\n     *@dev stake _amount tokens into the _token contract\\n     *@param _amount 1. amount to be staked\\n     *@param _token 2. address of the ERC to be staked\\n     */\\n\\n    function stakeTokens(uint256 _amount, address _token)\\n        external\\n        notZero(_amount)\\n    {\\n        bool isContractFinished = contractFinished();\\n        require(\\n            !isContractFinished,\\n            \\\"finished contract\\\"\\n        );\\n        _stake(_amount, _token);\\n        emit Stake(_token, nextVerifiablePeriod, msg.sender, _amount);\\n        StakeRegistry stakeRegistry = slaRegistry.stakeRegistry();\\n        stakeRegistry.registerStakedSla(msg.sender);\\n    }\\n\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n        notZero(_amount)\\n    {\\n        bool isContractFinished = contractFinished();\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawProviderTokens(_amount, _tokenAddress, isContractFinished);\\n    }\\n\\n    /**\\n     *@dev withdraw _amount tokens from the _token contract\\n     *@param _amount 1. amount to be staked\\n     *@param _tokenAddress 2. address of the ERC to be staked\\n     */\\n\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n        notZero(_amount)\\n    {\\n        if (msg.sender != owner()) {\\n            bool isContractFinished = contractFinished();\\n            require(isContractFinished, \\\"not finished contract\\\");\\n        }\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawUserTokens(_amount, _tokenAddress);\\n    }\\n\\n    function getStakersLength() external view returns (uint256) {\\n        return stakers.length;\\n    }\\n\\n    function breachedContract() external view returns (bool) {\\n        return _breachedContract;\\n    }\\n}\\n\",\"keccak256\":\"0xe81d3147dc97ac9d343afbc4df4b35517962806395f0c9d62865e221de4ef81b\"},\"@stacktical/dsla-protocol/contracts/SLARegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SLA.sol\\\";\\nimport \\\"./SLORegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./MessengerRegistry.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./messenger/IMessenger.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract SLARegistry {\\n    using SafeMath for uint256;\\n\\n    /// @dev SLO registry\\n    SLORegistry public sloRegistry;\\n    /// @dev Periods registry\\n    PeriodRegistry public periodRegistry;\\n    /// @dev Messengers registry\\n    MessengerRegistry public messengerRegistry;\\n    /// @dev Stake registry\\n    StakeRegistry public stakeRegistry;\\n    /// @dev stores the addresses of created SLAs\\n    SLA[] public SLAs;\\n    /// @dev stores the indexes of service level agreements owned by an user\\n    mapping(address => uint256[]) private userToSLAIndexes;\\n    /// @dev to check if registered SLA\\n    mapping(address => bool) private registeredSLAs;\\n    // value to lock past periods on SLA deployment\\n    bool public immutable checkPastPeriod;\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param owner 2. The address of the owner of the service level agreement\\n     */\\n    event SLACreated(SLA indexed sla, address indexed owner);\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param periodId 1. -\\n     * @param sla 2. -\\n     * @param caller 3. -\\n     */\\n    event SLIRequested(\\n        uint256 periodId,\\n        address indexed sla,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param sla 1. -\\n     * @param caller 2. -\\n     */\\n    event ReturnLockedValue(address indexed sla, address indexed caller);\\n\\n    /**\\n     * @dev constructor\\n     * @param _sloRegistry 1. SLO Registry\\n     * @param _periodRegistry 2. Periods registry\\n     * @param _messengerRegistry 3. Messenger registry\\n     * @param _stakeRegistry 4. Stake registry\\n     * @param _checkPastPeriod 5. -\\n     */\\n    constructor(\\n        SLORegistry _sloRegistry,\\n        PeriodRegistry _periodRegistry,\\n        MessengerRegistry _messengerRegistry,\\n        StakeRegistry _stakeRegistry,\\n        bool _checkPastPeriod\\n    ) public {\\n        sloRegistry = _sloRegistry;\\n        sloRegistry.setSLARegistry();\\n        periodRegistry = _periodRegistry;\\n        stakeRegistry = _stakeRegistry;\\n        stakeRegistry.setSLARegistry();\\n        messengerRegistry = _messengerRegistry;\\n        messengerRegistry.setSLARegistry();\\n        checkPastPeriod = _checkPastPeriod;\\n    }\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _ipfsHash 3. -\\n     * @param _periodType 4. -\\n     * @param _initialPeriodId 5. -\\n     * @param _finalPeriodId 6. -\\n     * @param _messengerAddress 7. -\\n     * @param _whitelisted 8. -\\n     * @param _extraData 9. -\\n     * @param _leverage 10. -\\n     */\\n    function createSLA(\\n        uint256 _sloValue,\\n        SLORegistry.SLOType _sloType,\\n        bool _whitelisted,\\n        address _messengerAddress,\\n        PeriodRegistry.PeriodType _periodType,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        string memory _ipfsHash,\\n        bytes32[] memory _extraData,\\n        uint64 _leverage\\n    ) public {\\n        bool validPeriod =\\n            periodRegistry.isValidPeriod(_periodType, _initialPeriodId);\\n        require(validPeriod, \\\"first period id invalid\\\");\\n        validPeriod = periodRegistry.isValidPeriod(_periodType, _finalPeriodId);\\n        require(validPeriod, \\\"final period id invalid\\\");\\n        bool initializedPeriod =\\n            periodRegistry.isInitializedPeriod(_periodType);\\n        require(initializedPeriod, \\\"period type not initialized\\\");\\n        require(\\n            _finalPeriodId >= _initialPeriodId,\\n            \\\"invalid finalPeriodId/initialPeriodId\\\"\\n        );\\n\\n        if (checkPastPeriod) {\\n            bool periodHasStarted =\\n                periodRegistry.periodHasStarted(_periodType, _initialPeriodId);\\n            require(!periodHasStarted, \\\"past period\\\");\\n        }\\n        bool registeredMessenger =\\n            messengerRegistry.registeredMessengers(_messengerAddress);\\n        require(registeredMessenger == true, \\\"messenger not registered\\\");\\n\\n        SLA sla =\\n            new SLA(\\n                msg.sender,\\n                _whitelisted,\\n                _periodType,\\n                _messengerAddress,\\n                _initialPeriodId,\\n                _finalPeriodId,\\n                uint128(SLAs.length),\\n                _ipfsHash,\\n                _extraData,\\n                _leverage\\n            );\\n\\n        sloRegistry.registerSLO(_sloValue, _sloType, address(sla));\\n        stakeRegistry.lockDSLAValue(\\n            msg.sender,\\n            address(sla),\\n            _finalPeriodId - _initialPeriodId + 1\\n        );\\n        SLAs.push(sla);\\n        registeredSLAs[address(sla)] = true;\\n        uint256 index = SLAs.length.sub(1);\\n        userToSLAIndexes[msg.sender].push(index);\\n        emit SLACreated(sla, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Gets SLI information for the specified SLA and SLO\\n     * @param _periodId 1. id of the period\\n     * @param _sla 2. SLA Address\\n     * @param _ownerApproval 3. if approval by owner or msg.sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        SLA _sla,\\n        bool _ownerApproval\\n    ) public {\\n        require(isRegisteredSLA(address(_sla)), \\\"invalid SLA\\\");\\n        require(_periodId == _sla.nextVerifiablePeriod(), \\\"not nextVerifiablePeriod\\\");\\n        (, , SLA.Status status) = _sla.periodSLIs(_periodId);\\n        require(status == SLA.Status.NotVerified, \\\"invalid SLA status\\\");\\n        bool breachedContract = _sla.breachedContract();\\n        require(!breachedContract, \\\"breached contract\\\");\\n        bool slaAllowedPeriodId = _sla.isAllowedPeriod(_periodId);\\n        require(slaAllowedPeriodId, \\\"invalid period Id\\\");\\n        PeriodRegistry.PeriodType slaPeriodType = _sla.periodType();\\n        bool periodFinished =\\n            periodRegistry.periodIsFinished(slaPeriodType, _periodId);\\n        require(periodFinished, \\\"period unfinished\\\");\\n        address slaMessenger = _sla.messengerAddress();\\n        SLIRequested(_periodId, address(_sla), msg.sender);\\n        IMessenger(slaMessenger).requestSLI(\\n            _periodId,\\n            address(_sla),\\n            _ownerApproval,\\n            msg.sender\\n        );\\n        stakeRegistry.distributeVerificationRewards(\\n            address(_sla),\\n            msg.sender,\\n            _periodId\\n        );\\n    }\\n\\n    function returnLockedValue(SLA _sla) public {\\n        require(isRegisteredSLA(address(_sla)), \\\"invalid SLA\\\");\\n        require(msg.sender == _sla.owner(), \\\"msg.sender not owner\\\");\\n        uint256 lastValidPeriodId = _sla.finalPeriodId();\\n        PeriodRegistry.PeriodType periodType = _sla.periodType();\\n        (, uint256 endOfLastValidPeriod) =\\n            periodRegistry.getPeriodStartAndEnd(periodType, lastValidPeriodId);\\n\\n        (, , SLA.Status lastPeriodStatus) = _sla.periodSLIs(lastValidPeriodId);\\n        require(\\n            _sla.breachedContract() ||\\n                (block.timestamp >= endOfLastValidPeriod &&\\n                    lastPeriodStatus != SLA.Status.NotVerified),\\n            \\\"not finished contract\\\"\\n        );\\n        ReturnLockedValue(address(_sla), msg.sender);\\n        stakeRegistry.returnLockedValue(address(_sla));\\n    }\\n\\n    /**\\n     * @dev function to declare this SLARegistry contract as SLARegistry of _messengerAddress\\n     * @param _messengerAddress 1. address of the messenger\\n     */\\n\\n    function registerMessenger(\\n        address _messengerAddress,\\n        string memory _specificationUrl\\n    ) public {\\n        IMessenger(_messengerAddress).setSLARegistry();\\n        messengerRegistry.registerMessenger(\\n            msg.sender,\\n            _messengerAddress,\\n            _specificationUrl\\n        );\\n    }\\n\\n    /**\\n     * @dev public view function that returns the service level agreements that\\n     * the given user is the owner of\\n     * @param _user Address of the user for which to return the service level\\n     * agreements\\n     * @return array of SLAs\\n     */\\n    function userSLAs(address _user) public view returns (SLA[] memory) {\\n        uint256 count = userToSLAIndexes[_user].length;\\n        SLA[] memory SLAList = new SLA[](count);\\n        uint256[] memory userSLAIndexes = userToSLAIndexes[_user];\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            SLAList[i] = (SLAs[userSLAIndexes[i]]);\\n        }\\n\\n        return (SLAList);\\n    }\\n\\n    /**\\n     * @dev public view function that returns all the service level agreements\\n     * @return SLA[] array of SLAs\\n     */\\n    function allSLAs() public view returns (SLA[] memory) {\\n        return (SLAs);\\n    }\\n\\n    /**\\n     * @dev public view function that returns true if _slaAddress was deployed using this SLARegistry\\n     * @param _slaAddress address of the SLA to be checked\\n     */\\n    function isRegisteredSLA(address _slaAddress) public view returns (bool) {\\n        return registeredSLAs[_slaAddress];\\n    }\\n}\\n\",\"keccak256\":\"0x8ddfd6a70b8981c9773d793e4fa2733be6dbcba3c8b722210c0084d10472d979\"},\"@stacktical/dsla-protocol/contracts/SLORegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SLORegistry\\n * @dev SLORegistry is a contract for handling creation of service level\\n * objectives and querying those service level objectives\\n */\\ncontract SLORegistry {\\n    enum SLOType {\\n        EqualTo,\\n        NotEqualTo,\\n        SmallerThan,\\n        SmallerOrEqualTo,\\n        GreaterThan,\\n        GreaterOrEqualTo\\n    }\\n\\n    struct SLO {\\n        uint256 sloValue;\\n        SLOType sloType;\\n    }\\n    /**\\n     * @dev SLO Registered event\\n     * @param sla 1. -\\n     * @param sloValue 2. -\\n     * @param sloType 3. -\\n     */\\n    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\\n\\n    address private slaRegistry;\\n    mapping(address => SLO) public registeredSLO;\\n\\n    modifier onlySLARegistry {\\n        require(\\n            msg.sender == slaRegistry,\\n            \\\"Should only be called using the SLARegistry contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function setSLARegistry() public {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev public function for creating service level objectives\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _slaAddress 3. -\\n     */\\n    function registerSLO(\\n        uint256 _sloValue,\\n        SLOType _sloType,\\n        address _slaAddress\\n    ) public onlySLARegistry {\\n        registeredSLO[_slaAddress] = SLO({\\n            sloValue: _sloValue,\\n            sloType: _sloType\\n        });\\n        emit SLORegistered(_slaAddress, _sloValue, _sloType);\\n    }\\n\\n    /**\\n     * @dev external view function to check a value against the SLO\\n     * @param _value The SLI value to check against the SL\\n     * @return boolean with the SLO honored state\\n     */\\n    function isRespected(uint256 _value, address _slaAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        SLO memory slo = registeredSLO[_slaAddress];\\n        SLOType sloType = slo.sloType;\\n        uint256 sloValue = slo.sloValue;\\n\\n        if (sloType == SLOType.EqualTo) {\\n            return _value == sloValue;\\n        }\\n\\n        if (sloType == SLOType.NotEqualTo) {\\n            return _value != sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerThan) {\\n            return _value < sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerOrEqualTo) {\\n            return _value <= sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterThan) {\\n            return _value > sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterOrEqualTo) {\\n            return _value >= sloValue;\\n        }\\n        revert(\\\"isRespected wasn't executed properly\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x166ea577929cae495bf61740ca14f19988000cedf7360d6fc31b879a0c805a7c\"},\"@stacktical/dsla-protocol/contracts/StakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./SLA.sol\\\";\\nimport \\\"./messenger/IMessenger.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\n/**\\n * @title StakeRegistry\\n * @dev StakeRegistry is a contract to register the staking activity of the platform, along\\n with controlling certain admin privileged parameters\\n */\\ncontract StakeRegistry is Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev struct to return on getActivePool function.\\n    struct ActivePool {\\n        address SLAAddress;\\n        uint256 stake;\\n        string assetName;\\n        address assetAddress;\\n    }\\n\\n    struct LockedValue {\\n        uint256 lockedValue;\\n        uint256 slaPeriodIdsLength;\\n        uint256 dslaDepositByPeriod;\\n        uint256 dslaPlatformReward;\\n        uint256 dslaMessengerReward;\\n        uint256 dslaUserReward;\\n        uint256 dslaBurnedByVerification;\\n        mapping(uint256 => bool) verifiedPeriods;\\n    }\\n\\n    address public DSLATokenAddress;\\n    SLARegistry public slaRegistry;\\n\\n    //______ onlyOwner modifiable parameters ______\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\\n    uint256 private _DSLAburnRate = 3;\\n    /// @dev (ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\\n    mapping(address => LockedValue) public slaLockedValue;\\n    /// @dev DSLA deposit by period to create SLA\\n    uint256 private _dslaDepositByPeriod = 1000 ether;\\n    /// @dev DSLA rewarded to the foundation\\n    uint256 private _dslaPlatformReward = 250 ether;\\n    /// @dev DSLA rewarded to the Messenger creator\\n    uint256 private _dslaMessengerReward = 250 ether;\\n    /// @dev DSLA rewarded to user calling the period verification\\n    uint256 private _dslaUserReward = 250 ether;\\n    /// @dev DSLA burned after every period verification\\n    uint256 private _dslaBurnedByVerification = 250 ether;\\n    /// @dev max token length for allowedTokens array of Staking contracts\\n    uint256 private _maxTokenLength = 1;\\n    /// @dev max times of hedge leverage\\n    uint64 private _maxLeverage = 100;\\n\\n    /// @dev array with the allowed tokens addresses of the StakeRegistry\\n    address[] public allowedTokens;\\n\\n    /// @dev (userAddress => SLA[]) with user staked SLAs to get tokenPool\\n    mapping(address => SLA[]) public userStakedSlas;\\n\\n    /**\\n     * @dev event to log a verifiation reward distributed\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param requester 2. -\\n     * @param userReward 3. -\\n     * @param platformReward 4. -\\n     * @param messengerReward 5. -\\n     * @param burnedDSLA 6. -\\n     */\\n    event VerificationRewardDistributed(\\n        address indexed sla,\\n        address indexed requester,\\n        uint256 userReward,\\n        uint256 platformReward,\\n        uint256 messengerReward,\\n        uint256 burnedDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param DSLAburnRate 1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\\n     *@param dslaDepositByPeriod 2. DSLA deposit by period to create SLA\\n     *@param dslaPlatformReward 3. DSLA rewarded to Stacktical team\\n     *@param dslaUserReward 4. DSLA rewarded to user calling the period verification\\n     *@param dslaBurnedByVerification 5. DSLA burned after every period verification\\n     */\\n    event StakingParametersModified(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n\\n    event LockedValueReturned(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param dTokenAddress 1. -\\n     *@param sla 2. -\\n     *@param name 3. -\\n     *@param symbol 4. -\\n     */\\n    event DTokenCreated(\\n        address indexed dTokenAddress,\\n        address indexed sla,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n    event ValueLocked(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param _dslaTokenAddress 1. DSLA Token\\n     */\\n    constructor(address _dslaTokenAddress) public {\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                    .add(_dslaMessengerReward)\\n                    .add(_dslaUserReward)\\n                    .add(_dslaBurnedByVerification),\\n            \\\"Staking parameters should match on summation\\\"\\n        );\\n        DSLATokenAddress = _dslaTokenAddress;\\n        allowedTokens.push(_dslaTokenAddress);\\n    }\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            \\\"Can only be called by SLARegistry\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        slaRegistry = SLARegistry(msg.sender);\\n    }\\n\\n    /**\\n     *@dev add a token to ve allowed for staking\\n     *@param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        require(!isAllowedToken(_tokenAddress), \\\"token already added\\\");\\n        allowedTokens.push(_tokenAddress);\\n    }\\n\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev public view function that returns true if the _owner has staked on _sla\\n     *@param _user 1. address to check\\n     *@param _sla 2. sla to check\\n     *@return bool, true if _sla was staked by _user\\n     */\\n\\n    function slaWasStakedByUser(address _user, address _sla)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < userStakedSlas[_user].length; index++) {\\n            if (address(userStakedSlas[_user][index]) == _sla) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev register the sending SLA contract as staked by _owner\\n     *@param _owner 1. SLA contract to stake\\n     */\\n    function registerStakedSla(address _owner) external returns (bool) {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            \\\"Only for registered SLAs\\\"\\n        );\\n        if (!slaWasStakedByUser(_owner, msg.sender)) {\\n            userStakedSlas[_owner].push(SLA(msg.sender));\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     *@dev to create dTokens for staking\\n     *@param _name 1. token name\\n     *@param _symbol 2. token symbol\\n     */\\n    function createDToken(string calldata _name, string calldata _symbol)\\n        external\\n        returns (address)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            \\\"Only for registered SLAs\\\"\\n        );\\n        ERC20PresetMinterPauser dToken =\\n            new ERC20PresetMinterPauser(_name, _symbol);\\n        dToken.grantRole(dToken.MINTER_ROLE(), msg.sender);\\n        emit DTokenCreated(address(dToken), msg.sender, _name, _symbol);\\n        return address(dToken);\\n    }\\n\\n    function lockDSLAValue(\\n        address _slaOwner,\\n        address _sla,\\n        uint256 _periodIdsLength\\n    ) external onlySLARegistry nonReentrant {\\n        uint256 lockedValue = _dslaDepositByPeriod.mul(_periodIdsLength);\\n        ERC20(DSLATokenAddress).safeTransferFrom(\\n            _slaOwner,\\n            address(this),\\n            lockedValue\\n        );\\n        slaLockedValue[_sla] = LockedValue({\\n            lockedValue: lockedValue,\\n            slaPeriodIdsLength: _periodIdsLength,\\n            dslaDepositByPeriod: _dslaDepositByPeriod,\\n            dslaPlatformReward: _dslaPlatformReward,\\n            dslaMessengerReward: _dslaMessengerReward,\\n            dslaUserReward: _dslaUserReward,\\n            dslaBurnedByVerification: _dslaBurnedByVerification\\n        });\\n        emit ValueLocked(_sla, _slaOwner, lockedValue);\\n    }\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external onlySLARegistry nonReentrant {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        require(\\n            !_lockedValue.verifiedPeriods[_periodId],\\n            \\\"Period rewards already distributed\\\"\\n        );\\n        _lockedValue.verifiedPeriods[_periodId] = true;\\n        _lockedValue.lockedValue = _lockedValue.lockedValue.sub(\\n            _lockedValue.dslaDepositByPeriod\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            owner(),\\n            _lockedValue.dslaPlatformReward\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            IMessenger(SLA(_sla).messengerAddress()).owner(),\\n            _lockedValue.dslaMessengerReward\\n        );\\n        _burnDSLATokens(_lockedValue.dslaBurnedByVerification);\\n        emit VerificationRewardDistributed(\\n            _sla,\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward,\\n            _lockedValue.dslaPlatformReward,\\n            _lockedValue.dslaMessengerReward,\\n            _lockedValue.dslaBurnedByVerification\\n        );\\n    }\\n\\n    function returnLockedValue(address _sla)\\n        external\\n        onlySLARegistry\\n        nonReentrant\\n    {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        uint256 remainingBalance = _lockedValue.lockedValue;\\n        require(remainingBalance > 0, \\\"locked value is empty\\\");\\n        _lockedValue.lockedValue = 0;\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            SLA(_sla).owner(),\\n            remainingBalance\\n        );\\n        emit LockedValueReturned(_sla, SLA(_sla).owner(), remainingBalance);\\n    }\\n\\n    function _burnDSLATokens(uint256 _amount) internal {\\n        bytes4 BURN_SELECTOR = bytes4(keccak256(bytes(\\\"burn(uint256)\\\")));\\n        (bool _success, ) =\\n            DSLATokenAddress.call(\\n                abi.encodeWithSelector(BURN_SELECTOR, _amount)\\n            );\\n        require(_success, \\\"DSLA burn process was not successful\\\");\\n    }\\n\\n    /**\\n     * @dev returns the active pools owned by a user.\\n     * @param _slaOwner 1. owner of the active pool\\n     * @return ActivePool[], array of structs: {SLAAddress,stake,assetName}\\n     */\\n    function getActivePool(address _slaOwner)\\n        external\\n        view\\n        returns (ActivePool[] memory)\\n    {\\n        bytes4 NAME_SELECTOR = bytes4(keccak256(bytes(\\\"name()\\\")));\\n        uint256 stakeCounter = 0;\\n        // Count the stakes of the user, checking every SLA staked\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = SLA(userStakedSlas[_slaOwner][index]);\\n            stakeCounter = stakeCounter.add(\\n                currentSLA.getAllowedTokensLength()\\n            );\\n        }\\n\\n        ActivePool[] memory activePools = new ActivePool[](stakeCounter);\\n        // to insert on activePools array\\n        uint256 stakePosition = 0;\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = userStakedSlas[_slaOwner][index];\\n            for (\\n                uint256 tokenIndex = 0;\\n                tokenIndex < currentSLA.getAllowedTokensLength();\\n                tokenIndex++\\n            ) {\\n                (address tokenAddress, uint256 stake) =\\n                    currentSLA.getTokenStake(_slaOwner, tokenIndex);\\n                (, bytes memory tokenNameBytes) =\\n                    tokenAddress.staticcall(\\n                        abi.encodeWithSelector(NAME_SELECTOR)\\n                    );\\n                ActivePool memory currentActivePool =\\n                    ActivePool({\\n                        SLAAddress: address(currentSLA),\\n                        stake: stake,\\n                        assetName: string(tokenNameBytes),\\n                        assetAddress: tokenAddress\\n                    });\\n                activePools[stakePosition] = currentActivePool;\\n                stakePosition = stakePosition.add(1);\\n            }\\n        }\\n        return activePools;\\n    }\\n\\n    //_______ OnlyOwner functions _______\\n    function setStakingParameters(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage\\n    ) external onlyOwner {\\n        _DSLAburnRate = DSLAburnRate;\\n        _dslaDepositByPeriod = dslaDepositByPeriod;\\n        _dslaPlatformReward = dslaPlatformReward;\\n        _dslaMessengerReward = dslaMessengerReward;\\n        _dslaUserReward = dslaUserReward;\\n        _dslaBurnedByVerification = dslaBurnedByVerification;\\n        _maxTokenLength = maxTokenLength;\\n        _maxLeverage = maxLeverage;\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                    .add(_dslaMessengerReward)\\n                    .add(_dslaUserReward)\\n                    .add(_dslaBurnedByVerification),\\n            \\\"Staking parameters should match on summation\\\"\\n        );\\n        emit StakingParametersModified(\\n            DSLAburnRate,\\n            dslaDepositByPeriod,\\n            dslaPlatformReward,\\n            dslaMessengerReward,\\n            dslaUserReward,\\n            dslaBurnedByVerification,\\n            maxTokenLength,\\n            maxLeverage\\n        );\\n    }\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage\\n        )\\n    {\\n        DSLAburnRate = _DSLAburnRate;\\n        dslaDepositByPeriod = _dslaDepositByPeriod;\\n        dslaPlatformReward = _dslaPlatformReward;\\n        dslaMessengerReward = _dslaMessengerReward;\\n        dslaUserReward = _dslaUserReward;\\n        dslaBurnedByVerification = _dslaBurnedByVerification;\\n        maxTokenLength = _maxTokenLength;\\n        maxLeverage = _maxLeverage;\\n    }\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return slaLockedValue[_sla].verifiedPeriods[_periodId];\\n    }\\n}\\n\",\"keccak256\":\"0x41b67b06c79c7215a5ae33d736093e5312c8eb78a2574524e043e8de02871b92\"},\"@stacktical/dsla-protocol/contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\ncontract Staking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev StakeRegistry contract\\n    StakeRegistry private stakeRegistry;\\n    /// @dev SLARegistry contract\\n    PeriodRegistry private immutable periodRegistry;\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providerPool;\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public usersPool;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => ERC20PresetMinterPauser) public duTokenRegistry;\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => ERC20PresetMinterPauser) public dpTokenRegistry;\\n\\n    /// @dev address[] of the stakers of the SLA contract\\n    address[] public stakers;\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n    /// @dev DSLA token address to burn fees\\n    address public immutable dslaTokenAddress;\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev PeriodRegistry period type of the SLA contract\\n    PeriodRegistry.PeriodType private immutable periodType;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token) == true, \\\"token not allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted {\\n        if (whitelistedContract == true) {\\n            require(whitelist[msg.sender] == true, \\\"not whitelisted\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev event for provider reward log\\n     * @param periodId 1. id of the period\\n     * @param tokenAddress 2. address of the token\\n     * @param rewardPercentage 3. reward percentage for the provider\\n     * @param rewardPercentagePrecision 4. reward percentage for the provider\\n     * @param rewardAmount 5. amount rewarded\\n     */\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 usersStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    /**\\n     *@param _slaRegistryAddress 1. period type of the SLA\\n     *@param _periodType 3. period type of the SLA\\n     *@param _whitelistedContract 5. enables the white list feature\\n     *@param _slaID 6. identifies the SLA to uniquely to emit dTokens\\n     */\\n    constructor(\\n        SLARegistry _slaRegistry,\\n        PeriodRegistry.PeriodType _periodType,\\n        bool _whitelistedContract,\\n        uint128 _slaID,\\n        uint64 _leverage,\\n        address _contractOwner\\n    ) public {\\n        stakeRegistry = _slaRegistry.stakeRegistry();\\n        periodRegistry = _slaRegistry.periodRegistry();\\n        periodType = _periodType;\\n        whitelistedContract = _whitelistedContract;\\n        (uint256 _DSLAburnRate, , , , , , , uint64 _maxLeverage) =\\n            stakeRegistry.getStakingParameters();\\n        dslaTokenAddress = stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[_contractOwner] = true;\\n        slaID = _slaID;\\n        require(\\n            _leverage <= _maxLeverage && _leverage >= 1,\\n            \\\"incorrect leverage\\\"\\n        );\\n        leverage = _leverage;\\n    }\\n\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == false) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == true) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *@dev add a token to ve allowed for staking\\n     *@param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, ) =\\n            stakeRegistry.getStakingParameters();\\n        require(!isAllowedToken(_tokenAddress), \\\"already added\\\");\\n        require(\\n            stakeRegistry.isAllowedToken(_tokenAddress),\\n            \\\"not allowed by SLARegistry\\\"\\n        );\\n        allowedTokens.push(_tokenAddress);\\n        require(\\n            maxTokenLength >= allowedTokens.length,\\n            \\\"max token length\\\"\\n        );\\n        string memory dTokenID = StringUtils.uintToStr(slaID);\\n        string memory duTokenName =\\n            string(abi.encodePacked(\\\"DSLA-SHORT-\\\", dTokenID));\\n        string memory duTokenSymbol =\\n            string(abi.encodePacked(\\\"DSLA-SP-\\\", dTokenID));\\n        string memory dpTokenName =\\n            string(abi.encodePacked(\\\"DSLA-LONG-\\\", dTokenID));\\n        string memory dpTokenSymbol =\\n            string(abi.encodePacked(\\\"DSLA-LP-\\\", dTokenID));\\n\\n        ERC20PresetMinterPauser duToken =\\n            ERC20PresetMinterPauser(\\n                stakeRegistry.createDToken(duTokenName, duTokenSymbol)\\n            );\\n        ERC20PresetMinterPauser dpToken =\\n            ERC20PresetMinterPauser(\\n                stakeRegistry.createDToken(dpTokenName, dpTokenSymbol)\\n            );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenName,\\n            address(duToken),\\n            duTokenName,\\n            duTokenName\\n        );\\n    }\\n\\n    /**\\n     *@dev increase the amount staked per token\\n     *@param _amount 1. amount to be staked\\n     *@param _tokenAddress 2. address of the token\\n     *@notice providers can stake at any time\\n     *@notice users can stake at any time but no more than provider pool\\n     */\\n    function _stake(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n        onlyWhitelisted\\n    {\\n        ERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        //duTokens\\n        if (msg.sender != owner()) {\\n            (uint256 providerStake, uint256 usersStake) =\\n                (providerPool[_tokenAddress], usersPool[_tokenAddress]);\\n            require(\\n                usersStake.add(_amount).mul(leverage) <= providerStake,\\n                \\\"incorrect user stake\\\"\\n            );\\n            ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // if there's no minted tokens, then create 1-1 proportion\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = usersPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDUTokens = _amount.mul(p0).div(t0);\\n                duToken.mint(msg.sender, mintedDUTokens);\\n            }\\n            usersPool[_tokenAddress] = usersPool[_tokenAddress].add(_amount);\\n            //dpTokens\\n        } else {\\n            ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = providerPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDPTokens = _amount.mul(p0).div(t0);\\n                dpToken.mint(msg.sender, mintedDPTokens);\\n            }\\n\\n            providerPool[_tokenAddress] = providerPool[_tokenAddress].add(\\n                _amount\\n            );\\n        }\\n\\n        if (registeredStakers[msg.sender] == false) {\\n            registeredStakers[msg.sender] = true;\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     *@dev sets the provider reward\\n     *@notice it calculates the usersStake and calculates the provider reward from it.\\n     * @param _periodId 1. id of the period\\n     * @param _rewardPercentage to calculate the provider reward\\n     * @param _precision used to avoid getting 0 after division in the SLA's registerSLI function\\n     */\\n    function _setRespectedPeriodReward(\\n        uint256 _periodId,\\n        uint256 _rewardPercentage,\\n        uint256 _precision\\n    ) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 reward = usersStake.mul(_rewardPercentage).div(_precision);\\n\\n            usersPool[tokenAddress] = usersPool[tokenAddress].sub(reward);\\n\\n            providerPool[tokenAddress] = providerPool[tokenAddress].add(reward);\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev sets the users compensation pool\\n     *@notice it calculates the usersStake and calculates the users compensation from it\\n     */\\n    function _setUsersCompensation(uint256 _periodId) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 compensation = usersStake.mul(leverage);\\n            providerPool[tokenAddress] = providerPool[tokenAddress].sub(\\n                compensation\\n            );\\n            usersPool[tokenAddress] = usersPool[tokenAddress].add(compensation);\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersStake,\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev withdraw staked tokens. Only dpToken owners can withdraw,\\n     *@param _amount 1. amount to be withdrawn\\n     *@param _tokenAddress 2. address of the token\\n     *@param _contractFinished 3. contract finished\\n     */\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) {\\n        uint256 providerStake = providerPool[_tokenAddress];\\n        uint256 usersStake = usersPool[_tokenAddress];\\n        if (!_contractFinished) {\\n            require(\\n                providerStake.sub(_amount) >= usersStake.mul(leverage),\\n                \\\"incorrect withdraw\\\"\\n            );\\n        }\\n        ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n        uint256 p0 = dpToken.totalSupply();\\n        uint256 t0 = providerPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        // burnedDPTokens = _amount*p0/t0\\n        uint256 burnedDPTokens = _amount.mul(p0).div(t0);\\n        dpToken.burnFrom(msg.sender, burnedDPTokens);\\n        providerPool[_tokenAddress] = providerPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *@dev withdraw staked tokens. Only duToken owners can withdraw,\\n     *@param _amount 1. amount to be withdrawn\\n     *@param _tokenAddress 2. address of the token\\n     */\\n    function _withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n    {\\n        ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n        uint256 p0 = duToken.totalSupply();\\n        uint256 t0 = usersPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens\\n        // average for current period.\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        // burnedDUTokens = _amount*p0/t0\\n        uint256 burnedDUTokens = _amount.mul(p0).div(t0);\\n        duToken.burnFrom(msg.sender, burnedDUTokens);\\n        usersPool[_tokenAddress] = usersPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *@dev use this function to evaluate the length of the allowed tokens length\\n     *@return allowedTokens.length\\n     */\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    function getTokenStake(address _staker, uint256 _allowedTokenIndex)\\n        external\\n        view\\n        returns (address tokenAddress, uint256 stake)\\n    {\\n        address allowedTokenAddress = allowedTokens[_allowedTokenIndex];\\n        if (_staker == owner()) {\\n            return (allowedTokenAddress, providerPool[allowedTokenAddress]);\\n        } else {\\n            ERC20PresetMinterPauser dToken =\\n                duTokenRegistry[allowedTokenAddress];\\n            uint256 dTokenSupply = dToken.totalSupply();\\n            if (dTokenSupply == 0) {\\n                return (allowedTokenAddress, 0);\\n            }\\n            uint256 dTokenBalance = dToken.balanceOf(_staker);\\n            return (\\n                allowedTokenAddress,\\n                usersPool[allowedTokenAddress].mul(dTokenBalance).div(\\n                    dTokenSupply\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev checks in the allowedTokens array if there's a token with _tokenAddress value\\n     *@param _tokenAddress 1. token address to check exixtence\\n     *@return true if _tokenAddress exists in the allowedTokens array\\n     */\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x1e52742a77462f5971efbe6abc53059978851e7296df09eb3c122e51395758a0\"},\"@stacktical/dsla-protocol/contracts/StringUtils.sol\":{\"content\":\"// solhint-disable-line\\npragma solidity 0.6.6;\\n\\nlibrary StringUtils {\\n    function addressToString(address _address)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = \\\"0\\\";\\n        _string[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function bytes32ToStr(bytes32 _bytes32)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function bytesToUint(bytes calldata b)\\n        external\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /*\\n        ORACLIZE_API\\n        Copyright (c) 2015-2016 Oraclize SRL\\n        Copyright (c) 2016 Oraclize LTD\\n        Permission is hereby granted, free of charge, to any person obtaining a copy\\n        of this software and associated documentation files (the \\\"Software\\\"), to deal\\n        in the Software without restriction, including without limitation the rights\\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n        copies of the Software, and to permit persons to whom the Software is\\n        furnished to do so, subject to the following conditions:\\n        The above copyright notice and this permission notice shall be included in\\n        all copies or substantial portions of the Software.\\n        THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n        THE SOFTWARE.\\n    */\\n    function uintToStr(uint256 _i)\\n        external\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        uint256 number = _i;\\n        if (number == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = number;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (number != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (number % 10)));\\n            number /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xef54b83a8148b2a24e5afd756833b462dae48321ad8c144efa0e8bc108eb6bc2\"},\"@stacktical/dsla-protocol/contracts/messenger/IMessenger.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. id of the Chainlink request\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        virtual;\\n\\n    /**\\n     * @dev gets the messenger precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe711959ccf804e2402fccaf250f6fd261076a04dc13f65f1bbc26263f1300c21\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 9292,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "sloRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(SLORegistry)10097"
          },
          {
            "astId": 9294,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "periodRegistry",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(PeriodRegistry)8708"
          },
          {
            "astId": 9296,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "messengerRegistry",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(MessengerRegistry)8212"
          },
          {
            "astId": 9298,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "stakeRegistry",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(StakeRegistry)11072"
          },
          {
            "astId": 9301,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "SLAs",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_contract(SLA)9276)dyn_storage"
          },
          {
            "astId": 9306,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "userToSLAIndexes",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 9310,
            "contract": "@stacktical/dsla-protocol/contracts/SLARegistry.sol:SLARegistry",
            "label": "registeredSLAs",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_contract(SLA)9276)dyn_storage": {
            "base": "t_contract(SLA)9276",
            "encoding": "dynamic_array",
            "label": "contract SLA[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(MessengerRegistry)8212": {
            "encoding": "inplace",
            "label": "contract MessengerRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(PeriodRegistry)8708": {
            "encoding": "inplace",
            "label": "contract PeriodRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(SLA)9276": {
            "encoding": "inplace",
            "label": "contract SLA",
            "numberOfBytes": "20"
          },
          "t_contract(SLORegistry)10097": {
            "encoding": "inplace",
            "label": "contract SLORegistry",
            "numberOfBytes": "20"
          },
          "t_contract(StakeRegistry)11072": {
            "encoding": "inplace",
            "label": "contract StakeRegistry",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32",
            "value": "t_array(t_uint256)dyn_storage"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "methods": {}
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/chainlink/Oracle.sol\": {\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/Oracle.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/PreCoordinator.sol\\\";\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Oracle.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Oracle contract\\n * @notice Node operators can deploy this contract to fulfill requests sent to them\\n */\\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable, LinkTokenReceiver, WithdrawalInterface {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant public EXPIRY_TIME = 5 minutes;\\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n  // We initialize fields to 1 instead of 0 so that the first invocation\\n  // does not cost more gas.\\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\\n\\n  LinkTokenInterface internal LinkToken;\\n  mapping(bytes32 => bytes32) private commitments;\\n  mapping(address => bool) private authorizedNodes;\\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n  event OracleRequest(\\n    bytes32 indexed specId,\\n    address requester,\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddr,\\n    bytes4 callbackFunctionId,\\n    uint256 cancelExpiration,\\n    uint256 dataVersion,\\n    bytes data\\n  );\\n\\n  event CancelOracleRequest(\\n    bytes32 indexed requestId\\n  );\\n\\n  /**\\n   * @notice Deploy with the address of the LINK token\\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n   * @param _link The address of the LINK token\\n   */\\n  constructor(address _link)\\n    public\\n    Ownable()\\n  {\\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _specId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _dataVersion The specified data version\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256 _dataVersion,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n    onlyLINK()\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(commitments[requestId] == 0, \\\"Must use a unique ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 expiration = now.add(EXPIRY_TIME);\\n\\n    commitments[requestId] = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        expiration\\n      )\\n    );\\n\\n    emit OracleRequest(\\n      _specId,\\n      _sender,\\n      requestId,\\n      _payment,\\n      _callbackAddress,\\n      _callbackFunctionId,\\n      expiration,\\n      _dataVersion,\\n      _data);\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param _requestId The fulfillment request ID that must match the requester's\\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param _callbackAddress The callback address to call for fulfillment\\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\\n   * @param _data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration,\\n    bytes32 _data\\n  )\\n    external\\n    onlyAuthorizedNode\\n    override\\n    isValidRequest(_requestId)\\n    returns (bool)\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        _expiration\\n      )\\n    );\\n    require(commitments[_requestId] == paramsHash, \\\"Params do not match request ID\\\");\\n    withdrawableTokens = withdrawableTokens.add(_payment);\\n    delete commitments[_requestId];\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = _callbackAddress.call(abi.encodeWithSelector(_callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Use this to check if a node is authorized for fulfilling requests\\n   * @param _node The address of the Chainlink node\\n   * @return The authorization status of the node\\n   */\\n  function getAuthorizationStatus(address _node)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return authorizedNodes[_node];\\n  }\\n\\n  /**\\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n   * @param _node The address of the Chainlink node\\n   * @param _allowed Bool value to determine if the node can fulfill requests\\n   */\\n  function setFulfillmentPermission(address _node, bool _allowed)\\n    external\\n    override\\n    onlyOwner()\\n  {\\n    authorizedNodes[_node] = _allowed;\\n  }\\n\\n  /**\\n   * @notice Allows the node operator to withdraw earned LINK to a given address\\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n   * @param _recipient The address to send the LINK token to\\n   * @param _amount The amount to send (specified in wei)\\n   */\\n  function withdraw(address _recipient, uint256 _amount)\\n    external\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner\\n    hasAvailableFunds(_amount)\\n  {\\n    withdrawableTokens = withdrawableTokens.sub(_amount);\\n    assert(LinkToken.transfer(_recipient, _amount));\\n  }\\n\\n  /**\\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n   * @return The amount of withdrawable LINK on the contract\\n   */\\n  function withdrawable()\\n    external\\n    view\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner()\\n    returns (uint256)\\n  {\\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n  }\\n\\n  /**\\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\\n   * sent for the request back to the requester's address.\\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\\n   * Emits CancelOracleRequest event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _callbackFunc The requester's specified callback address\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        msg.sender,\\n        _callbackFunc,\\n        _expiration)\\n    );\\n    require(paramsHash == commitments[_requestId], \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(_expiration <= now, \\\"Request is not expired\\\");\\n\\n    delete commitments[_requestId];\\n    emit CancelOracleRequest(_requestId);\\n\\n    assert(LinkToken.transfer(msg.sender, _payment));\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken()\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    return address(LinkToken);\\n  }\\n\\n  // MODIFIERS\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param _amount The given amount to compare to `withdrawableTokens`\\n   */\\n  modifier hasAvailableFunds(uint256 _amount) {\\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \\\"Amount requested is greater than withdrawable balance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if request ID does not exist\\n   * @param _requestId The given request ID to check in stored `commitments`\\n   */\\n  modifier isValidRequest(bytes32 _requestId) {\\n    require(commitments[_requestId] != 0, \\\"Must have a valid requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\\n   */\\n  modifier onlyAuthorizedNode() {\\n    require(authorizedNodes[msg.sender] || msg.sender == owner(), \\\"Not an authorized node to fulfill requests\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != address(LinkToken), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/PreCoordinator.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./ChainlinkClient.sol\\\";\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./Median.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title PreCoordinator is a contract that builds on-chain service agreements\\n * using the current architecture of 1 request to 1 oracle contract.\\n * @dev This contract accepts requests as service agreement IDs and loops over\\n * the corresponding list of oracles to create distinct requests to each one.\\n */\\ncontract PreCoordinator is ChainlinkClient, Ownable, ChainlinkRequestInterface, LinkTokenReceiver {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant private MAX_ORACLE_COUNT = 45;\\n\\n  uint256 private globalNonce;\\n\\n  struct ServiceAgreement {\\n    uint256 totalPayment;\\n    uint256 minResponses;\\n    address[] oracles;\\n    bytes32[] jobIds;\\n    uint256[] payments;\\n  }\\n\\n  struct Requester {\\n    bytes4 callbackFunctionId;\\n    address sender;\\n    address callbackAddress;\\n    int256[] responses;\\n  }\\n\\n  // Service Agreement ID => ServiceAgreement\\n  mapping(bytes32 => ServiceAgreement) internal serviceAgreements;\\n  // Local Request ID => Service Agreement ID\\n  mapping(bytes32 => bytes32) internal serviceAgreementRequests;\\n  // Requester's Request ID => Requester\\n  mapping(bytes32 => Requester) internal requesters;\\n  // Local Request ID => Requester's Request ID\\n  mapping(bytes32 => bytes32) internal requests;\\n\\n  event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses);\\n  event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment);\\n  event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer);\\n  event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer);\\n  event ServiceAgreementDeleted(bytes32 indexed saId);\\n\\n  /**\\n   * @notice Deploy the contract with a specified address for the LINK\\n   * and Oracle contract addresses\\n   * @dev Sets the storage for the specified addresses\\n   * @param _link The address of the LINK token contract\\n   */\\n  constructor(address _link) public {\\n    if(_link == address(0)) {\\n      setPublicChainlinkToken();\\n    } else {\\n      setChainlinkToken(_link);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows the owner of the contract to create new service agreements\\n   * with multiple oracles. Each oracle will have their own Job ID and can have\\n   * their own payment amount.\\n   * @dev The globalNonce keeps service agreement IDs unique. Assume one cannot\\n   * create the max uint256 number of service agreements in the same block.\\n   * @param _minResponses The minimum number of responses before the requesting\\n   * contract is called with the response data.\\n   * @param _oracles The list of oracle contract addresses.\\n   * @param _jobIds The corresponding list of Job IDs.\\n   * @param _payments The corresponding list of payment amounts.\\n   */\\n  function createServiceAgreement(\\n    uint256 _minResponses,\\n    address[] calldata _oracles,\\n    bytes32[] calldata _jobIds,\\n    uint256[] calldata _payments\\n  )\\n    external returns (bytes32 saId)\\n  {\\n    require(_minResponses > 0, \\\"Min responses must be > 0\\\");\\n    require(_oracles.length == _jobIds.length && _oracles.length == _payments.length, \\\"Unmet length\\\");\\n    require(_oracles.length <= MAX_ORACLE_COUNT, \\\"Cannot have more than 45 oracles\\\");\\n    require(_oracles.length >= _minResponses, \\\"Invalid min responses\\\");\\n    uint256 totalPayment;\\n    for (uint i = 0; i < _payments.length; i++) {\\n      totalPayment = totalPayment.add(_payments[i]);\\n    }\\n    saId = keccak256(abi.encodePacked(globalNonce, now));\\n    globalNonce++; // yes, let it overflow\\n    serviceAgreements[saId] = ServiceAgreement(totalPayment, _minResponses, _oracles, _jobIds, _payments);\\n\\n    emit NewServiceAgreement(saId, totalPayment, _minResponses);\\n  }\\n\\n  /**\\n   * @notice This is a helper function to retrieve the details of a service agreement\\n   * by its given service agreement ID.\\n   * @dev This function is used instead of the public mapping to return the values\\n   * of the arrays: oracles, jobIds, and payments.\\n   */\\n  function getServiceAgreement(bytes32 _saId)\\n    external view returns\\n  (\\n    uint256 totalPayment,\\n    uint256 minResponses,\\n    address[] memory oracles,\\n    bytes32[] memory jobIds,\\n    uint256[] memory payments\\n  )\\n  {\\n    return\\n    (\\n      serviceAgreements[_saId].totalPayment,\\n      serviceAgreements[_saId].minResponses,\\n      serviceAgreements[_saId].oracles,\\n      serviceAgreements[_saId].jobIds,\\n      serviceAgreements[_saId].payments\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken() public view override returns (address) {\\n    return chainlinkTokenAddress();\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _saId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _saId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256,\\n    bytes calldata _data\\n  )\\n    external\\n    onlyLINK\\n    override\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    uint256 totalPayment = serviceAgreements[_saId].totalPayment;\\n    // this revert message does not bubble up\\n    require(_payment >= totalPayment, \\\"Insufficient payment\\\");\\n    bytes32 callbackRequestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(requesters[callbackRequestId].sender == address(0), \\\"Nonce already in-use\\\");\\n    requesters[callbackRequestId].callbackFunctionId = _callbackFunctionId;\\n    requesters[callbackRequestId].callbackAddress = _callbackAddress;\\n    requesters[callbackRequestId].sender = _sender;\\n    createRequests(_saId, callbackRequestId, _data);\\n    if (_payment > totalPayment) {\\n      uint256 overage = _payment.sub(totalPayment);\\n      LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n      assert(_link.transfer(_sender, overage));\\n    }\\n  }\\n\\n  /**\\n   * @dev Creates Chainlink requests to each oracle in the service agreement with the\\n   * same data payload supplied by the requester\\n   * @param _saId The service agreement ID\\n   * @param _incomingRequestId The requester-supplied request ID\\n   * @param _data The data payload (request parameters) to send to each oracle\\n   */\\n  function createRequests(bytes32 _saId, bytes32 _incomingRequestId, bytes memory _data) private {\\n    ServiceAgreement memory sa = serviceAgreements[_saId];\\n    require(sa.minResponses > 0, \\\"Invalid service agreement\\\");\\n    Chainlink.Request memory request;\\n    bytes32 outgoingRequestId;\\n    emit ServiceAgreementRequested(_saId, _incomingRequestId, sa.totalPayment);\\n    for (uint i = 0; i < sa.oracles.length; i++) {\\n      request = buildChainlinkRequest(sa.jobIds[i], address(this), this.chainlinkCallback.selector);\\n      request.setBuffer(_data);\\n      outgoingRequestId = sendChainlinkRequestTo(sa.oracles[i], request, sa.payments[i]);\\n      requests[outgoingRequestId] = _incomingRequestId;\\n      serviceAgreementRequests[outgoingRequestId] = _saId;\\n    }\\n  }\\n\\n  /**\\n   * @notice The fulfill method from requests created by this contract\\n   * @dev The recordChainlinkFulfillment protects this function from being called\\n   * by anyone other than the oracle address that the request was sent to\\n   * @param _requestId The ID that was generated for the request\\n   * @param _data The answer provided by the oracle\\n   */\\n  function chainlinkCallback(bytes32 _requestId, int256 _data)\\n    external\\n    recordChainlinkFulfillment(_requestId)\\n    returns (bool)\\n  {\\n    ServiceAgreement memory sa = serviceAgreements[serviceAgreementRequests[_requestId]];\\n    bytes32 cbRequestId = requests[_requestId];\\n    bytes32 saId = serviceAgreementRequests[_requestId];\\n    delete requests[_requestId];\\n    delete serviceAgreementRequests[_requestId];\\n    emit ServiceAgreementResponseReceived(saId, cbRequestId, msg.sender, _data);\\n    requesters[cbRequestId].responses.push(_data);\\n    Requester memory req = requesters[cbRequestId];\\n    if (req.responses.length == sa.oracles.length) delete requesters[cbRequestId];\\n    bool success = true;\\n    if (req.responses.length == sa.minResponses) {\\n      int256 result = Median.calculate(req.responses);\\n      emit ServiceAgreementAnswerUpdated(saId, cbRequestId, result);\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (success, ) = req.callbackAddress.call(abi.encodeWithSelector(req.callbackFunctionId, cbRequestId, result));\\n    }\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Allows the owner to withdraw any LINK balance on the contract\\n   * @dev The only valid case for there to be remaining LINK on this contract\\n   * is if a user accidentally sent LINK directly to this contract's address.\\n   */\\n  function withdrawLink() external onlyOwner {\\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(_link.transfer(msg.sender, _link.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n  }\\n\\n  /**\\n   * @notice Call this method if no response is received within 5 minutes\\n   * @param _requestId The ID that was generated for the request to cancel\\n   * @param _payment The payment specified for the request to cancel\\n   * @param _callbackFunctionId The bytes4 callback function ID specified for\\n   * the request to cancel\\n   * @param _expiration The expiration generated for the request to cancel\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 cbRequestId = requests[_requestId];\\n    delete requests[_requestId];\\n    delete serviceAgreementRequests[_requestId];\\n    Requester memory req = requesters[cbRequestId];\\n    require(req.sender == msg.sender, \\\"Only requester can cancel\\\");\\n    delete requesters[cbRequestId];\\n    cancelChainlinkRequest(_requestId, _payment, _callbackFunctionId, _expiration);\\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(_link.transfer(req.sender, _payment), \\\"Unable to transfer\\\");\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != chainlinkTokenAddress(), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract LinkTokenReceiver {\\n\\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\\n  uint256 constant private SELECTOR_LENGTH = 4;\\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param _sender Address of the sender\\n   * @param _amount Amount of LINK sent (specified in wei)\\n   * @param _data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes memory _data\\n  )\\n    public\\n    onlyLINK\\n    validRequestLength(_data)\\n    permittedFunctionsForLINK(_data)\\n  {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param _data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory _data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(_data, 32))\\n    }\\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \\\"Must use whitelisted functions\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given payload is less than needed to create a request\\n   * @param _data The request payload\\n   */\\n  modifier validRequestLength(bytes memory _data) {\\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion, // Currently unused, always \\\"1\\\"\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n  function getAuthorizationStatus(address node) external view returns (bool);\\n  function setFulfillmentPermission(address node, bool allowed) external;\\n  function withdraw(address recipient, uint256 amount) external;\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant internal LINK = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ARGS_VERSION = 1;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  ChainlinkRequestInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param _specId The Job Specification ID that the request will be created for\\n   * @param _callbackAddress The callback address that the response will be sent to\\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32)\\n  {\\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param _oracle The address of the oracle for the request\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32 requestId)\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    _req.nonce = requestCount;\\n    pendingRequests[requestId] = _oracle;\\n    emit ChainlinkRequested(requestId);\\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of LINK sent for the request\\n   * @param _callbackFunc The callback function specified for the request\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    internal\\n  {\\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkCancelled(_requestId);\\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param _oracle The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address _oracle) internal {\\n    oracle = ChainlinkRequestInterface(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param _link The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address _link) internal {\\n    link = LinkTokenInterface(_link);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param _oracle The address of the oracle contract that will fulfill the request\\n   * @param _requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\\n    internal\\n    notPendingRequest(_requestId)\\n  {\\n    pendingRequests[_requestId] = _oracle;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param _ens The address of the ENS contract\\n   * @param _node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address _ens, bytes32 _node)\\n    internal\\n  {\\n    ens = ENSInterface(_ens);\\n    ensNode = _node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Encodes the request to be sent to the oracle contract\\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\\n   * will be validated in the oracle contract.\\n   * @param _req The initialized Chainlink Request\\n   * @return The bytes payload for the `transferAndCall` method\\n   */\\n  function encodeRequest(Chainlink.Request memory _req)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    return abi.encodeWithSelector(\\n      oracle.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      _req.id,\\n      _req.callbackAddress,\\n      _req.callbackFunctionId,\\n      _req.nonce,\\n      ARGS_VERSION,\\n      _req.buf.buf);\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 _requestId)\\n    internal\\n    recordChainlinkFulfillment(_requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\\n    require(msg.sender == pendingRequests[_requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkFulfilled(_requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 _requestId) {\\n    require(pendingRequests[_requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Median.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\nimport \\\"./SignedSafeMath.sol\\\";\\n\\nlibrary Median {\\n  using SignedSafeMath for int256;\\n\\n  int256 constant INT_MAX = 2**255-1;\\n\\n  /**\\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n   * array has an even number of elements.\\n   * @dev The list passed as an argument isn't modified.\\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n   * the runtime is O(n^2).\\n   * @param list The list of elements to compare\\n   */\\n  function calculate(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return calculateInplace(copy(list));\\n  }\\n\\n  /**\\n   * @notice See documentation for function calculate.\\n   * @dev The list passed as an argument may be permuted.\\n   */\\n  function calculateInplace(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    require(0 < list.length, \\\"list must not be empty\\\");\\n    uint256 len = list.length;\\n    uint256 middleIndex = len / 2;\\n    if (len % 2 == 0) {\\n      int256 median1;\\n      int256 median2;\\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n      return SignedSafeMath.avg(median1, median2);\\n    } else {\\n      return quickselect(list, 0, len - 1, middleIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Maximum length of list that shortSelectTwo can handle\\n   */\\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n  /**\\n   * @notice Select the k1-th and k2-th element from list of length at most 7\\n   * @dev Uses an optimal sorting network\\n   */\\n  function shortSelectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    private\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n    // for lists of length 7. Network layout is taken from\\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n    uint256 len = hi + 1 - lo;\\n    int256 x0 = list[lo + 0];\\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\\n\\n    uint256 index1 = k1 - lo;\\n    if (index1 == 0) {k1th = x0;}\\n    else if (index1 == 1) {k1th = x1;}\\n    else if (index1 == 2) {k1th = x2;}\\n    else if (index1 == 3) {k1th = x3;}\\n    else if (index1 == 4) {k1th = x4;}\\n    else if (index1 == 5) {k1th = x5;}\\n    else if (index1 == 6) {k1th = x6;}\\n    else {revert(\\\"k1 out of bounds\\\");}\\n\\n    uint256 index2 = k2 - lo;\\n    if (k1 == k2) {return (k1th, k1th);}\\n    else if (index2 == 0) {return (k1th, x0);}\\n    else if (index2 == 1) {return (k1th, x1);}\\n    else if (index2 == 2) {return (k1th, x2);}\\n    else if (index2 == 3) {return (k1th, x3);}\\n    else if (index2 == 4) {return (k1th, x4);}\\n    else if (index2 == 5) {return (k1th, x5);}\\n    else if (index2 == 6) {return (k1th, x6);}\\n    else {revert(\\\"k2 out of bounds\\\");}\\n  }\\n\\n  /**\\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n   * (inclusive). Modifies list in-place.\\n   */\\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\\n    private\\n    pure\\n    returns (int256 kth)\\n  {\\n    require(lo <= k);\\n    require(k <= hi);\\n    while (lo < hi) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        int256 ignore;\\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n        return kth;\\n      }\\n      uint256 pivotIndex = partition(list, lo, hi);\\n      if (k <= pivotIndex) {\\n        // since pivotIndex < (original hi passed to partition),\\n        // termination is guaranteed in this case\\n        hi = pivotIndex;\\n      } else {\\n        // since (original lo passed to partition) <= pivotIndex,\\n        // termination is guaranteed in this case\\n        lo = pivotIndex + 1;\\n      }\\n    }\\n    return list[lo];\\n  }\\n\\n  /**\\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n   * lo and hi (inclusive). Modifies list in-place.\\n   */\\n  function quickselectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    internal // for testing\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    require(k1 < k2);\\n    require(lo <= k1 && k1 <= hi);\\n    require(lo <= k2 && k2 <= hi);\\n\\n    while (true) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        return shortSelectTwo(list, lo, hi, k1, k2);\\n      }\\n      uint256 pivotIdx = partition(list, lo, hi);\\n      if (k2 <= pivotIdx) {\\n        hi = pivotIdx;\\n      } else if (pivotIdx < k1) {\\n        lo = pivotIdx + 1;\\n      } else {\\n        assert(k1 <= pivotIdx && pivotIdx < k2);\\n        k1th = quickselect(list, lo, pivotIdx, k1);\\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n        return (k1th, k2th);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\\n   * Returns an index i, such that:\\n   * - lo <= i < hi\\n   * - forall j in [lo, i]. list[j] <= list[i]\\n   * - forall j in [i, hi]. list[i] <= list[j]\\n   */\\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // We don't care about overflow of the addition, because it would require a list\\n    // larger than any feasible computer's memory.\\n    int256 pivot = list[(lo + hi) / 2];\\n    lo -= 1; // this can underflow. that's intentional.\\n    hi += 1;\\n    while (true) {\\n      do {\\n        lo += 1;\\n      } while (list[lo] < pivot);\\n      do {\\n        hi -= 1;\\n      } while (list[hi] > pivot);\\n      if (lo < hi) {\\n        (list[lo], list[hi]) = (list[hi], list[lo]);\\n      } else {\\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n        // in each loop iteration and\\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\\n        //   will achieve hi < orig_hi;\\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n        //   needed:\\n        //   - lo will have to stop at least once in the interval\\n        //     [orig_lo, (orig_lo + orig_hi)/2]\\n        //   - (orig_lo + orig_hi)/2 < orig_hi\\n        return hi;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Makes an in-memory copy of the array passed in\\n   * @param list Reference to the array to be copied\\n   */\\n  function copy(int256[] memory list)\\n    private\\n    pure\\n    returns(int256[] memory)\\n  {\\n    int256[] memory list2 = new int256[](list.length);\\n    for (uint256 i = 0; i < list.length; i++) {\\n      list2[i] = list[i];\\n    }\\n    return list2;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Chainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param _id The Job Specification ID\\n   * @param _callbackAddress The callback address\\n   * @param _callbackFunction The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 _id,\\n    address _callbackAddress,\\n    bytes4 _callbackFunction\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = _id;\\n    self.callbackAddress = _callbackAddress;\\n    self.callbackFunctionId = _callbackFunction;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param _data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory _data)\\n    internal pure\\n  {\\n    BufferChainlink.init(self.buf, _data.length);\\n    BufferChainlink.append(self.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The string value to add\\n   */\\n  function add(Request memory self, string memory _key, string memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeString(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory _key, int256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory _key, uint256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < _values.length; i++) {\\n      self.buf.encodeString(_values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/ENSInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\\n  function setResolver(bytes32 node, address _resolver) external;\\n  function setOwner(bytes32 node, address _owner) external;\\n  function setTTL(bytes32 node, uint64 _ttl) external;\\n  function owner(bytes32 node) external view returns (address);\\n  function resolver(bytes32 node) external view returns (address);\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/PointerInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/ENSResolver.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/CBORChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  function encodeType(BufferChainlink.buffer memory buf, uint8 major, uint value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/BufferChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint a, uint b) private pure returns(uint) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/SignedSafeMath.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SignedSafeMath {\\n  int256 constant private _INT256_MIN = -2**255;\\n\\n  /**\\n   * @dev Multiplies two signed integers, reverts on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    int256 c = a * b;\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n    int256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two signed integers, reverts on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two signed integers, reverts on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Computes average of two signed integers, ensuring that the computation\\n   * doesn't overflow.\\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\\n   * avg(-3, -4) = -3\\n   */\\n  function avg(int256 _a, int256 _b)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n      return add(_a, _b) / 2;\\n    }\\n    int256 remainder = (_a % 2 + _b % 2) / 2;\\n    return add(add(_a / 2, _b / 2), remainder);\\n  }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/use-cases/staking-efficiency/NetworkAnalytics.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../StringUtils.sol\\\";\\nimport \\\"../../PeriodRegistry.sol\\\";\\nimport \\\"../../StakeRegistry.sol\\\";\\n\\n/**\\n * @title NetworkAnalytics\\n * @dev contract to get the network analytics for the staking efficiency use case\\n */\\n\\ncontract NetworkAnalytics is Ownable, ChainlinkClient, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n\\n    struct AnalyticsRequest {\\n        bytes32 networkName;\\n        uint256 periodId;\\n        PeriodRegistry.PeriodType periodType;\\n    }\\n\\n    /// @dev Period registry\\n    PeriodRegistry private periodRegistry;\\n    /// @dev StakeRegistry\\n    StakeRegistry private stakeRegistry;\\n\\n    /// @dev bytes32 to store the available network names\\n    bytes32[] public networkNames;\\n    /// @dev (networkName=>periodType=>periodId=>bytes32) to store ipfsHash of the analytics corresponding to periodId\\n    mapping(bytes32 => mapping(PeriodRegistry.PeriodType => mapping(uint256 => bytes32)))\\n        public periodAnalytics;\\n    /// @dev (networkName=>periodType=>periodId=>bool) to state if a network-periodType-periodId was already requested\\n    mapping(bytes32 => mapping(PeriodRegistry.PeriodType => mapping(uint256 => bool)))\\n        public periodAnalyticsRequested;\\n\\n    /// @dev Mapping that stores chainlink analytics request information\\n    mapping(bytes32 => AnalyticsRequest) public requestIdToAnalyticsRequest;\\n    /// @dev Array with all request IDs\\n    bytes32[] public requests;\\n    /// @dev Chainlink oracle address\\n    address private oracle;\\n    /// @dev chainlink jobId\\n    bytes32 private jobId;\\n    /// @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 private baseFee = 0.1 ether;\\n    /// @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 public fee;\\n\\n    /**\\n     * @dev event emitted when modifying the callerReward\\n     * @param owner 1. -\\n     * @param newValue 2. -\\n     */\\n    event CallerRewardModified(address indexed owner, uint256 newValue);\\n\\n    /**\\n     * @dev event emitted when modifying the jobId\\n     * @param owner 1. -\\n     * @param jobId 2. -\\n     * @param fee 3. -\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param networkName 1. network name\\n     * @param periodType 2. id of the period\\n     * @param periodId 3. id of the period\\n     * @param ipfsHash 4. hash of the ipfs object\\n     */\\n    event AnalyticsReceived(\\n        bytes32 networkName,\\n        PeriodRegistry.PeriodType periodType,\\n        uint256 periodId,\\n        bytes32 ipfsHash\\n    );\\n\\n    /**\\n     * @dev parameterize the variables according to network\\n     * @notice sets the Chainlink parameters (oracle address, token address, jobId) and sets the SLARegistry to 0x0 address\\n     * @param _chainlinkOracle 1. the address of the oracle to create requests to\\n     * @param _chainlinkToken 2. the address of LINK token contract\\n     * @param _jobId 3. the job id for the HTTPGet job\\n     * @param _periodRegistry 4. period registry\\n     * @param _stakeRegistry 5. stake registry\\n     * @param _feeMultiplier 6. states the amount of paid nodes running behind the precoordinator, to set the fee\\n     */\\n    constructor(\\n        address _chainlinkOracle,\\n        address _chainlinkToken,\\n        bytes32 _jobId,\\n        PeriodRegistry _periodRegistry,\\n        StakeRegistry _stakeRegistry,\\n        uint256 _feeMultiplier\\n    ) public {\\n        jobId = _jobId;\\n        setChainlinkToken(_chainlinkToken);\\n        oracle = _chainlinkOracle;\\n        periodRegistry = _periodRegistry;\\n        stakeRegistry = _stakeRegistry;\\n        fee = _feeMultiplier.mul(baseFee);\\n    }\\n\\n    function isValidNetwork(bytes32 _networkName) public view returns (bool) {\\n        for (uint256 index; index < networkNames.length; index++) {\\n            if (networkNames[index] == _networkName) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev function to add a valid network name\\n     * @param _networkName 1. bytes32 network name\\n     */\\n    function addNetwork(bytes32 _networkName)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            isValidNetwork(_networkName) == false,\\n            \\\"Network name already registered\\\"\\n        );\\n        networkNames.push(_networkName);\\n        return false;\\n    }\\n\\n    /**\\n     * @dev function to add multiple valid network names\\n     * @param _networkNames 1. bytes32[] network names\\n     */\\n    function addMultipleNetworks(bytes32[] calldata _networkNames)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < _networkNames.length; index++) {\\n            if (!isValidNetwork(_networkNames[index])) {\\n                networkNames.push(_networkNames[index]);\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Request analytics object for the current period.\\n     * @param _periodId 1. id of the canonical period to be analyzed\\n     * @param _periodType 2. type of period to be queried\\n     * @param _networkName 3. network name to publish analytics\\n     * @param _ownerApproval 4. used to choose if the call is going to be funded by the contract owner, to avoid a block by contract owner\\n     */\\n    function requestAnalytics(\\n        uint256 _periodId,\\n        PeriodRegistry.PeriodType _periodType,\\n        bytes32 _networkName,\\n        bool _ownerApproval\\n    ) public nonReentrant {\\n        require(isValidNetwork(_networkName), \\\"Invalid network name\\\");\\n        bool periodIsFinished =\\n            periodRegistry.periodIsFinished(_periodType, _periodId);\\n        require(periodIsFinished == true, \\\"Period has not finished yet\\\");\\n        require(\\n            periodAnalyticsRequested[_networkName][_periodType][_periodId] ==\\n                false,\\n            \\\"Analytics already requested\\\"\\n        );\\n        if (_ownerApproval) {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                owner(),\\n                address(this),\\n                fee\\n            );\\n        } else {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                fee\\n            );\\n        }\\n\\n        Chainlink.Request memory request =\\n            buildChainlinkRequest(\\n                jobId,\\n                address(this),\\n                this.fulFillAnalytics.selector\\n            );\\n\\n        (uint256 start, uint256 end) =\\n            periodRegistry.getPeriodStartAndEnd(_periodType, _periodId);\\n\\n        request.add(\\\"job_type\\\", \\\"staking_efficiency_analytics\\\");\\n        request.add(\\\"network_name\\\", StringUtils.bytes32ToStr(_networkName));\\n        request.add(\\\"period_id\\\", StringUtils.uintToStr(_periodId));\\n        request.add(\\n            \\\"period_type\\\",\\n            StringUtils.uintToStr(uint256(uint8(_periodType)))\\n        );\\n        request.add(\\\"sla_monitoring_start\\\", StringUtils.uintToStr(start));\\n        request.add(\\\"sla_monitoring_end\\\", StringUtils.uintToStr(end));\\n\\n        bytes32 requestId = sendChainlinkRequestTo(oracle, request, fee);\\n        requests.push(requestId);\\n        requestIdToAnalyticsRequest[requestId] = AnalyticsRequest({\\n            networkName: _networkName,\\n            periodId: _periodId,\\n            periodType: _periodType\\n        });\\n        periodAnalyticsRequested[_networkName][_periodType][_periodId] = true;\\n    }\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponse response object from Chainlink Oracles\\n     */\\n    function fulFillAnalytics(bytes32 _requestId, bytes32 _chainlinkResponse)\\n        external\\n        recordChainlinkFulfillment(_requestId)\\n        nonReentrant\\n    {\\n        AnalyticsRequest memory request =\\n            requestIdToAnalyticsRequest[_requestId];\\n\\n        emit AnalyticsReceived(\\n            request.networkName,\\n            request.periodType,\\n            request.periodId,\\n            _chainlinkResponse\\n        );\\n\\n        periodAnalytics[request.networkName][request.periodType][\\n            request.periodId\\n        ] = _chainlinkResponse;\\n    }\\n\\n    /**\\n     * @dev sets a new jobId, which is a agreement Id of a PreCoordinator contract\\n     * @param _jobId the id of the PreCoordinator agreement\\n     * @param _feeMultiplier how many Chainlink nodes would be paid on the agreement id, to set the fee value\\n     */\\n    function setChainlinkJobID(bytes32 _jobId, uint256 _feeMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        jobId = _jobId;\\n        fee = _feeMultiplier.mul(baseFee);\\n        emit JobIdModified(msg.sender, _jobId, fee);\\n    }\\n\\n    function getNetworkNames()\\n        external\\n        view\\n        returns (bytes32[] memory networks)\\n    {\\n        networks = networkNames;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/StringUtils.sol\": {\n      \"content\": \"// solhint-disable-line\\npragma solidity 0.6.6;\\n\\nlibrary StringUtils {\\n    function addressToString(address _address)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = \\\"0\\\";\\n        _string[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function bytes32ToStr(bytes32 _bytes32)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function bytesToUint(bytes calldata b)\\n        external\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /*\\n        ORACLIZE_API\\n        Copyright (c) 2015-2016 Oraclize SRL\\n        Copyright (c) 2016 Oraclize LTD\\n        Permission is hereby granted, free of charge, to any person obtaining a copy\\n        of this software and associated documentation files (the \\\"Software\\\"), to deal\\n        in the Software without restriction, including without limitation the rights\\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n        copies of the Software, and to permit persons to whom the Software is\\n        furnished to do so, subject to the following conditions:\\n        The above copyright notice and this permission notice shall be included in\\n        all copies or substantial portions of the Software.\\n        THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n        THE SOFTWARE.\\n    */\\n    function uintToStr(uint256 _i)\\n        external\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        uint256 number = _i;\\n        if (number == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = number;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (number != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (number % 10)));\\n            number /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/PeriodRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract PeriodRegistry is Ownable {\\n    using SafeMath for uint256;\\n\\n    enum PeriodType {Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly}\\n\\n    /// @dev struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @dev (periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of the starts of the period\\n     *@param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(\\n            !periodDefinition.initialized,\\n            \\\"Period type already initialized\\\"\\n        );\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            \\\"Period type starts and ends should match\\\"\\n        );\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev function to add new periods to certain period type\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of uint256 of the period starts to add\\n     *@param _periodEnds 3. array of uint256 of the period starts to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(periodDefinition.initialized, \\\"Period was not initialized yet\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length.sub(1)) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev public function to get the start and end of a period\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @dev public function to check if a periodType id is initialized\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        public\\n        view\\n        returns (bool initialized)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        initialized = periodDefinition.initialized;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period id is valid i.e. it belongs to the added id array\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        valid = periodDefinition.starts.length.sub(1) >= _periodId;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has finished\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has started\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to get the periodDefinitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/StakeRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./SLA.sol\\\";\\nimport \\\"./messenger/IMessenger.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\n/**\\n * @title StakeRegistry\\n * @dev StakeRegistry is a contract to register the staking activity of the platform, along\\n with controlling certain admin privileged parameters\\n */\\ncontract StakeRegistry is Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev struct to return on getActivePool function.\\n    struct ActivePool {\\n        address SLAAddress;\\n        uint256 stake;\\n        string assetName;\\n        address assetAddress;\\n    }\\n\\n    struct LockedValue {\\n        uint256 lockedValue;\\n        uint256 slaPeriodIdsLength;\\n        uint256 dslaDepositByPeriod;\\n        uint256 dslaPlatformReward;\\n        uint256 dslaMessengerReward;\\n        uint256 dslaUserReward;\\n        uint256 dslaBurnedByVerification;\\n        mapping(uint256 => bool) verifiedPeriods;\\n    }\\n\\n    address public DSLATokenAddress;\\n    SLARegistry public slaRegistry;\\n\\n    //______ onlyOwner modifiable parameters ______\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\\n    uint256 private _DSLAburnRate = 3;\\n    /// @dev (ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\\n    mapping(address => LockedValue) public slaLockedValue;\\n    /// @dev DSLA deposit by period to create SLA\\n    uint256 private _dslaDepositByPeriod = 1000 ether;\\n    /// @dev DSLA rewarded to the foundation\\n    uint256 private _dslaPlatformReward = 250 ether;\\n    /// @dev DSLA rewarded to the Messenger creator\\n    uint256 private _dslaMessengerReward = 250 ether;\\n    /// @dev DSLA rewarded to user calling the period verification\\n    uint256 private _dslaUserReward = 250 ether;\\n    /// @dev DSLA burned after every period verification\\n    uint256 private _dslaBurnedByVerification = 250 ether;\\n    /// @dev max token length for allowedTokens array of Staking contracts\\n    uint256 private _maxTokenLength = 1;\\n    /// @dev max times of hedge leverage\\n    uint64 private _maxLeverage = 100;\\n\\n    /// @dev array with the allowed tokens addresses of the StakeRegistry\\n    address[] public allowedTokens;\\n\\n    /// @dev (userAddress => SLA[]) with user staked SLAs to get tokenPool\\n    mapping(address => SLA[]) public userStakedSlas;\\n\\n    /**\\n     * @dev event to log a verifiation reward distributed\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param requester 2. -\\n     * @param userReward 3. -\\n     * @param platformReward 4. -\\n     * @param messengerReward 5. -\\n     * @param burnedDSLA 6. -\\n     */\\n    event VerificationRewardDistributed(\\n        address indexed sla,\\n        address indexed requester,\\n        uint256 userReward,\\n        uint256 platformReward,\\n        uint256 messengerReward,\\n        uint256 burnedDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param DSLAburnRate 1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\\n     *@param dslaDepositByPeriod 2. DSLA deposit by period to create SLA\\n     *@param dslaPlatformReward 3. DSLA rewarded to Stacktical team\\n     *@param dslaUserReward 4. DSLA rewarded to user calling the period verification\\n     *@param dslaBurnedByVerification 5. DSLA burned after every period verification\\n     */\\n    event StakingParametersModified(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n\\n    event LockedValueReturned(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param dTokenAddress 1. -\\n     *@param sla 2. -\\n     *@param name 3. -\\n     *@param symbol 4. -\\n     */\\n    event DTokenCreated(\\n        address indexed dTokenAddress,\\n        address indexed sla,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n    event ValueLocked(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param _dslaTokenAddress 1. DSLA Token\\n     */\\n    constructor(address _dslaTokenAddress) public {\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                    .add(_dslaMessengerReward)\\n                    .add(_dslaUserReward)\\n                    .add(_dslaBurnedByVerification),\\n            \\\"Staking parameters should match on summation\\\"\\n        );\\n        DSLATokenAddress = _dslaTokenAddress;\\n        allowedTokens.push(_dslaTokenAddress);\\n    }\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            \\\"Can only be called by SLARegistry\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        slaRegistry = SLARegistry(msg.sender);\\n    }\\n\\n    /**\\n     *@dev add a token to ve allowed for staking\\n     *@param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        require(!isAllowedToken(_tokenAddress), \\\"token already added\\\");\\n        allowedTokens.push(_tokenAddress);\\n    }\\n\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev public view function that returns true if the _owner has staked on _sla\\n     *@param _user 1. address to check\\n     *@param _sla 2. sla to check\\n     *@return bool, true if _sla was staked by _user\\n     */\\n\\n    function slaWasStakedByUser(address _user, address _sla)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < userStakedSlas[_user].length; index++) {\\n            if (address(userStakedSlas[_user][index]) == _sla) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev register the sending SLA contract as staked by _owner\\n     *@param _owner 1. SLA contract to stake\\n     */\\n    function registerStakedSla(address _owner) external returns (bool) {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            \\\"Only for registered SLAs\\\"\\n        );\\n        if (!slaWasStakedByUser(_owner, msg.sender)) {\\n            userStakedSlas[_owner].push(SLA(msg.sender));\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     *@dev to create dTokens for staking\\n     *@param _name 1. token name\\n     *@param _symbol 2. token symbol\\n     */\\n    function createDToken(string calldata _name, string calldata _symbol)\\n        external\\n        returns (address)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            \\\"Only for registered SLAs\\\"\\n        );\\n        ERC20PresetMinterPauser dToken =\\n            new ERC20PresetMinterPauser(_name, _symbol);\\n        dToken.grantRole(dToken.MINTER_ROLE(), msg.sender);\\n        emit DTokenCreated(address(dToken), msg.sender, _name, _symbol);\\n        return address(dToken);\\n    }\\n\\n    function lockDSLAValue(\\n        address _slaOwner,\\n        address _sla,\\n        uint256 _periodIdsLength\\n    ) external onlySLARegistry nonReentrant {\\n        uint256 lockedValue = _dslaDepositByPeriod.mul(_periodIdsLength);\\n        ERC20(DSLATokenAddress).safeTransferFrom(\\n            _slaOwner,\\n            address(this),\\n            lockedValue\\n        );\\n        slaLockedValue[_sla] = LockedValue({\\n            lockedValue: lockedValue,\\n            slaPeriodIdsLength: _periodIdsLength,\\n            dslaDepositByPeriod: _dslaDepositByPeriod,\\n            dslaPlatformReward: _dslaPlatformReward,\\n            dslaMessengerReward: _dslaMessengerReward,\\n            dslaUserReward: _dslaUserReward,\\n            dslaBurnedByVerification: _dslaBurnedByVerification\\n        });\\n        emit ValueLocked(_sla, _slaOwner, lockedValue);\\n    }\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external onlySLARegistry nonReentrant {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        require(\\n            !_lockedValue.verifiedPeriods[_periodId],\\n            \\\"Period rewards already distributed\\\"\\n        );\\n        _lockedValue.verifiedPeriods[_periodId] = true;\\n        _lockedValue.lockedValue = _lockedValue.lockedValue.sub(\\n            _lockedValue.dslaDepositByPeriod\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            owner(),\\n            _lockedValue.dslaPlatformReward\\n        );\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            IMessenger(SLA(_sla).messengerAddress()).owner(),\\n            _lockedValue.dslaMessengerReward\\n        );\\n        _burnDSLATokens(_lockedValue.dslaBurnedByVerification);\\n        emit VerificationRewardDistributed(\\n            _sla,\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward,\\n            _lockedValue.dslaPlatformReward,\\n            _lockedValue.dslaMessengerReward,\\n            _lockedValue.dslaBurnedByVerification\\n        );\\n    }\\n\\n    function returnLockedValue(address _sla)\\n        external\\n        onlySLARegistry\\n        nonReentrant\\n    {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        uint256 remainingBalance = _lockedValue.lockedValue;\\n        require(remainingBalance > 0, \\\"locked value is empty\\\");\\n        _lockedValue.lockedValue = 0;\\n        ERC20(DSLATokenAddress).safeTransfer(\\n            SLA(_sla).owner(),\\n            remainingBalance\\n        );\\n        emit LockedValueReturned(_sla, SLA(_sla).owner(), remainingBalance);\\n    }\\n\\n    function _burnDSLATokens(uint256 _amount) internal {\\n        bytes4 BURN_SELECTOR = bytes4(keccak256(bytes(\\\"burn(uint256)\\\")));\\n        (bool _success, ) =\\n            DSLATokenAddress.call(\\n                abi.encodeWithSelector(BURN_SELECTOR, _amount)\\n            );\\n        require(_success, \\\"DSLA burn process was not successful\\\");\\n    }\\n\\n    /**\\n     * @dev returns the active pools owned by a user.\\n     * @param _slaOwner 1. owner of the active pool\\n     * @return ActivePool[], array of structs: {SLAAddress,stake,assetName}\\n     */\\n    function getActivePool(address _slaOwner)\\n        external\\n        view\\n        returns (ActivePool[] memory)\\n    {\\n        bytes4 NAME_SELECTOR = bytes4(keccak256(bytes(\\\"name()\\\")));\\n        uint256 stakeCounter = 0;\\n        // Count the stakes of the user, checking every SLA staked\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = SLA(userStakedSlas[_slaOwner][index]);\\n            stakeCounter = stakeCounter.add(\\n                currentSLA.getAllowedTokensLength()\\n            );\\n        }\\n\\n        ActivePool[] memory activePools = new ActivePool[](stakeCounter);\\n        // to insert on activePools array\\n        uint256 stakePosition = 0;\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = userStakedSlas[_slaOwner][index];\\n            for (\\n                uint256 tokenIndex = 0;\\n                tokenIndex < currentSLA.getAllowedTokensLength();\\n                tokenIndex++\\n            ) {\\n                (address tokenAddress, uint256 stake) =\\n                    currentSLA.getTokenStake(_slaOwner, tokenIndex);\\n                (, bytes memory tokenNameBytes) =\\n                    tokenAddress.staticcall(\\n                        abi.encodeWithSelector(NAME_SELECTOR)\\n                    );\\n                ActivePool memory currentActivePool =\\n                    ActivePool({\\n                        SLAAddress: address(currentSLA),\\n                        stake: stake,\\n                        assetName: string(tokenNameBytes),\\n                        assetAddress: tokenAddress\\n                    });\\n                activePools[stakePosition] = currentActivePool;\\n                stakePosition = stakePosition.add(1);\\n            }\\n        }\\n        return activePools;\\n    }\\n\\n    //_______ OnlyOwner functions _______\\n    function setStakingParameters(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage\\n    ) external onlyOwner {\\n        _DSLAburnRate = DSLAburnRate;\\n        _dslaDepositByPeriod = dslaDepositByPeriod;\\n        _dslaPlatformReward = dslaPlatformReward;\\n        _dslaMessengerReward = dslaMessengerReward;\\n        _dslaUserReward = dslaUserReward;\\n        _dslaBurnedByVerification = dslaBurnedByVerification;\\n        _maxTokenLength = maxTokenLength;\\n        _maxLeverage = maxLeverage;\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                    .add(_dslaMessengerReward)\\n                    .add(_dslaUserReward)\\n                    .add(_dslaBurnedByVerification),\\n            \\\"Staking parameters should match on summation\\\"\\n        );\\n        emit StakingParametersModified(\\n            DSLAburnRate,\\n            dslaDepositByPeriod,\\n            dslaPlatformReward,\\n            dslaMessengerReward,\\n            dslaUserReward,\\n            dslaBurnedByVerification,\\n            maxTokenLength,\\n            maxLeverage\\n        );\\n    }\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage\\n        )\\n    {\\n        DSLAburnRate = _DSLAburnRate;\\n        dslaDepositByPeriod = _dslaDepositByPeriod;\\n        dslaPlatformReward = _dslaPlatformReward;\\n        dslaMessengerReward = _dslaMessengerReward;\\n        dslaUserReward = _dslaUserReward;\\n        dslaBurnedByVerification = _dslaBurnedByVerification;\\n        maxTokenLength = _maxTokenLength;\\n        maxLeverage = _maxLeverage;\\n    }\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return slaLockedValue[_sla].verifiedPeriods[_periodId];\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/SLA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./SLORegistry.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\n/**\\n * @title SLA\\n * @dev SLA is a service level agreement contract used for service downtime\\n * compensation\\n */\\ncontract SLA is Staking {\\n    using SafeMath for uint256;\\n\\n    enum Status {NotVerified, Respected, NotRespected}\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    //\\n    string public ipfsHash;\\n    address public immutable messengerAddress;\\n    SLARegistry public slaRegistry;\\n    PeriodRegistry private immutable periodRegistry;\\n    SLORegistry private immutable sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    PeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    bytes32[] public extraData;\\n\\n    bool private _breachedContract = false;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    /**\\n     * @dev event for SLI creation logging\\n     * @param timestamp 1. the time the SLI has been registered\\n     * @param sli 2. the value of the SLI\\n     * @param periodId 3. the id of the given period\\n     */\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    /**\\n     * @dev event for Stake loging\\n     * @param tokenAddress 1. -\\n     * @param periodId 2. -\\n     * @param amount 3. -\\n     * @param caller 4. -\\n     */\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev throws if called by any address other than the messenger contract.\\n     */\\n    modifier onlyMessenger() {\\n        require(\\n            msg.sender == messengerAddress,\\n            \\\"only messenger\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called by any address other than the messenger contract.\\n     */\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            \\\"only SLARegistry\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called with an amount less or equal to zero.\\n     */\\n    modifier notZero(uint256 _amount) {\\n        require(_amount > 0, \\\"amount cant be 0\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param _owner 1. -\\n     * @param _ipfsHash 3. -\\n     * @param _messengerAddress 3. -\\n     * @param _initialPeriodId 4. -\\n     * @param _finalPeriodId 4. -\\n     * @param _periodType 5. -\\n     * @param _whitelisted 8. -\\n     * @param _extraData 9. -\\n     * @param _slaID 10. -\\n     */\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        PeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        bytes32[] memory _extraData,\\n        uint64 _leverage\\n    )\\n        public\\n        Staking(\\n            SLARegistry(msg.sender),\\n            _periodType,\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        messengerAddress = _messengerAddress;\\n        slaRegistry = SLARegistry(msg.sender);\\n        periodRegistry = slaRegistry.periodRegistry();\\n        sloRegistry = slaRegistry.sloRegistry();\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        extraData = _extraData;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    /**\\n     * @dev external function to register SLI's and check them against the SLORegistry\\n     * @param _sli 1. the value of the SLI to check\\n     * @param _periodId 2. the id of the given period\\n     */\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n        (uint256 sloValue, ) = sloRegistry.registeredSLO(address(this));\\n        if (sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            uint256 precision = 10000;\\n            uint256 deviation =\\n                _sli.sub(sloValue).mul(precision).div(\\n                    _sli.add(sloValue).div(2)\\n                );\\n            uint256 normalizedPeriodId = _periodId.sub(initialPeriodId).add(1);\\n            uint256 rewardPercentage =\\n                deviation.mul(normalizedPeriodId).div(\\n                    finalPeriodId - initialPeriodId + 1\\n                );\\n            _setRespectedPeriodReward(_periodId, rewardPercentage, precision);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUsersCompensation(_periodId);\\n            _breachedContract = true;\\n        }\\n    }\\n\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        if (_periodId < initialPeriodId) return false;\\n        if (_periodId > finalPeriodId) return false;\\n        return true;\\n    }\\n\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) =\\n            periodRegistry.getPeriodStartAndEnd(periodType, finalPeriodId);\\n        return\\n            _breachedContract == true ||\\n            (block.timestamp >= endOfLastValidPeriod &&\\n                periodSLIs[finalPeriodId].status != Status.NotVerified);\\n    }\\n\\n    /**\\n     *@dev stake _amount tokens into the _token contract\\n     *@param _amount 1. amount to be staked\\n     *@param _token 2. address of the ERC to be staked\\n     */\\n\\n    function stakeTokens(uint256 _amount, address _token)\\n        external\\n        notZero(_amount)\\n    {\\n        bool isContractFinished = contractFinished();\\n        require(\\n            !isContractFinished,\\n            \\\"finished contract\\\"\\n        );\\n        _stake(_amount, _token);\\n        emit Stake(_token, nextVerifiablePeriod, msg.sender, _amount);\\n        StakeRegistry stakeRegistry = slaRegistry.stakeRegistry();\\n        stakeRegistry.registerStakedSla(msg.sender);\\n    }\\n\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n        notZero(_amount)\\n    {\\n        bool isContractFinished = contractFinished();\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawProviderTokens(_amount, _tokenAddress, isContractFinished);\\n    }\\n\\n    /**\\n     *@dev withdraw _amount tokens from the _token contract\\n     *@param _amount 1. amount to be staked\\n     *@param _tokenAddress 2. address of the ERC to be staked\\n     */\\n\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n        notZero(_amount)\\n    {\\n        if (msg.sender != owner()) {\\n            bool isContractFinished = contractFinished();\\n            require(isContractFinished, \\\"not finished contract\\\");\\n        }\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawUserTokens(_amount, _tokenAddress);\\n    }\\n\\n    function getStakersLength() external view returns (uint256) {\\n        return stakers.length;\\n    }\\n\\n    function breachedContract() external view returns (bool) {\\n        return _breachedContract;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/messenger/IMessenger.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. id of the Chainlink request\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        virtual;\\n\\n    /**\\n     * @dev gets the messenger precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/SLARegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SLA.sol\\\";\\nimport \\\"./SLORegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./MessengerRegistry.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./messenger/IMessenger.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract SLARegistry {\\n    using SafeMath for uint256;\\n\\n    /// @dev SLO registry\\n    SLORegistry public sloRegistry;\\n    /// @dev Periods registry\\n    PeriodRegistry public periodRegistry;\\n    /// @dev Messengers registry\\n    MessengerRegistry public messengerRegistry;\\n    /// @dev Stake registry\\n    StakeRegistry public stakeRegistry;\\n    /// @dev stores the addresses of created SLAs\\n    SLA[] public SLAs;\\n    /// @dev stores the indexes of service level agreements owned by an user\\n    mapping(address => uint256[]) private userToSLAIndexes;\\n    /// @dev to check if registered SLA\\n    mapping(address => bool) private registeredSLAs;\\n    // value to lock past periods on SLA deployment\\n    bool public immutable checkPastPeriod;\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param owner 2. The address of the owner of the service level agreement\\n     */\\n    event SLACreated(SLA indexed sla, address indexed owner);\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param periodId 1. -\\n     * @param sla 2. -\\n     * @param caller 3. -\\n     */\\n    event SLIRequested(\\n        uint256 periodId,\\n        address indexed sla,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @dev event for service level agreement creation logging\\n     * @param sla 1. -\\n     * @param caller 2. -\\n     */\\n    event ReturnLockedValue(address indexed sla, address indexed caller);\\n\\n    /**\\n     * @dev constructor\\n     * @param _sloRegistry 1. SLO Registry\\n     * @param _periodRegistry 2. Periods registry\\n     * @param _messengerRegistry 3. Messenger registry\\n     * @param _stakeRegistry 4. Stake registry\\n     * @param _checkPastPeriod 5. -\\n     */\\n    constructor(\\n        SLORegistry _sloRegistry,\\n        PeriodRegistry _periodRegistry,\\n        MessengerRegistry _messengerRegistry,\\n        StakeRegistry _stakeRegistry,\\n        bool _checkPastPeriod\\n    ) public {\\n        sloRegistry = _sloRegistry;\\n        sloRegistry.setSLARegistry();\\n        periodRegistry = _periodRegistry;\\n        stakeRegistry = _stakeRegistry;\\n        stakeRegistry.setSLARegistry();\\n        messengerRegistry = _messengerRegistry;\\n        messengerRegistry.setSLARegistry();\\n        checkPastPeriod = _checkPastPeriod;\\n    }\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _ipfsHash 3. -\\n     * @param _periodType 4. -\\n     * @param _initialPeriodId 5. -\\n     * @param _finalPeriodId 6. -\\n     * @param _messengerAddress 7. -\\n     * @param _whitelisted 8. -\\n     * @param _extraData 9. -\\n     * @param _leverage 10. -\\n     */\\n    function createSLA(\\n        uint256 _sloValue,\\n        SLORegistry.SLOType _sloType,\\n        bool _whitelisted,\\n        address _messengerAddress,\\n        PeriodRegistry.PeriodType _periodType,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        string memory _ipfsHash,\\n        bytes32[] memory _extraData,\\n        uint64 _leverage\\n    ) public {\\n        bool validPeriod =\\n            periodRegistry.isValidPeriod(_periodType, _initialPeriodId);\\n        require(validPeriod, \\\"first period id invalid\\\");\\n        validPeriod = periodRegistry.isValidPeriod(_periodType, _finalPeriodId);\\n        require(validPeriod, \\\"final period id invalid\\\");\\n        bool initializedPeriod =\\n            periodRegistry.isInitializedPeriod(_periodType);\\n        require(initializedPeriod, \\\"period type not initialized\\\");\\n        require(\\n            _finalPeriodId >= _initialPeriodId,\\n            \\\"invalid finalPeriodId/initialPeriodId\\\"\\n        );\\n\\n        if (checkPastPeriod) {\\n            bool periodHasStarted =\\n                periodRegistry.periodHasStarted(_periodType, _initialPeriodId);\\n            require(!periodHasStarted, \\\"past period\\\");\\n        }\\n        bool registeredMessenger =\\n            messengerRegistry.registeredMessengers(_messengerAddress);\\n        require(registeredMessenger == true, \\\"messenger not registered\\\");\\n\\n        SLA sla =\\n            new SLA(\\n                msg.sender,\\n                _whitelisted,\\n                _periodType,\\n                _messengerAddress,\\n                _initialPeriodId,\\n                _finalPeriodId,\\n                uint128(SLAs.length),\\n                _ipfsHash,\\n                _extraData,\\n                _leverage\\n            );\\n\\n        sloRegistry.registerSLO(_sloValue, _sloType, address(sla));\\n        stakeRegistry.lockDSLAValue(\\n            msg.sender,\\n            address(sla),\\n            _finalPeriodId - _initialPeriodId + 1\\n        );\\n        SLAs.push(sla);\\n        registeredSLAs[address(sla)] = true;\\n        uint256 index = SLAs.length.sub(1);\\n        userToSLAIndexes[msg.sender].push(index);\\n        emit SLACreated(sla, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Gets SLI information for the specified SLA and SLO\\n     * @param _periodId 1. id of the period\\n     * @param _sla 2. SLA Address\\n     * @param _ownerApproval 3. if approval by owner or msg.sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        SLA _sla,\\n        bool _ownerApproval\\n    ) public {\\n        require(isRegisteredSLA(address(_sla)), \\\"invalid SLA\\\");\\n        require(_periodId == _sla.nextVerifiablePeriod(), \\\"not nextVerifiablePeriod\\\");\\n        (, , SLA.Status status) = _sla.periodSLIs(_periodId);\\n        require(status == SLA.Status.NotVerified, \\\"invalid SLA status\\\");\\n        bool breachedContract = _sla.breachedContract();\\n        require(!breachedContract, \\\"breached contract\\\");\\n        bool slaAllowedPeriodId = _sla.isAllowedPeriod(_periodId);\\n        require(slaAllowedPeriodId, \\\"invalid period Id\\\");\\n        PeriodRegistry.PeriodType slaPeriodType = _sla.periodType();\\n        bool periodFinished =\\n            periodRegistry.periodIsFinished(slaPeriodType, _periodId);\\n        require(periodFinished, \\\"period unfinished\\\");\\n        address slaMessenger = _sla.messengerAddress();\\n        SLIRequested(_periodId, address(_sla), msg.sender);\\n        IMessenger(slaMessenger).requestSLI(\\n            _periodId,\\n            address(_sla),\\n            _ownerApproval,\\n            msg.sender\\n        );\\n        stakeRegistry.distributeVerificationRewards(\\n            address(_sla),\\n            msg.sender,\\n            _periodId\\n        );\\n    }\\n\\n    function returnLockedValue(SLA _sla) public {\\n        require(isRegisteredSLA(address(_sla)), \\\"invalid SLA\\\");\\n        require(msg.sender == _sla.owner(), \\\"msg.sender not owner\\\");\\n        uint256 lastValidPeriodId = _sla.finalPeriodId();\\n        PeriodRegistry.PeriodType periodType = _sla.periodType();\\n        (, uint256 endOfLastValidPeriod) =\\n            periodRegistry.getPeriodStartAndEnd(periodType, lastValidPeriodId);\\n\\n        (, , SLA.Status lastPeriodStatus) = _sla.periodSLIs(lastValidPeriodId);\\n        require(\\n            _sla.breachedContract() ||\\n                (block.timestamp >= endOfLastValidPeriod &&\\n                    lastPeriodStatus != SLA.Status.NotVerified),\\n            \\\"not finished contract\\\"\\n        );\\n        ReturnLockedValue(address(_sla), msg.sender);\\n        stakeRegistry.returnLockedValue(address(_sla));\\n    }\\n\\n    /**\\n     * @dev function to declare this SLARegistry contract as SLARegistry of _messengerAddress\\n     * @param _messengerAddress 1. address of the messenger\\n     */\\n\\n    function registerMessenger(\\n        address _messengerAddress,\\n        string memory _specificationUrl\\n    ) public {\\n        IMessenger(_messengerAddress).setSLARegistry();\\n        messengerRegistry.registerMessenger(\\n            msg.sender,\\n            _messengerAddress,\\n            _specificationUrl\\n        );\\n    }\\n\\n    /**\\n     * @dev public view function that returns the service level agreements that\\n     * the given user is the owner of\\n     * @param _user Address of the user for which to return the service level\\n     * agreements\\n     * @return array of SLAs\\n     */\\n    function userSLAs(address _user) public view returns (SLA[] memory) {\\n        uint256 count = userToSLAIndexes[_user].length;\\n        SLA[] memory SLAList = new SLA[](count);\\n        uint256[] memory userSLAIndexes = userToSLAIndexes[_user];\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            SLAList[i] = (SLAs[userSLAIndexes[i]]);\\n        }\\n\\n        return (SLAList);\\n    }\\n\\n    /**\\n     * @dev public view function that returns all the service level agreements\\n     * @return SLA[] array of SLAs\\n     */\\n    function allSLAs() public view returns (SLA[] memory) {\\n        return (SLAs);\\n    }\\n\\n    /**\\n     * @dev public view function that returns true if _slaAddress was deployed using this SLARegistry\\n     * @param _slaAddress address of the SLA to be checked\\n     */\\n    function isRegisteredSLA(address _slaAddress) public view returns (bool) {\\n        return registeredSLAs[_slaAddress];\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/SLORegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SLORegistry\\n * @dev SLORegistry is a contract for handling creation of service level\\n * objectives and querying those service level objectives\\n */\\ncontract SLORegistry {\\n    enum SLOType {\\n        EqualTo,\\n        NotEqualTo,\\n        SmallerThan,\\n        SmallerOrEqualTo,\\n        GreaterThan,\\n        GreaterOrEqualTo\\n    }\\n\\n    struct SLO {\\n        uint256 sloValue;\\n        SLOType sloType;\\n    }\\n    /**\\n     * @dev SLO Registered event\\n     * @param sla 1. -\\n     * @param sloValue 2. -\\n     * @param sloType 3. -\\n     */\\n    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\\n\\n    address private slaRegistry;\\n    mapping(address => SLO) public registeredSLO;\\n\\n    modifier onlySLARegistry {\\n        require(\\n            msg.sender == slaRegistry,\\n            \\\"Should only be called using the SLARegistry contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function setSLARegistry() public {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev public function for creating service level objectives\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _slaAddress 3. -\\n     */\\n    function registerSLO(\\n        uint256 _sloValue,\\n        SLOType _sloType,\\n        address _slaAddress\\n    ) public onlySLARegistry {\\n        registeredSLO[_slaAddress] = SLO({\\n            sloValue: _sloValue,\\n            sloType: _sloType\\n        });\\n        emit SLORegistered(_slaAddress, _sloValue, _sloType);\\n    }\\n\\n    /**\\n     * @dev external view function to check a value against the SLO\\n     * @param _value The SLI value to check against the SL\\n     * @return boolean with the SLO honored state\\n     */\\n    function isRespected(uint256 _value, address _slaAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        SLO memory slo = registeredSLO[_slaAddress];\\n        SLOType sloType = slo.sloType;\\n        uint256 sloValue = slo.sloValue;\\n\\n        if (sloType == SLOType.EqualTo) {\\n            return _value == sloValue;\\n        }\\n\\n        if (sloType == SLOType.NotEqualTo) {\\n            return _value != sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerThan) {\\n            return _value < sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerOrEqualTo) {\\n            return _value <= sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterThan) {\\n            return _value > sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterOrEqualTo) {\\n            return _value >= sloValue;\\n        }\\n        revert(\\\"isRespected wasn't executed properly\\\");\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/Staking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\ncontract Staking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev StakeRegistry contract\\n    StakeRegistry private stakeRegistry;\\n    /// @dev SLARegistry contract\\n    PeriodRegistry private immutable periodRegistry;\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providerPool;\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public usersPool;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => ERC20PresetMinterPauser) public duTokenRegistry;\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => ERC20PresetMinterPauser) public dpTokenRegistry;\\n\\n    /// @dev address[] of the stakers of the SLA contract\\n    address[] public stakers;\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n    /// @dev DSLA token address to burn fees\\n    address public immutable dslaTokenAddress;\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev PeriodRegistry period type of the SLA contract\\n    PeriodRegistry.PeriodType private immutable periodType;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token) == true, \\\"token not allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted {\\n        if (whitelistedContract == true) {\\n            require(whitelist[msg.sender] == true, \\\"not whitelisted\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev event for provider reward log\\n     * @param periodId 1. id of the period\\n     * @param tokenAddress 2. address of the token\\n     * @param rewardPercentage 3. reward percentage for the provider\\n     * @param rewardPercentagePrecision 4. reward percentage for the provider\\n     * @param rewardAmount 5. amount rewarded\\n     */\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 usersStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    /**\\n     *@param _slaRegistryAddress 1. period type of the SLA\\n     *@param _periodType 3. period type of the SLA\\n     *@param _whitelistedContract 5. enables the white list feature\\n     *@param _slaID 6. identifies the SLA to uniquely to emit dTokens\\n     */\\n    constructor(\\n        SLARegistry _slaRegistry,\\n        PeriodRegistry.PeriodType _periodType,\\n        bool _whitelistedContract,\\n        uint128 _slaID,\\n        uint64 _leverage,\\n        address _contractOwner\\n    ) public {\\n        stakeRegistry = _slaRegistry.stakeRegistry();\\n        periodRegistry = _slaRegistry.periodRegistry();\\n        periodType = _periodType;\\n        whitelistedContract = _whitelistedContract;\\n        (uint256 _DSLAburnRate, , , , , , , uint64 _maxLeverage) =\\n            stakeRegistry.getStakingParameters();\\n        dslaTokenAddress = stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[_contractOwner] = true;\\n        slaID = _slaID;\\n        require(\\n            _leverage <= _maxLeverage && _leverage >= 1,\\n            \\\"incorrect leverage\\\"\\n        );\\n        leverage = _leverage;\\n    }\\n\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == false) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == true) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *@dev add a token to ve allowed for staking\\n     *@param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, ) =\\n            stakeRegistry.getStakingParameters();\\n        require(!isAllowedToken(_tokenAddress), \\\"already added\\\");\\n        require(\\n            stakeRegistry.isAllowedToken(_tokenAddress),\\n            \\\"not allowed by SLARegistry\\\"\\n        );\\n        allowedTokens.push(_tokenAddress);\\n        require(\\n            maxTokenLength >= allowedTokens.length,\\n            \\\"max token length\\\"\\n        );\\n        string memory dTokenID = StringUtils.uintToStr(slaID);\\n        string memory duTokenName =\\n            string(abi.encodePacked(\\\"DSLA-SHORT-\\\", dTokenID));\\n        string memory duTokenSymbol =\\n            string(abi.encodePacked(\\\"DSLA-SP-\\\", dTokenID));\\n        string memory dpTokenName =\\n            string(abi.encodePacked(\\\"DSLA-LONG-\\\", dTokenID));\\n        string memory dpTokenSymbol =\\n            string(abi.encodePacked(\\\"DSLA-LP-\\\", dTokenID));\\n\\n        ERC20PresetMinterPauser duToken =\\n            ERC20PresetMinterPauser(\\n                stakeRegistry.createDToken(duTokenName, duTokenSymbol)\\n            );\\n        ERC20PresetMinterPauser dpToken =\\n            ERC20PresetMinterPauser(\\n                stakeRegistry.createDToken(dpTokenName, dpTokenSymbol)\\n            );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenName,\\n            address(duToken),\\n            duTokenName,\\n            duTokenName\\n        );\\n    }\\n\\n    /**\\n     *@dev increase the amount staked per token\\n     *@param _amount 1. amount to be staked\\n     *@param _tokenAddress 2. address of the token\\n     *@notice providers can stake at any time\\n     *@notice users can stake at any time but no more than provider pool\\n     */\\n    function _stake(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n        onlyWhitelisted\\n    {\\n        ERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        //duTokens\\n        if (msg.sender != owner()) {\\n            (uint256 providerStake, uint256 usersStake) =\\n                (providerPool[_tokenAddress], usersPool[_tokenAddress]);\\n            require(\\n                usersStake.add(_amount).mul(leverage) <= providerStake,\\n                \\\"incorrect user stake\\\"\\n            );\\n            ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // if there's no minted tokens, then create 1-1 proportion\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = usersPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDUTokens = _amount.mul(p0).div(t0);\\n                duToken.mint(msg.sender, mintedDUTokens);\\n            }\\n            usersPool[_tokenAddress] = usersPool[_tokenAddress].add(_amount);\\n            //dpTokens\\n        } else {\\n            ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = providerPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDPTokens = _amount.mul(p0).div(t0);\\n                dpToken.mint(msg.sender, mintedDPTokens);\\n            }\\n\\n            providerPool[_tokenAddress] = providerPool[_tokenAddress].add(\\n                _amount\\n            );\\n        }\\n\\n        if (registeredStakers[msg.sender] == false) {\\n            registeredStakers[msg.sender] = true;\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     *@dev sets the provider reward\\n     *@notice it calculates the usersStake and calculates the provider reward from it.\\n     * @param _periodId 1. id of the period\\n     * @param _rewardPercentage to calculate the provider reward\\n     * @param _precision used to avoid getting 0 after division in the SLA's registerSLI function\\n     */\\n    function _setRespectedPeriodReward(\\n        uint256 _periodId,\\n        uint256 _rewardPercentage,\\n        uint256 _precision\\n    ) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 reward = usersStake.mul(_rewardPercentage).div(_precision);\\n\\n            usersPool[tokenAddress] = usersPool[tokenAddress].sub(reward);\\n\\n            providerPool[tokenAddress] = providerPool[tokenAddress].add(reward);\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev sets the users compensation pool\\n     *@notice it calculates the usersStake and calculates the users compensation from it\\n     */\\n    function _setUsersCompensation(uint256 _periodId) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 compensation = usersStake.mul(leverage);\\n            providerPool[tokenAddress] = providerPool[tokenAddress].sub(\\n                compensation\\n            );\\n            usersPool[tokenAddress] = usersPool[tokenAddress].add(compensation);\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersStake,\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev withdraw staked tokens. Only dpToken owners can withdraw,\\n     *@param _amount 1. amount to be withdrawn\\n     *@param _tokenAddress 2. address of the token\\n     *@param _contractFinished 3. contract finished\\n     */\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) {\\n        uint256 providerStake = providerPool[_tokenAddress];\\n        uint256 usersStake = usersPool[_tokenAddress];\\n        if (!_contractFinished) {\\n            require(\\n                providerStake.sub(_amount) >= usersStake.mul(leverage),\\n                \\\"incorrect withdraw\\\"\\n            );\\n        }\\n        ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n        uint256 p0 = dpToken.totalSupply();\\n        uint256 t0 = providerPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        // burnedDPTokens = _amount*p0/t0\\n        uint256 burnedDPTokens = _amount.mul(p0).div(t0);\\n        dpToken.burnFrom(msg.sender, burnedDPTokens);\\n        providerPool[_tokenAddress] = providerPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *@dev withdraw staked tokens. Only duToken owners can withdraw,\\n     *@param _amount 1. amount to be withdrawn\\n     *@param _tokenAddress 2. address of the token\\n     */\\n    function _withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n    {\\n        ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n        uint256 p0 = duToken.totalSupply();\\n        uint256 t0 = usersPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens\\n        // average for current period.\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        // burnedDUTokens = _amount*p0/t0\\n        uint256 burnedDUTokens = _amount.mul(p0).div(t0);\\n        duToken.burnFrom(msg.sender, burnedDUTokens);\\n        usersPool[_tokenAddress] = usersPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *@dev use this function to evaluate the length of the allowed tokens length\\n     *@return allowedTokens.length\\n     */\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    function getTokenStake(address _staker, uint256 _allowedTokenIndex)\\n        external\\n        view\\n        returns (address tokenAddress, uint256 stake)\\n    {\\n        address allowedTokenAddress = allowedTokens[_allowedTokenIndex];\\n        if (_staker == owner()) {\\n            return (allowedTokenAddress, providerPool[allowedTokenAddress]);\\n        } else {\\n            ERC20PresetMinterPauser dToken =\\n                duTokenRegistry[allowedTokenAddress];\\n            uint256 dTokenSupply = dToken.totalSupply();\\n            if (dTokenSupply == 0) {\\n                return (allowedTokenAddress, 0);\\n            }\\n            uint256 dTokenBalance = dToken.balanceOf(_staker);\\n            return (\\n                allowedTokenAddress,\\n                usersPool[allowedTokenAddress].mul(dTokenBalance).div(\\n                    dTokenSupply\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     *@dev checks in the allowedTokens array if there's a token with _tokenAddress value\\n     *@param _tokenAddress 1. token address to check exixtence\\n     *@return true if _tokenAddress exists in the allowedTokens array\\n     */\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/MessengerRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./messenger/IMessenger.sol\\\";\\n\\n/**\\n * @title MessengerRegistry\\n * @dev MessengerRegistry is a contract to register openly distributed Messengers\\n */\\ncontract MessengerRegistry {\\n    struct Messenger {\\n        address ownerAddress;\\n        address messengerAddress;\\n        string specificationUrl;\\n        uint256 precision;\\n        uint256 requestsCounter;\\n        uint256 fulfillsCounter;\\n        uint256 id;\\n    }\\n\\n    /// @dev array to store the messengers\\n    Messenger[] public messengers;\\n    /// @dev (messengerAddress=>bool) to check if the Messenger was\\n    mapping(address => bool) public registeredMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the messengers of an owner\\n    mapping(address => uint256[]) public ownerMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the owner of a Messenger\\n    address public slaRegistry;\\n\\n    event MessengerRegistered(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    event MessengerModified(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev function to register a new Messenger\\n     */\\n    function registerMessenger(\\n        address _callerAddress,\\n        address _messengerAddress,\\n        string calldata _specificationUrl\\n    ) external {\\n        require(\\n            msg.sender == slaRegistry,\\n            \\\"Should only be called using the SLARegistry contract\\\"\\n        );\\n        require(\\n            !registeredMessengers[_messengerAddress],\\n            \\\"messenger already registered\\\"\\n        );\\n\\n        IMessenger messenger = IMessenger(_messengerAddress);\\n        address messengerOwner = messenger.owner();\\n        require(\\n            messengerOwner == _callerAddress,\\n            \\\"Should only be called by the messenger owner\\\"\\n        );\\n        uint256 precision = messenger.messengerPrecision();\\n        uint256 requestsCounter = messenger.requestsCounter();\\n        uint256 fulfillsCounter = messenger.fulfillsCounter();\\n        registeredMessengers[_messengerAddress] = true;\\n        uint256 id = messengers.length - 1;\\n        ownerMessengers[messengerOwner].push(id);\\n\\n        messengers.push(\\n            Messenger({\\n                ownerAddress: messengerOwner,\\n                messengerAddress: _messengerAddress,\\n                specificationUrl: _specificationUrl,\\n                precision: precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: id\\n            })\\n        );\\n\\n        emit MessengerRegistered(\\n            messengerOwner,\\n            _messengerAddress,\\n            _specificationUrl,\\n            precision,\\n            id\\n        );\\n    }\\n\\n    /**\\n     * @dev function to modifyMessenger a Messenger\\n     */\\n    function modifyMessenger(\\n        string calldata _specificationUrl,\\n        uint256 _messengerId\\n    ) external {\\n        Messenger storage storedMessenger = messengers[_messengerId];\\n        IMessenger messenger = IMessenger(storedMessenger.messengerAddress);\\n        require(\\n            msg.sender == messenger.owner(),\\n            \\\"Can only be modified by the owner\\\"\\n        );\\n        storedMessenger.specificationUrl = _specificationUrl;\\n        storedMessenger.ownerAddress = msg.sender;\\n        emit MessengerModified(\\n            storedMessenger.ownerAddress,\\n            storedMessenger.messengerAddress,\\n            storedMessenger.specificationUrl,\\n            storedMessenger.precision,\\n            storedMessenger.id\\n        );\\n    }\\n\\n    function getMessengers() external view returns (Messenger[] memory) {\\n        Messenger[] memory returnMessengers =\\n            new Messenger[](messengers.length);\\n        for (uint256 index = 0; index < messengers.length; index++) {\\n            IMessenger messenger =\\n                IMessenger(messengers[index].messengerAddress);\\n            uint256 requestsCounter = messenger.requestsCounter();\\n            uint256 fulfillsCounter = messenger.fulfillsCounter();\\n            returnMessengers[index] = Messenger({\\n                ownerAddress: messengers[index].ownerAddress,\\n                messengerAddress: messengers[index].messengerAddress,\\n                specificationUrl: messengers[index].specificationUrl,\\n                precision: messengers[index].precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: messengers[index].id\\n            });\\n        }\\n        return returnMessengers;\\n    }\\n\\n    function getMessengersLength() external view returns (uint256) {\\n        return messengers.length;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/Details.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SLA.sol\\\";\\nimport \\\"./SLARegistry.sol\\\";\\nimport \\\"./SLORegistry.sol\\\";\\nimport \\\"./StakeRegistry.sol\\\";\\nimport \\\"./PeriodRegistry.sol\\\";\\nimport \\\"./MessengerRegistry.sol\\\";\\nimport \\\"./Staking.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title Details\\n * @dev Details is a contract to fetch details of contracts with a single RPC endpoint\\n */\\ncontract Details {\\n    struct TokenStake {\\n        address tokenAddress;\\n        uint256 totalStake;\\n        uint256 usersPool;\\n        uint256 providerPool;\\n    }\\n\\n    struct DtokenDetails {\\n        address tokenAddress;\\n        uint256 totalSupply;\\n        address dTokenAddress;\\n        string dTokenSymbol;\\n        string dTokenName;\\n        uint256 balance;\\n        uint256 allowance;\\n    }\\n\\n    /**\\n     * @dev external view function that returns all dynamic agreement information\\n     * @return breachedContract 1. breached contract\\n     * @return stakersCount 2. amount of stakers\\n     * @return nextVerifiablePeriod 3. amount of stakers\\n     */\\n\\n    function getSLADynamicDetails(address _slaAddress)\\n        external\\n        view\\n        returns (\\n            bool breachedContract,\\n            uint256 stakersCount,\\n            uint256 nextVerifiablePeriod,\\n            uint64 leverage\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        breachedContract = sla.breachedContract();\\n        stakersCount = sla.getStakersLength();\\n        nextVerifiablePeriod = sla.nextVerifiablePeriod();\\n        leverage = sla.leverage();\\n    }\\n\\n    function getSLAStaticDetails(address _slaAddress, SLORegistry _sloRegistry)\\n        external\\n        view\\n        returns (\\n            address slaOwner,\\n            address messengerAddress,\\n            uint256 sloValue,\\n            uint256 creationBlockNumber,\\n            uint256 slaId,\\n            uint128 initialPeriodId,\\n            uint128 finalPeriodId,\\n            bool whiteListed,\\n            PeriodRegistry.PeriodType periodType,\\n            SLORegistry.SLOType sloType,\\n            string memory ipfsHash\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        slaOwner = sla.owner();\\n        messengerAddress = sla.messengerAddress();\\n        whiteListed = sla.whitelistedContract();\\n        periodType = sla.periodType();\\n        (sloValue, sloType) = _sloRegistry.registeredSLO(_slaAddress);\\n        creationBlockNumber = sla.creationBlockNumber();\\n        slaId = sla.slaID();\\n        ipfsHash = sla.ipfsHash();\\n        initialPeriodId = sla.initialPeriodId();\\n        finalPeriodId = sla.finalPeriodId();\\n    }\\n\\n    function getSLADetailsArrays(address _slaAddress)\\n        external\\n        view\\n        returns (\\n            SLA.PeriodSLI[] memory periodSLIs,\\n            TokenStake[] memory tokensStake\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        uint256 initialPeriodId = sla.initialPeriodId();\\n        uint256 finalPeriodId = sla.finalPeriodId();\\n        uint256 periodIdsLength = finalPeriodId - initialPeriodId + 1;\\n        periodSLIs = new SLA.PeriodSLI[](periodIdsLength);\\n        for (uint256 index = 0; index < periodIdsLength; index++) {\\n            uint256 periodId = initialPeriodId + index;\\n            (uint256 timestamp, uint256 sli, SLA.Status status) =\\n                sla.periodSLIs(periodId);\\n            periodSLIs[index] = SLA.PeriodSLI({\\n                status: status,\\n                sli: sli,\\n                timestamp: timestamp\\n            });\\n        }\\n        uint256 allowedTokensLength = sla.getAllowedTokensLength();\\n        tokensStake = new TokenStake[](allowedTokensLength);\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            address tokenAddress = sla.allowedTokens(index);\\n            tokensStake[index] = TokenStake({\\n                tokenAddress: tokenAddress,\\n                totalStake: sla.usersPool(sla.allowedTokens(index)) +\\n                    sla.providerPool(sla.allowedTokens(index)),\\n                usersPool: sla.usersPool(sla.allowedTokens(index)),\\n                providerPool: sla.providerPool(sla.allowedTokens(index))\\n            });\\n        }\\n    }\\n\\n    function getDTokensDetails(address _slaAddress, address _owner)\\n        public\\n        view\\n        returns (\\n            DtokenDetails[] memory dpTokens,\\n            DtokenDetails[] memory duTokens\\n        )\\n    {\\n        bool fromOwner = _owner != address(0x0);\\n        SLA sla = SLA(_slaAddress);\\n        uint256 allowedTokensLength = sla.getAllowedTokensLength();\\n        dpTokens = new DtokenDetails[](allowedTokensLength);\\n        duTokens = new DtokenDetails[](allowedTokensLength);\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            address tokenAddress = sla.allowedTokens(index);\\n            address dpTokenAddress = address(sla.dpTokenRegistry(tokenAddress));\\n            dpTokens[index] = DtokenDetails({\\n                dTokenAddress: dpTokenAddress,\\n                tokenAddress: tokenAddress,\\n                totalSupply: ERC20(dpTokenAddress).totalSupply(),\\n                dTokenSymbol: ERC20(dpTokenAddress).symbol(),\\n                dTokenName: ERC20(dpTokenAddress).name(),\\n                balance: fromOwner\\n                    ? ERC20(dpTokenAddress).balanceOf(_owner)\\n                    : 0,\\n                allowance: fromOwner\\n                    ? ERC20(dpTokenAddress).allowance(_owner, _slaAddress)\\n                    : 0\\n            });\\n            address duTokenAddress = address(sla.duTokenRegistry(tokenAddress));\\n            duTokens[index] = DtokenDetails({\\n                dTokenAddress: duTokenAddress,\\n                tokenAddress: tokenAddress,\\n                totalSupply: ERC20(duTokenAddress).totalSupply(),\\n                dTokenSymbol: ERC20(duTokenAddress).symbol(),\\n                dTokenName: ERC20(duTokenAddress).name(),\\n                balance: fromOwner\\n                    ? ERC20(duTokenAddress).balanceOf(_owner)\\n                    : 0,\\n                allowance: fromOwner\\n                    ? ERC20(duTokenAddress).allowance(_owner, _slaAddress)\\n                    : 0\\n            });\\n        }\\n    }\\n\\n    function _addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = \\\"0\\\";\\n        _string[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-protocol/contracts/use-cases/staking-efficiency/SEMessenger.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\\\";\\nimport \\\"../../SLA.sol\\\";\\nimport \\\"../../PeriodRegistry.sol\\\";\\nimport \\\"../../StringUtils.sol\\\";\\nimport \\\"./NetworkAnalytics.sol\\\";\\nimport \\\"../../messenger/IMessenger.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title SEMessenger\\n * @dev Staking efficiency Messenger\\n */\\n\\ncontract SEMessenger is ChainlinkClient, IMessenger, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev Mapping that stores chainlink sli request information\\n    mapping(bytes32 => SLIRequest) public requestIdToSLIRequest;\\n    /// @dev Array with all request IDs\\n    bytes32[] public requests;\\n    /// @dev The address of the SLARegistry contract\\n    address private _slaRegistryAddress;\\n    /// @dev Network analytics contract address\\n    address public immutable networkAnalyticsAddress;\\n    /// @dev Chainlink oracle address\\n    address private immutable _oracle;\\n    /// @dev chainlink jobId\\n    bytes32 private _jobId;\\n    // @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 private constant _baseFee = 0.1 ether;\\n    /// @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 private _fee;\\n    /// @dev to multiply the SLI value and get better precision. Useful to deploy SLO correctly\\n    uint256 private constant _messengerPrecision = 10**3;\\n\\n    uint256 private _requestsCounter;\\n    uint256 private _fulfillsCounter;\\n\\n    /**\\n     * @dev parameterize the variables according to network\\n     * @notice sets the Chainlink parameters (oracle address, token address, jobId) and sets the SLARegistry to 0x0 address\\n     * @param _messengerChainlinkOracle 1. the address of the oracle to create requests to\\n     * @param _messengerChainlinkToken 2. the address of LINK token contract\\n     * @param _messengerJobId 3. the job id for Staking efficiency job\\n     * @param _networkAnalyticsAddress 4. Network analytics contract address\\n     * @param _feeMultiplier 6. states the amount of paid nodes running behind the precoordinator, to set the fee\\n     */\\n    constructor(\\n        address _messengerChainlinkOracle,\\n        address _messengerChainlinkToken,\\n        bytes32 _messengerJobId,\\n        address _networkAnalyticsAddress,\\n        uint256 _feeMultiplier\\n    ) public {\\n        _jobId = _messengerJobId;\\n        setChainlinkToken(_messengerChainlinkToken);\\n        _oracle = _messengerChainlinkOracle;\\n        networkAnalyticsAddress = _networkAnalyticsAddress;\\n        _fee = _feeMultiplier * _baseFee;\\n    }\\n\\n    /**\\n     * @dev event emitted when modifying the jobId\\n     * @param owner 1. -\\n     * @param jobId 2. -\\n     * @param fee 3. -\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev event emitted when modifying the jobId\\n     * @param caller 1. -\\n     * @param requestsCounter 2. -\\n     * @param requestId 3. -\\n     */\\n    event SLIRequested(\\n        address indexed caller,\\n        uint256 requestsCounter,\\n        bytes32 requestId\\n    );\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == _slaRegistryAddress,\\n            \\\"Can only be called by SLARegistry\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() public override {\\n        // Only able to trigger this function once\\n        require(\\n            _slaRegistryAddress == address(0),\\n            \\\"SLARegistry address has already been set\\\"\\n        );\\n\\n        _slaRegistryAddress = msg.sender;\\n    }\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. value of the period id\\n     * @param _slaAddress 2. SLA Address\\n     * @param _messengerOwnerApproval 3. if approval by owner or msg sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _messengerOwnerApproval,\\n        address _callerAddress\\n    ) public override onlySLARegistry nonReentrant {\\n        SLA sla = SLA(_slaAddress);\\n        PeriodRegistry.PeriodType periodType = sla.periodType();\\n        // extraData[0] is the networkName for StakingEfficiency use case\\n        bytes32 networkName = sla.extraData(0);\\n        bytes32 ipfsAnalytics =\\n            NetworkAnalytics(networkAnalyticsAddress).periodAnalytics(\\n                networkName,\\n                periodType,\\n                _periodId\\n            );\\n        require(\\n            ipfsAnalytics != 0,\\n            \\\"Network analytics object is not assigned yet\\\"\\n        );\\n        if (_messengerOwnerApproval) {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                owner(),\\n                address(this),\\n                _fee\\n            );\\n        } else {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                _callerAddress,\\n                address(this),\\n                _fee\\n            );\\n        }\\n        Chainlink.Request memory request =\\n            buildChainlinkRequest(\\n                _jobId,\\n                address(this),\\n                this.fulfillSLI.selector\\n            );\\n        request.add(\\\"job_type\\\", \\\"staking_efficiency\\\");\\n        request.add(\\\"period_id\\\", StringUtils.uintToStr(_periodId));\\n        request.add(\\\"sla_address\\\", StringUtils.addressToString(_slaAddress));\\n        request.add(\\n            \\\"network_analytics_address\\\",\\n            StringUtils.addressToString(networkAnalyticsAddress)\\n        );\\n\\n        // Sends the request with 0.1 LINK to the oracle contract\\n        bytes32 requestId = sendChainlinkRequestTo(_oracle, request, _fee);\\n\\n        requests.push(requestId);\\n\\n        requestIdToSLIRequest[requestId] = SLIRequest({\\n            slaAddress: _slaAddress,\\n            periodId: _periodId\\n        });\\n\\n        _requestsCounter += 1;\\n        emit SLIRequested(_callerAddress, _requestsCounter, requestId);\\n    }\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        override\\n        nonReentrant\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        bytes32 _chainlinkResponse = bytes32(_chainlinkResponseUint256);\\n        SLIRequest memory request = requestIdToSLIRequest[_requestId];\\n        emit SLIReceived(\\n            request.slaAddress,\\n            request.periodId,\\n            _requestId,\\n            _chainlinkResponse\\n        );\\n        (uint256 hits, uint256 misses) = parseSLIData(_chainlinkResponse);\\n        uint256 total = hits.add(misses);\\n        uint256 stakingEfficiency =\\n            hits.mul(100 * _messengerPrecision).div(total);\\n        SLA(request.slaAddress).registerSLI(\\n            stakingEfficiency,\\n            request.periodId\\n        );\\n\\n        _fulfillsCounter += 1;\\n    }\\n\\n    /**\\n     * @dev recieves a string of \\\"hits,misses\\\" data and returns hits and misses as uint256\\n     * @param sliData the ID of the ChainLink request\\n     */\\n    function parseSLIData(bytes32 sliData)\\n        public\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        bytes memory bytesSLIData = bytes(StringUtils.bytes32ToStr(sliData));\\n        uint256 sliDataLength = bytesSLIData.length;\\n        bytes memory bytesHits = new bytes(sliDataLength);\\n        bytes memory bytesMisses = new bytes(sliDataLength);\\n        for (uint256 index; index < sliDataLength; index++) {\\n            if (bytesSLIData[index] == bytes1(\\\",\\\")) {\\n                for (uint256 index2 = 0; index2 < index; index2++) {\\n                    bytesHits[index2] = bytesSLIData[index2];\\n                }\\n                for (\\n                    uint256 index3 = 0;\\n                    index3 < sliDataLength - index - 1;\\n                    index3++\\n                ) {\\n                    bytesMisses[index3] = bytesSLIData[index + 1 + index3];\\n                }\\n            }\\n        }\\n        uint256 hits = StringUtils.bytesToUint(bytesHits);\\n        uint256 misses = StringUtils.bytesToUint(bytesMisses);\\n        return (hits, misses);\\n    }\\n\\n    /**\\n     * @dev sets a new jobId, which is a agreement Id of a PreCoordinator contract\\n     * @param _newJobId the id of the PreCoordinator agreement\\n     * @param _feeMultiplier how many Chainlink nodes would be paid on the agreement id, to set the fee value\\n     */\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        _jobId = _newJobId;\\n        _fee = _feeMultiplier * _baseFee;\\n        emit JobIdModified(msg.sender, _newJobId, _fee);\\n    }\\n\\n    /**\\n     * @dev returns the value of the sla registry address\\n     */\\n    function slaRegistryAddress() external view override returns (address) {\\n        return _slaRegistryAddress;\\n    }\\n\\n    /**\\n     * @dev returns the value of the messenger precision\\n     */\\n    function messengerPrecision() external view override returns (uint256) {\\n        return _messengerPrecision;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink oracle contract address\\n     */\\n    function oracle() external view override returns (address) {\\n        return _oracle;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink job id\\n     */\\n    function jobId() external view override returns (bytes32) {\\n        return _jobId;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink fee value on LINK tokens\\n     */\\n    function fee() external view override returns (uint256) {\\n        return _fee;\\n    }\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view override returns (uint256) {\\n        return _requestsCounter;\\n    }\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view override returns (uint256) {\\n        return _fulfillsCounter;\\n    }\\n}\\n\"\n    },\n    \"contracts/DSLA.sol\": {\n      \"content\": \"// Entrypoint chainlink\\npragma solidity 0.6.6;\\nimport \\\"@stacktical/dsla-protocol/contracts/SLARegistry.sol\\\";\\nimport \\\"@stacktical/dsla-protocol/contracts/Details.sol\\\";\\nimport \\\"@stacktical/dsla-protocol/contracts/use-cases/staking-efficiency/SEMessenger.sol\\\";\\n\"\n    },\n    \"contracts/dummy-tokens/USDC.sol\": {\n      \"content\": \"// USDC.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\n\\n/**\\n * @dev {USDC} Dummy test token, for development purposes only\\n */\\n\\ncontract USDC is ERC20PresetMinterPauser {\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, {decimals} have\\n     * a default value of 18.\\n     * @notice token name: USDC , token symbol: USDC\\n     */\\n    constructor() public ERC20PresetMinterPauser(\\\"USDC\\\", \\\"USDC\\\") {\\n        mint(msg.sender, 10**27);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * @param to 1. address of receiver\\n     * @param amount 2. minted amount\\n     */\\n    function mint(address to, uint256 amount) public override {\\n        _mint(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/dummy-tokens/DSLA.sol\": {\n      \"content\": \"// DSLA.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\n\\n/**\\n * @dev {DSLA} Dummy test token, for development purposes only\\n */\\n\\ncontract DSLA is ERC20PresetMinterPauser {\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, {decimals} have\\n     * a default value of 18.\\n     * @notice token name: DSLA , token symbol: DSLA\\n     */\\n    constructor() public ERC20PresetMinterPauser(\\\"DSLA\\\", \\\"DSLA\\\") {\\n        mint(msg.sender, 10**27);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * @param to 1. address of receiver\\n     * @param amount 2. minted amount\\n     */\\n    function mint(address to, uint256 amount) public override {\\n        _mint(to, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/dummy-tokens/DAI.sol\": {\n      \"content\": \"// DAI.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\\\";\\n\\n/**\\n * @dev {DAI} Dummy test token, for development purposes only\\n */\\n\\ncontract DAI is ERC20PresetMinterPauser {\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, {decimals} have\\n     * a default value of 18.\\n     * @notice token name: DAI , token symbol: DAI\\n     */\\n    constructor() public ERC20PresetMinterPauser(\\\"DAI\\\", \\\"DAI\\\") {\\n        mint(msg.sender, 10**27);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * @param to 1. address of receiver\\n     * @param amount 2. minted amount\\n     */\\n    function mint(address to, uint256 amount) public override {\\n        _mint(to, amount);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "7f5e3a410ad4390ba158804c6e042425",
      "transactionHash": "0x01f7e111c1fc2e6588bd39545c0f73f346501effc5f98efe09f915f02b474d1c",
      "args": [
        "0x2320653E06Dd38C6dC8EbD545BBFCc8d3725c547",
        "0x3E7b41F66378b7a3D519bb974c38b5A14e797AA8",
        "0x5b1b1155Ede32Af99DB641EC35188F7dA461F8de",
        "0x476E975d3c55E6a26e6c23a3BD10542FCaD0FdD0",
        false
      ]
    },
    "decoded": {
      "from": "0x25c0E8Fe8bc7a01a66A5C2008E85fA9A01C73113",
      "gasPrice": "1000000000",
      "gasLimit": "12000000",
      "to": null,
      "value": "0",
      "nonce": 817,
      "data": "",
      "r": "0xf6d6f9c2c77a2e652fbf9517862cfaa54a560b18a7765bf8ca85c2262a1234f2",
      "s": "0x002c5c66300e5c70f8cc1d12e49e1488b3304b628148532c03050aa90224ce70",
      "v": 3333400035,
      "chainId": 1666700000
    }
  }
}