{
  "address": "0x99F4e62a317cc666589c9e370c73c15B158f3c61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CancelOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelExpiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPIRY_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunc",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOracleRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "getAuthorizationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_specId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "oracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setFulfillmentPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x402eaa62a2c741c0297390eaae4393bffb55c0375b606ebf700be498ed421fe8",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0x99F4e62a317cc666589c9e370c73c15B158f3c61",
    "transactionIndex": 242,
    "gasUsed": "1142727",
    "logsBloom": "0x
    "blockHash": "0xf9d6ea630e076ea790ecc9b31c620ef53513f968687aec9edd857f9cbf99b4d2",
    "transactionHash": "0x402eaa62a2c741c0297390eaae4393bffb55c0375b606ebf700be498ed421fe8",
    "logs": [
      {
        "transactionIndex": 242,
        "blockNumber": 10509283,
        "transactionHash": "0x402eaa62a2c741c0297390eaae4393bffb55c0375b606ebf700be498ed421fe8",
        "address": "0x99F4e62a317cc666589c9e370c73c15B158f3c61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6"
        ],
        "data": "0x",
        "logIndex": 768,
        "blockHash": "0xf9d6ea630e076ea790ecc9b31c620ef53513f968687aec9edd857f9cbf99b4d2"
      }
    ],
    "blockNumber": 10509283,
    "cumulativeGasUsed": "42623738",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd"
  ],
  "solcInputHash": "b60ff3a3069df4f3117561968383abbc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CancelOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXPIRY_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"getAuthorizationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_specId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setFulfillmentPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"details\":\"Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.\",\"params\":{\"_callbackFunc\":\"The requester's specified callback address\",\"_expiration\":\"The time of the expiration for the request\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_requestId\":\"The request ID\"}},\"constructor\":{\"details\":\"Sets the LinkToken address for the imported LinkTokenInterface\",\"params\":{\"_link\":\"The address of the LINK token\"}},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"_callbackAddress\":\"The callback address to call for fulfillment\",\"_callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"_data\":\"The data to return to the consuming contract\",\"_expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"_payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"_requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"getAuthorizationStatus(address)\":{\"params\":{\"_node\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"getChainlinkToken()\":{\"details\":\"This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.\",\"params\":{\"_amount\":\"Amount of LINK sent (specified in wei)\",\"_data\":\"Payload of the transaction\",\"_sender\":\"Address of the sender\"}},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"details\":\"Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.\",\"params\":{\"_callbackAddress\":\"The callback address for the response\",\"_callbackFunctionId\":\"The callback function ID for the response\",\"_data\":\"The CBOR payload of the request\",\"_dataVersion\":\"The specified data version\",\"_nonce\":\"The nonce sent by the requester\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_sender\":\"The sender of the request\",\"_specId\":\"The Job Specification ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setFulfillmentPermission(address,bool)\":{\"params\":{\"_allowed\":\"Bool value to determine if the node can fulfill requests\",\"_node\":\"The address of the Chainlink node\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"The owner of the contract can be another wallet and does not have to be a Chainlink node\",\"params\":{\"_amount\":\"The amount to send (specified in wei)\",\"_recipient\":\"The address to send the LINK token to\"}},\"withdrawable()\":{\"details\":\"We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\",\"returns\":{\"_0\":\"The amount of withdrawable LINK on the contract\"}}},\"title\":\"The Chainlink Oracle contract\"},\"userdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"notice\":\"Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address.\"},\"constructor\":\"Deploy with the address of the LINK token\",\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"notice\":\"Called by the Chainlink node to fulfill requests\"},\"getAuthorizationStatus(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"getChainlinkToken()\":{\"notice\":\"Returns the address of the LINK token\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called when LINK is sent to the contract via `transferAndCall`\"},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"notice\":\"Creates the Chainlink request\"},\"setFulfillmentPermission(address,bool)\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"},\"withdraw(address,uint256)\":{\"notice\":\"Allows the node operator to withdraw earned LINK to a given address\"},\"withdrawable()\":{\"notice\":\"Displays the amount of LINK that is available for the node operator to withdraw\"}},\"notice\":\"Node operators can deploy this contract to fulfill requests sent to them\"}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract LinkTokenReceiver {\\n\\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\\n  uint256 constant private SELECTOR_LENGTH = 4;\\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param _sender Address of the sender\\n   * @param _amount Amount of LINK sent (specified in wei)\\n   * @param _data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes memory _data\\n  )\\n    public\\n    onlyLINK\\n    validRequestLength(_data)\\n    permittedFunctionsForLINK(_data)\\n  {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param _data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory _data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(_data, 32))\\n    }\\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \\\"Must use whitelisted functions\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given payload is less than needed to create a request\\n   * @param _data The request payload\\n   */\\n  modifier validRequestLength(bytes memory _data) {\\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa856c0d069254b46ec90528fe9440485f7dd7efbf13b2b4c80a0e28910d25a95\"},\"@chainlink/contracts/src/v0.6/Oracle.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Oracle contract\\n * @notice Node operators can deploy this contract to fulfill requests sent to them\\n */\\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable, LinkTokenReceiver, WithdrawalInterface {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant public EXPIRY_TIME = 5 minutes;\\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n  // We initialize fields to 1 instead of 0 so that the first invocation\\n  // does not cost more gas.\\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\\n\\n  LinkTokenInterface internal LinkToken;\\n  mapping(bytes32 => bytes32) private commitments;\\n  mapping(address => bool) private authorizedNodes;\\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n  event OracleRequest(\\n    bytes32 indexed specId,\\n    address requester,\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddr,\\n    bytes4 callbackFunctionId,\\n    uint256 cancelExpiration,\\n    uint256 dataVersion,\\n    bytes data\\n  );\\n\\n  event CancelOracleRequest(\\n    bytes32 indexed requestId\\n  );\\n\\n  /**\\n   * @notice Deploy with the address of the LINK token\\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n   * @param _link The address of the LINK token\\n   */\\n  constructor(address _link)\\n    public\\n    Ownable()\\n  {\\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _specId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _dataVersion The specified data version\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256 _dataVersion,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n    onlyLINK()\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(commitments[requestId] == 0, \\\"Must use a unique ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 expiration = now.add(EXPIRY_TIME);\\n\\n    commitments[requestId] = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        expiration\\n      )\\n    );\\n\\n    emit OracleRequest(\\n      _specId,\\n      _sender,\\n      requestId,\\n      _payment,\\n      _callbackAddress,\\n      _callbackFunctionId,\\n      expiration,\\n      _dataVersion,\\n      _data);\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param _requestId The fulfillment request ID that must match the requester's\\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param _callbackAddress The callback address to call for fulfillment\\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\\n   * @param _data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration,\\n    bytes32 _data\\n  )\\n    external\\n    onlyAuthorizedNode\\n    override\\n    isValidRequest(_requestId)\\n    returns (bool)\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        _expiration\\n      )\\n    );\\n    require(commitments[_requestId] == paramsHash, \\\"Params do not match request ID\\\");\\n    withdrawableTokens = withdrawableTokens.add(_payment);\\n    delete commitments[_requestId];\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = _callbackAddress.call(abi.encodeWithSelector(_callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Use this to check if a node is authorized for fulfilling requests\\n   * @param _node The address of the Chainlink node\\n   * @return The authorization status of the node\\n   */\\n  function getAuthorizationStatus(address _node)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return authorizedNodes[_node];\\n  }\\n\\n  /**\\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n   * @param _node The address of the Chainlink node\\n   * @param _allowed Bool value to determine if the node can fulfill requests\\n   */\\n  function setFulfillmentPermission(address _node, bool _allowed)\\n    external\\n    override\\n    onlyOwner()\\n  {\\n    authorizedNodes[_node] = _allowed;\\n  }\\n\\n  /**\\n   * @notice Allows the node operator to withdraw earned LINK to a given address\\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n   * @param _recipient The address to send the LINK token to\\n   * @param _amount The amount to send (specified in wei)\\n   */\\n  function withdraw(address _recipient, uint256 _amount)\\n    external\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner\\n    hasAvailableFunds(_amount)\\n  {\\n    withdrawableTokens = withdrawableTokens.sub(_amount);\\n    assert(LinkToken.transfer(_recipient, _amount));\\n  }\\n\\n  /**\\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n   * @return The amount of withdrawable LINK on the contract\\n   */\\n  function withdrawable()\\n    external\\n    view\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner()\\n    returns (uint256)\\n  {\\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n  }\\n\\n  /**\\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\\n   * sent for the request back to the requester's address.\\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\\n   * Emits CancelOracleRequest event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _callbackFunc The requester's specified callback address\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        msg.sender,\\n        _callbackFunc,\\n        _expiration)\\n    );\\n    require(paramsHash == commitments[_requestId], \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(_expiration <= now, \\\"Request is not expired\\\");\\n\\n    delete commitments[_requestId];\\n    emit CancelOracleRequest(_requestId);\\n\\n    assert(LinkToken.transfer(msg.sender, _payment));\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken()\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    return address(LinkToken);\\n  }\\n\\n  // MODIFIERS\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param _amount The given amount to compare to `withdrawableTokens`\\n   */\\n  modifier hasAvailableFunds(uint256 _amount) {\\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \\\"Amount requested is greater than withdrawable balance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if request ID does not exist\\n   * @param _requestId The given request ID to check in stored `commitments`\\n   */\\n  modifier isValidRequest(bytes32 _requestId) {\\n    require(commitments[_requestId] != 0, \\\"Must have a valid requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\\n   */\\n  modifier onlyAuthorizedNode() {\\n    require(authorizedNodes[msg.sender] || msg.sender == owner(), \\\"Not an authorized node to fulfill requests\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != address(LinkToken), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xada59e77de7e044a8d4d229ed01d5bea5ec4c1da5bebea7d68501a60970a6639\"},\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion, // Currently unused, always \\\"1\\\"\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4b41b021bf58c429891ff291637de29be54741565105de82238dac9f6ecee374\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdbf46b45a4c9f38ba71a0391aed0e7b108854b619f292d907ae537228868bda6\"},\"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n  function getAuthorizationStatus(address node) external view returns (bool);\\n  function setFulfillmentPermission(address node, bool allowed) external;\\n  function withdraw(address recipient, uint256 amount) external;\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x325ca1599835f823a92e3e03eb900caae683e873937adb2924e435fa10d6e30a\"},\"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5aa4e79f8e49d7b2e5e16cb5c152a63efafbdaa24f34749fa3793df6b683068\"},\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x3dfd577392b1fde3e54f76a81358fd27c041f30257bb9438f0bb5952e351befa\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x5e6948bb332468d8ef0704b4259babc8aef7ce5969d5997c16db8ad806222a0a\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045534801561001557600080fd5b506040516113363803806113368339818101604052602081101561003857600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055611284806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
  "devdoc": {
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
        "params": {
          "_callbackFunc": "The requester's specified callback address",
          "_expiration": "The time of the expiration for the request",
          "_payment": "The amount of payment given (specified in wei)",
          "_requestId": "The request ID"
        }
      },
      "constructor": {
        "details": "Sets the LinkToken address for the imported LinkTokenInterface",
        "params": {
          "_link": "The address of the LINK token"
        }
      },
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "params": {
          "_callbackAddress": "The callback address to call for fulfillment",
          "_callbackFunctionId": "The callback function ID to use for fulfillment",
          "_data": "The data to return to the consuming contract",
          "_expiration": "The expiration that the node should respond by before the requester can cancel",
          "_payment": "The payment amount that will be released for the oracle (specified in wei)",
          "_requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "getAuthorizationStatus(address)": {
        "params": {
          "_node": "The address of the Chainlink node"
        },
        "returns": {
          "_0": "The authorization status of the node"
        }
      },
      "getChainlinkToken()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
        "params": {
          "_amount": "Amount of LINK sent (specified in wei)",
          "_data": "Payload of the transaction",
          "_sender": "Address of the sender"
        }
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
        "params": {
          "_callbackAddress": "The callback address for the response",
          "_callbackFunctionId": "The callback function ID for the response",
          "_data": "The CBOR payload of the request",
          "_dataVersion": "The specified data version",
          "_nonce": "The nonce sent by the requester",
          "_payment": "The amount of payment given (specified in wei)",
          "_sender": "The sender of the request",
          "_specId": "The Job Specification ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setFulfillmentPermission(address,bool)": {
        "params": {
          "_allowed": "Bool value to determine if the node can fulfill requests",
          "_node": "The address of the Chainlink node"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "The owner of the contract can be another wallet and does not have to be a Chainlink node",
        "params": {
          "_amount": "The amount to send (specified in wei)",
          "_recipient": "The address to send the LINK token to"
        }
      },
      "withdrawable()": {
        "details": "We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage",
        "returns": {
          "_0": "The amount of withdrawable LINK on the contract"
        }
      }
    },
    "title": "The Chainlink Oracle contract"
  },
  "userdoc": {
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "notice": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address."
      },
      "constructor": "Deploy with the address of the LINK token",
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "notice": "Called by the Chainlink node to fulfill requests"
      },
      "getAuthorizationStatus(address)": {
        "notice": "Use this to check if a node is authorized for fulfilling requests"
      },
      "getChainlinkToken()": {
        "notice": "Returns the address of the LINK token"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "notice": "Called when LINK is sent to the contract via `transferAndCall`"
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "notice": "Creates the Chainlink request"
      },
      "setFulfillmentPermission(address,bool)": {
        "notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
      },
      "withdraw(address,uint256)": {
        "notice": "Allows the node operator to withdraw earned LINK to a given address"
      },
      "withdrawable()": {
        "notice": "Displays the amount of LINK that is available for the node operator to withdraw"
      }
    },
    "notice": "Node operators can deploy this contract to fulfill requests sent to them"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4309,
        "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1787,
        "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
        "label": "LinkToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LinkTokenInterface)3421"
      },
      {
        "astId": 1791,
        "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
        "label": "commitments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1795,
        "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
        "label": "authorizedNodes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1798,
        "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
        "label": "withdrawableTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)3421": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}