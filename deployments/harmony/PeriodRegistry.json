{
  "address": "0x3eBe46d0d873B635D1e003BEe76de67cE2F3a584",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "periodType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodsAdded",
          "type": "uint256"
        }
      ],
      "name": "PeriodInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "periodType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodsAdded",
          "type": "uint256"
        }
      ],
      "name": "PeriodModified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "_periodStarts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_periodEnds",
          "type": "uint256[]"
        }
      ],
      "name": "addPeriodsToPeriodType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPeriodDefinitions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "starts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ends",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct PeriodRegistry.PeriodDefinition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "getPeriodStartAndEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "_periodStarts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_periodEnds",
          "type": "uint256[]"
        }
      ],
      "name": "initializePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        }
      ],
      "name": "isInitializedPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "isValidPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "periodDefinitions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "periodHasStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "started",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PeriodRegistry.PeriodType",
          "name": "_periodType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "periodIsFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42f8dfb755b233be8897afbb9a24763962cac477d84cadc9ad1253d19536707b",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0x3eBe46d0d873B635D1e003BEe76de67cE2F3a584",
    "transactionIndex": 1,
    "gasUsed": "1382599",
    "logsBloom": "0x
    "blockHash": "0xc52d4008824c501cdb0f9dd923f9ddc232c52ed2c46918a1732ee6bc59bac59a",
    "transactionHash": "0x42f8dfb755b233be8897afbb9a24763962cac477d84cadc9ad1253d19536707b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13807801,
        "transactionHash": "0x42f8dfb755b233be8897afbb9a24763962cac477d84cadc9ad1253d19536707b",
        "address": "0x3eBe46d0d873B635D1e003BEe76de67cE2F3a584",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc52d4008824c501cdb0f9dd923f9ddc232c52ed2c46918a1732ee6bc59bac59a"
      }
    ],
    "blockNumber": 13807801,
    "cumulativeGasUsed": "1403599",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7f5e3a410ad4390ba158804c6e042425",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"periodType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodsAdded\",\"type\":\"uint256\"}],\"name\":\"PeriodInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"periodType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodsAdded\",\"type\":\"uint256\"}],\"name\":\"PeriodModified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodEnds\",\"type\":\"uint256[]\"}],\"name\":\"addPeriodsToPeriodType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodDefinitions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PeriodRegistry.PeriodDefinition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"getPeriodStartAndEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodEnds\",\"type\":\"uint256[]\"}],\"name\":\"initializePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"}],\"name\":\"isInitializedPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"isValidPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"periodDefinitions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"periodHasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PeriodRegistry.PeriodType\",\"name\":\"_periodType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"periodIsFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements\",\"methods\":{\"addPeriodsToPeriodType(uint8,uint256[],uint256[])\":{\"details\":\"function to add new periods to certain period type param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodStarts 2. array of uint256 of the period starts to add param _periodEnds 3. array of uint256 of the period starts to add\"},\"getPeriodDefinitions()\":{\"details\":\"public function to get the periodDefinitions\"},\"getPeriodStartAndEnd(uint8,uint256)\":{\"details\":\"public function to get the start and end of a period param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end\"},\"initializePeriod(uint8,uint256[],uint256[])\":{\"details\":\"public function for creating canonical service level agreements param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodStarts 2. array of the starts of the period param _periodEnds 3. array of the ends of the period\"},\"isInitializedPeriod(uint8)\":{\"details\":\"public function to check if a periodType id is initialized param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\"},\"isValidPeriod(uint8,uint256)\":{\"details\":\"public function to check if a period id is valid i.e. it belongs to the added id array param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"periodHasStarted(uint8,uint256)\":{\"details\":\"public function to check if a period has started param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end\"},\"periodIsFinished(uint8,uint256)\":{\"details\":\"public function to check if a period has finished param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SLARegistry\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@stacktical/dsla-protocol/contracts/PeriodRegistry.sol\":\"PeriodRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@stacktical/dsla-protocol/contracts/PeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract PeriodRegistry is Ownable {\\n    using SafeMath for uint256;\\n\\n    enum PeriodType {Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly}\\n\\n    /// @dev struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @dev (periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of the starts of the period\\n     *@param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(\\n            !periodDefinition.initialized,\\n            \\\"Period type already initialized\\\"\\n        );\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            \\\"Period type starts and ends should match\\\"\\n        );\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev function to add new periods to certain period type\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of uint256 of the period starts to add\\n     *@param _periodEnds 3. array of uint256 of the period starts to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        PeriodDefinition storage periodDefinition =\\n            periodDefinitions[_periodType];\\n        require(periodDefinition.initialized, \\\"Period was not initialized yet\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                \\\"Start should be before end\\\"\\n            );\\n            if (index < _periodStarts.length.sub(1)) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    \\\"Start of a period should be 1 second after the end of the previous period\\\"\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev public function to get the start and end of a period\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (uint256 start, uint256 end)\\n    {\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @dev public function to check if a periodType id is initialized\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        public\\n        view\\n        returns (bool initialized)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        initialized = periodDefinition.initialized;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period id is valid i.e. it belongs to the added id array\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        PeriodDefinition memory periodDefinition =\\n            periodDefinitions[_periodType];\\n        valid = periodDefinition.starts.length.sub(1) >= _periodId;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has finished\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has started\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            \\\"Period data is not valid\\\"\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to get the periodDefinitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\",\"keccak256\":\"0xbb188a59bdf036e8dba0d1b6b25a68ef0f4159fd3f6782540477957fa8c3ef53\"}},\"version\":1}",
  "bytecode": "0x608060405260006100176001600160e01b0361006616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006a565b3390565b61179e806100796000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a163f02011610071578063a163f0201461013a578063c7b6ceb41461014d578063d62e307514610160578063ddfc4fde14610175578063f2fde38b14610188578063ffa612351461019b576100b4565b80635c98d157146100b9578063715018a6146100e25780637a1d83bc146100ec5780638da5cb5b146100ff5780638fdec1da14610114578063963a470b14610127575b600080fd5b6100cc6100c7366004611327565b6101bc565b6040516100d991906114bb565b60405180910390f35b6100ea6101d1565b005b6100cc6100fa3660046113b4565b610263565b6101076102d7565b6040516100d99190611418565b6100cc610122366004611327565b6102e6565b6100ea610135366004611342565b6103e9565b6100ea610148366004611342565b61060e565b6100cc61015b3660046113b4565b610818565b610168610878565b6040516100d9919061142c565b6100cc6101833660046113b4565b610f92565b6100ea6101963660046112f9565b6110b1565b6101ae6101a93660046113b4565b611171565b6040516100d992919061175a565b60016020526000908152604090205460ff1681565b6101d9611203565b6001600160a01b03166101ea6102d7565b6001600160a01b0316146102195760405162461bcd60e51b815260040161021090611680565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061026f8383610f92565b61028b5760405162461bcd60e51b815260040161021090611723565b426001600085600581111561029c57fe5b60058111156102a757fe5b815260200190815260200160002060010183815481106102c357fe5b906000526020600020015410905092915050565b6000546001600160a01b031690565b60006102f0611234565b6001600084600581111561030057fe5b600581111561030b57fe5b815260208082019290925260409081016000208151606081018352815460ff1615158152600182018054845181870281018701909552808552919492938584019390929083018282801561037e57602002820191906000526020600020905b81548152602001906001019080831161036a575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156103d657602002820191906000526020600020905b8154815260200190600101908083116103c2575b5050509190925250509051949350505050565b6103f1611203565b6001600160a01b03166104026102d7565b6001600160a01b0316146104285760405162461bcd60e51b815260040161021090611680565b60008251116104495760405162461bcd60e51b8152600401610210906116b5565b60006001600085600581111561045b57fe5b600581111561046657fe5b81526020810191909152604001600020805490915060ff1661049a5760405162461bcd60e51b815260040161021090611649565b60005b83518110156105cd578281815181106104b257fe5b60200260200101518482815181106104c657fe5b6020026020010151106104eb5760405162461bcd60e51b81526004016102109061154d565b83516104fe90600163ffffffff61120716565b8110156105605761054183828151811061051457fe5b602002602001015185836001018151811061052b57fe5b602002602001015161120790919063ffffffff16565b6001146105605760405162461bcd60e51b8152600401610210906114de565b8160010184828151811061057057fe5b60209081029190910181015182546001810184556000938452919092200155825160028301908490839081106105a257fe5b602090810291909101810151825460018181018555600094855292909320909201919091550161049d565b507f22453266e5e1e7468fee2b84c776e3bd5917bfd8a60abb3c0b95561bb22062da8484516040516106009291906114c6565b60405180910390a150505050565b610616611203565b6001600160a01b03166106276102d7565b6001600160a01b03161461064d5760405162461bcd60e51b815260040161021090611680565b60006001600085600581111561065f57fe5b600581111561066a57fe5b81526020810191909152604001600020805490915060ff161561069f5760405162461bcd60e51b8152600401610210906116ec565b81518351146106c05760405162461bcd60e51b8152600401610210906115ca565b60008351116106e15760405162461bcd60e51b8152600401610210906116b5565b60005b83518110156107d9578281815181106106f957fe5b602002602001015184828151811061070d57fe5b6020026020010151106107325760405162461bcd60e51b81526004016102109061154d565b600184510381101561076c5761074d83828151811061051457fe5b60011461076c5760405162461bcd60e51b8152600401610210906114de565b8160010184828151811061077c57fe5b60209081029190910181015182546001810184556000938452919092200155825160028301908490839081106107ae57fe5b60209081029190910181015182546001818101855560009485529290932090920191909155016106e4565b50805460ff1916600117815582516040517f2b0f2d8c9036efbd14cb23d06c56d37fca048c5062ada3454a3ab584762d630191610600918791906114c6565b60006108248383610f92565b6108405760405162461bcd60e51b815260040161021090611723565b426001600085600581111561085157fe5b600581111561085c57fe5b815260200190815260200160002060020183815481106102c357fe5b60408051600680825260e08201909252606091829190816020015b61089b611234565b8152602001906001900390816108935750506000805260016020908152604080516060810182527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49805460ff16151582527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a8054845181870281018701909552808552959650919490938581019392919083018282801561095b57602002820191906000526020600020905b815481526020019060010190808311610947575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156109b357602002820191906000526020600020905b81548152602001906001019080831161099f575b505050505081525050816000815181106109c957fe5b602090810291909101810191909152600160008190528152604080516060810182527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f805460ff16151582527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b6887930805484518187028101870190955280855292949193858301939092830182828015610a8057602002820191906000526020600020905b815481526020019060010190808311610a6c575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610ad857602002820191906000526020600020905b815481526020019060010190808311610ac4575b50505050508152505081600181518110610aee57fe5b602090810291909101810191909152600260005260018152604080516060810182527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f805460ff16151582527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec3310805484518187028101870190955280855292949193858301939092830182828015610ba557602002820191906000526020600020905b815481526020019060010190808311610b91575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610bfd57602002820191906000526020600020905b815481526020019060010190808311610be9575b50505050508152505081600281518110610c1357fe5b602090810291909101810191909152600360005260018152604080516060810182527f7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60b805460ff16151582527f7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60c805484518187028101870190955280855292949193858301939092830182828015610cca57602002820191906000526020600020905b815481526020019060010190808311610cb6575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610d2257602002820191906000526020600020905b815481526020019060010190808311610d0e575b50505050508152505081600381518110610d3857fe5b602090810291909101810191909152600460005260018152604080516060810182527fedc95719e9a3b28dd8e80877cb5880a9be7de1a13fc8b05e7999683b6b567643805460ff16151582527fedc95719e9a3b28dd8e80877cb5880a9be7de1a13fc8b05e7999683b6b567644805484518187028101870190955280855292949193858301939092830182828015610def57602002820191906000526020600020905b815481526020019060010190808311610ddb575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610e4757602002820191906000526020600020905b815481526020019060010190808311610e33575b50505050508152505081600481518110610e5d57fe5b602090810291909101810191909152600560005260018152604080516060810182527fe2689cd4a84e23ad2f564004f1c9013e9589d260bde6380aba3ca7e09e4df40c805460ff16151582527fe2689cd4a84e23ad2f564004f1c9013e9589d260bde6380aba3ca7e09e4df40d805484518187028101870190955280855292949193858301939092830182828015610f1457602002820191906000526020600020905b815481526020019060010190808311610f00575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f6c57602002820191906000526020600020905b815481526020019060010190808311610f58575b50505050508152505081600581518110610f8257fe5b6020908102919091010152905090565b6000610f9c611234565b60016000856005811115610fac57fe5b6005811115610fb757fe5b815260208082019290925260409081016000208151606081018352815460ff1615158152600182018054845181870281018701909552808552919492938584019390929083018282801561102a57602002820191906000526020600020905b815481526020019060010190808311611016575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561108257602002820191906000526020600020905b81548152602001906001019080831161106e575b5050505050815250509050826110a7600183602001515161120790919063ffffffff16565b1015949350505050565b6110b9611203565b6001600160a01b03166110ca6102d7565b6001600160a01b0316146110f05760405162461bcd60e51b815260040161021090611680565b6001600160a01b0381166111165760405162461bcd60e51b815260040161021090611584565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806001600085600581111561118457fe5b600581111561118f57fe5b815260200190815260200160002060010183815481106111ab57fe5b90600052602060002001549150600160008560058111156111c857fe5b60058111156111d357fe5b815260200190815260200160002060020183815481106111ef57fe5b906000526020600020015490509250929050565b3390565b6000828211156112295760405162461bcd60e51b815260040161021090611612565b508082035b92915050565b604051806060016040528060001515815260200160608152602001606081525090565b600082601f830112611267578081fd5b813567ffffffffffffffff8082111561127e578283fd5b60208083026040518282820101818110858211171561129b578687fd5b6040528481529450818501925085820181870183018810156112bc57600080fd5b600091505b848210156112df5780358452928201926001919091019082016112c1565b505050505092915050565b80356006811061122e57600080fd5b60006020828403121561130a578081fd5b81356001600160a01b0381168114611320578182fd5b9392505050565b600060208284031215611338578081fd5b61132083836112ea565b600080600060608486031215611356578182fd5b61136085856112ea565b9250602084013567ffffffffffffffff8082111561137c578384fd5b61138887838801611257565b9350604086013591508082111561139d578283fd5b506113aa86828701611257565b9150509250925092565b600080604083850312156113c6578182fd5b6113d084846112ea565b946020939093013593505050565b6000815180845260208085019450808401835b8381101561140d578151875295820195908201906001016113f1565b509495945050505050565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156114ad57603f198984030185528151606081511515855288820151818a870152611480828701826113de565b8984015192508681038a88015261149781846113de565b988b019896505050928801925050600101611450565b509098975050505050505050565b901515815260200190565b60408101600684106114d457fe5b9281526020015290565b60208082526049908201527f5374617274206f66206120706572696f642073686f756c64206265203120736560408201527f636f6e642061667465722074686520656e64206f66207468652070726576696f6060820152681d5cc81c195c9a5bd960ba1b608082015260a00190565b6020808252601a908201527f53746172742073686f756c64206265206265666f726520656e64000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526028908201527f506572696f6420747970652073746172747320616e6420656e64732073686f756040820152670d8c840dac2e8c6d60c31b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601e908201527f506572696f6420776173206e6f7420696e697469616c697a6564207965740000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f506572696f64206c656e6774682063616e277420626520300000000000000000604082015260600190565b6020808252601f908201527f506572696f64207479706520616c726561647920696e697469616c697a656400604082015260600190565b60208082526018908201527f506572696f642064617461206973206e6f742076616c69640000000000000000604082015260600190565b91825260208201526040019056fea2646970667358221220b3d0220ccc8a05d1e8259f29edbb22d4e1f7c1bcfe032c5aa394043e8e4ae71e64736f6c63430006060033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "SLARegistry is a contract for handling creation of service level agreements and keeping track of the created agreements",
    "methods": {
      "addPeriodsToPeriodType(uint8,uint256[],uint256[])": {
        "details": "function to add new periods to certain period type param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodStarts 2. array of uint256 of the period starts to add param _periodEnds 3. array of uint256 of the period starts to add"
      },
      "getPeriodDefinitions()": {
        "details": "public function to get the periodDefinitions"
      },
      "getPeriodStartAndEnd(uint8,uint256)": {
        "details": "public function to get the start and end of a period param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end"
      },
      "initializePeriod(uint8,uint256[],uint256[])": {
        "details": "public function for creating canonical service level agreements param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodStarts 2. array of the starts of the period param _periodEnds 3. array of the ends of the period"
      },
      "isInitializedPeriod(uint8)": {
        "details": "public function to check if a periodType id is initialized param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly"
      },
      "isValidPeriod(uint8,uint256)": {
        "details": "public function to check if a period id is valid i.e. it belongs to the added id array param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "periodHasStarted(uint8,uint256)": {
        "details": "public function to check if a period has started param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end"
      },
      "periodIsFinished(uint8,uint256)": {
        "details": "public function to check if a period has finished param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly param _periodId 2. period id to get start and end"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SLARegistry"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4835,
        "contract": "@stacktical/dsla-protocol/contracts/PeriodRegistry.sol:PeriodRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8243,
        "contract": "@stacktical/dsla-protocol/contracts/PeriodRegistry.sol:PeriodRegistry",
        "label": "periodDefinitions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(PeriodType)8230,t_struct(PeriodDefinition)8239_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(PeriodType)8230": {
        "encoding": "inplace",
        "label": "enum PeriodRegistry.PeriodType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(PeriodType)8230,t_struct(PeriodDefinition)8239_storage)": {
        "encoding": "mapping",
        "key": "t_enum(PeriodType)8230",
        "label": "mapping(enum PeriodRegistry.PeriodType => struct PeriodRegistry.PeriodDefinition)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodDefinition)8239_storage"
      },
      "t_struct(PeriodDefinition)8239_storage": {
        "encoding": "inplace",
        "label": "struct PeriodRegistry.PeriodDefinition",
        "members": [
          {
            "astId": 8232,
            "contract": "@stacktical/dsla-protocol/contracts/PeriodRegistry.sol:PeriodRegistry",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8235,
            "contract": "@stacktical/dsla-protocol/contracts/PeriodRegistry.sol:PeriodRegistry",
            "label": "starts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8238,
            "contract": "@stacktical/dsla-protocol/contracts/PeriodRegistry.sol:PeriodRegistry",
            "label": "ends",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}