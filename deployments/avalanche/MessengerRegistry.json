{
  "address": "0x857533E7d9DE216E8BdBd1620018099B88cDD792",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "messengerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "specificationUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "precision",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MessengerModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "messengerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "specificationUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "precision",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MessengerRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getMessengers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messengerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "specificationUrl",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "precision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestsCounter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfillsCounter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessengerRegistry.Messenger[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMessengersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_specificationUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_messengerId",
          "type": "uint256"
        }
      ],
      "name": "modifyMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "messengerAddress_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "specificationUrl_",
          "type": "string"
        }
      ],
      "name": "registerMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "messengerAddress_",
          "type": "address"
        }
      ],
      "name": "registeredMessengers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSLARegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8150152b42d7f6a1455adbfb32eabc1091d824440410bfc70b8055d4352834f",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0x857533E7d9DE216E8BdBd1620018099B88cDD792",
    "transactionIndex": 0,
    "gasUsed": "939261",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdc6dbc98d12a7c3abd8d8e258b2e55986e8610419bed6678c229476cfabe9014",
    "transactionHash": "0xa8150152b42d7f6a1455adbfb32eabc1091d824440410bfc70b8055d4352834f",
    "logs": [],
    "blockNumber": 3708728,
    "cumulativeGasUsed": "939261",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b60ff3a3069df4f3117561968383abbc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MessengerModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MessengerRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getMessengers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"specificationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfillsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct MessengerRegistry.Messenger[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMessengersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_specificationUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_messengerId\",\"type\":\"uint256\"}],\"name\":\"modifyMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"specificationUrl_\",\"type\":\"string\"}],\"name\":\"registerMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messengerAddress_\",\"type\":\"address\"}],\"name\":\"registeredMessengers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSLARegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"MessengerRegistry is a contract to register openly distributed Messengers\",\"methods\":{\"modifyMessenger(string,uint256)\":{\"details\":\"function to modifyMessenger a Messenger\"},\"registerMessenger(address,address,string)\":{\"details\":\"function to register a new Messenger\"},\"setSLARegistry()\":{\"details\":\"sets the SLARegistry contract address and can only be called once\"}},\"title\":\"MessengerRegistry\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@stacktical/dsla-contracts/contracts/MessengerRegistry.sol\":\"MessengerRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@stacktical/dsla-contracts/contracts/MessengerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/IMessengerRegistry.sol';\\n\\n/**\\n * @title MessengerRegistry\\n * @dev MessengerRegistry is a contract to register openly distributed Messengers\\n */\\ncontract MessengerRegistry is IMessengerRegistry {\\n    struct Messenger {\\n        address ownerAddress;\\n        address messengerAddress;\\n        string specificationUrl;\\n        uint256 precision;\\n        uint256 requestsCounter;\\n        uint256 fulfillsCounter;\\n        uint256 id;\\n    }\\n\\n    Messenger[] private _messengers;\\n    /// @dev (messengerAddress=>bool) to check if the Messenger was\\n    mapping(address => bool) private _registeredMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the messengers of an owner\\n    mapping(address => uint256[]) private _ownerMessengers;\\n\\n    address private _slaRegistry;\\n\\n    event MessengerRegistered(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    event MessengerModified(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external override {\\n        // Only able to trigger this function once\\n        require(\\n            address(_slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        _slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev function to register a new Messenger\\n     */\\n    function registerMessenger(\\n        address callerAddress_,\\n        address messengerAddress_,\\n        string calldata specificationUrl_\\n    ) external override {\\n        require(\\n            msg.sender == _slaRegistry,\\n            'Should only be called using the SLARegistry contract'\\n        );\\n        require(\\n            !_registeredMessengers[messengerAddress_],\\n            'messenger already registered'\\n        );\\n\\n        IMessenger messenger = IMessenger(messengerAddress_);\\n        address messengerOwner = messenger.owner();\\n        require(\\n            messengerOwner == callerAddress_,\\n            'Should only be called by the messenger owner'\\n        );\\n        uint256 precision = messenger.messengerPrecision();\\n        uint256 requestsCounter = messenger.requestsCounter();\\n        uint256 fulfillsCounter = messenger.fulfillsCounter();\\n        _registeredMessengers[messengerAddress_] = true;\\n        uint256 id = _messengers.length;\\n        _ownerMessengers[messengerOwner].push(id);\\n\\n        _messengers.push(\\n            Messenger({\\n                ownerAddress: messengerOwner,\\n                messengerAddress: messengerAddress_,\\n                specificationUrl: specificationUrl_,\\n                precision: precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: id\\n            })\\n        );\\n\\n        emit MessengerRegistered(\\n            messengerOwner,\\n            messengerAddress_,\\n            specificationUrl_,\\n            precision,\\n            id\\n        );\\n    }\\n\\n    /**\\n     * @dev function to modifyMessenger a Messenger\\n     */\\n    function modifyMessenger(\\n        string calldata _specificationUrl,\\n        uint256 _messengerId\\n    ) external {\\n        Messenger storage storedMessenger = _messengers[_messengerId];\\n        IMessenger messenger = IMessenger(storedMessenger.messengerAddress);\\n        require(\\n            msg.sender == messenger.owner(),\\n            'Can only be modified by the owner'\\n        );\\n        storedMessenger.specificationUrl = _specificationUrl;\\n        storedMessenger.ownerAddress = msg.sender;\\n        emit MessengerModified(\\n            storedMessenger.ownerAddress,\\n            storedMessenger.messengerAddress,\\n            storedMessenger.specificationUrl,\\n            storedMessenger.precision,\\n            storedMessenger.id\\n        );\\n    }\\n\\n    function getMessengers() external view returns (Messenger[] memory) {\\n        Messenger[] memory returnMessengers = new Messenger[](\\n            _messengers.length\\n        );\\n        for (uint256 index = 0; index < _messengers.length; index++) {\\n            IMessenger messenger = IMessenger(\\n                _messengers[index].messengerAddress\\n            );\\n            uint256 requestsCounter = messenger.requestsCounter();\\n            uint256 fulfillsCounter = messenger.fulfillsCounter();\\n            returnMessengers[index] = Messenger({\\n                ownerAddress: _messengers[index].ownerAddress,\\n                messengerAddress: _messengers[index].messengerAddress,\\n                specificationUrl: _messengers[index].specificationUrl,\\n                precision: _messengers[index].precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: _messengers[index].id\\n            });\\n        }\\n        return returnMessengers;\\n    }\\n\\n    function getMessengersLength() external view returns (uint256) {\\n        return _messengers.length;\\n    }\\n\\n    function registeredMessengers(address messengerAddress_)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _registeredMessengers[messengerAddress_];\\n    }\\n}\\n\",\"keccak256\":\"0xb980cd5ec7ab8de7818b6d3d8a9256e5731b69d8bd29d5fdb3fc44584a598ccc\"},\"@stacktical/dsla-contracts/contracts/interfaces/IMessenger.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. id of the Chainlink request\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        virtual;\\n\\n    /**\\n     * @dev gets the interfaces precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        virtual;\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        virtual;\\n}\\n\",\"keccak256\":\"0x0dd84b66fa590e547c815f08e6ee5e38361489f7aa6e46009dde387e4fc49de6\"},\"@stacktical/dsla-contracts/contracts/interfaces/IMessengerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface IMessengerRegistry {\\n    function setSLARegistry() external;\\n\\n    function registerMessenger(\\n        address callerAddress_,\\n        address messengerAddress_,\\n        string calldata specificationUrl_\\n    ) external;\\n\\n    function registeredMessengers(address messengerAddress_)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf31085cea5942be5bd286946b1e796b5cd0051265024dca646f01f731ee7edc6\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "MessengerRegistry is a contract to register openly distributed Messengers",
    "methods": {
      "modifyMessenger(string,uint256)": {
        "details": "function to modifyMessenger a Messenger"
      },
      "registerMessenger(address,address,string)": {
        "details": "function to register a new Messenger"
      },
      "setSLARegistry()": {
        "details": "sets the SLARegistry contract address and can only be called once"
      }
    },
    "title": "MessengerRegistry"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7287,
        "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
        "label": "_messengers",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Messenger)7284_storage)dyn_storage"
      },
      {
        "astId": 7291,
        "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
        "label": "_registeredMessengers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7296,
        "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
        "label": "_ownerMessengers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7298,
        "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
        "label": "_slaRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Messenger)7284_storage)dyn_storage": {
        "base": "t_struct(Messenger)7284_storage",
        "encoding": "dynamic_array",
        "label": "struct MessengerRegistry.Messenger[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Messenger)7284_storage": {
        "encoding": "inplace",
        "label": "struct MessengerRegistry.Messenger",
        "members": [
          {
            "astId": 7271,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7273,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "messengerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7275,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "specificationUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 7277,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "precision",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7279,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "requestsCounter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7281,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "fulfillsCounter",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7283,
            "contract": "@stacktical/dsla-contracts/contracts/MessengerRegistry.sol:MessengerRegistry",
            "label": "id",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}