{
  "address": "0x3C14314EEea024c95588B276644bA8c99b9F19F6",
  "abi": [],
  "transactionHash": "0x74bab1d03479e42d49cdeb284e5bc1ddc87e3efef0ff41e96fca7594a59662da",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0x3C14314EEea024c95588B276644bA8c99b9F19F6",
    "transactionIndex": 2,
    "gasUsed": "72217",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x40c57a9fda23ff8672157e832cda7c896c645179491339c66c1150056b07d561",
    "transactionHash": "0x74bab1d03479e42d49cdeb284e5bc1ddc87e3efef0ff41e96fca7594a59662da",
    "logs": [],
    "blockNumber": 22207310,
    "cumulativeGasUsed": "319907",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b47b1da8947805f3b521fd14a441e1c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@dsla-protocol/core/contracts/libraries/StringUtils.sol\":\"StringUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dsla-protocol/core/contracts/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nlibrary StringUtils {\\n    function addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(uint160(_address)));\\n        bytes memory HEX = '0123456789abcdef';\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function bytes32ToStr(bytes32 _bytes32)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function bytesToUint(bytes memory b)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function uintToStr(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function stringFloatToUnit(bytes memory value)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        uint256 i;\\n        uint256 counterBeforeDot;\\n        uint256 counterAfterDot;\\n        result = 0;\\n        uint256 totNum = value.length;\\n        totNum--;\\n        bool hasDot = false;\\n\\n        for (i = 0; i < value.length; i++) {\\n            uint8 c = uint8(value[i]);\\n\\n            if (c >= 48 && c <= 57) {\\n                result = result * 10 + (c - 48);\\n                counterBeforeDot++;\\n                totNum--;\\n            }\\n\\n            if (c == 46) {\\n                hasDot = true;\\n                break;\\n            }\\n        }\\n\\n        if (hasDot) {\\n            for (uint256 j = 0; j < 18; j++) {\\n                uint8 m = uint8(value[counterBeforeDot + 1 + j]);\\n                if (m >= 48 && m <= 57) {\\n                    result = result * 10 + (m - 48);\\n                    counterAfterDot++;\\n                    totNum--;\\n                }\\n\\n                if (totNum == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n        if (counterAfterDot <= 18) {\\n            uint256 addNum = 18 - counterAfterDot;\\n            result = result * 10**addNum;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd6d52936016200f6809902f611b8fa6d348db88c6d9ff07860cb6b2c5fc2c8\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208afef756dc407808f345ae0421d494e6f0c3185497f57ae747a18d14f8e62a2d64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208afef756dc407808f345ae0421d494e6f0c3185497f57ae747a18d14f8e62a2d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}