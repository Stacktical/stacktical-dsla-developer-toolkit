{
  "0x91d6bbea401a4ab0c1b3d3a46ebb76a7ff6476ceb4df6478f7ab49902b58c79c": {
    "name": "Oracle",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Oracle",
      "sourceName": "@chainlink/contracts/src/v0.6/Oracle.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_link",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "requestId",
              "type": "bytes32"
            }
          ],
          "name": "CancelOracleRequest",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "specId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "requestId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "callbackAddr",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes4",
              "name": "callbackFunctionId",
              "type": "bytes4"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "cancelExpiration",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "dataVersion",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "OracleRequest",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "EXPIRY_TIME",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_requestId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_payment",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "_callbackFunc",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "_expiration",
              "type": "uint256"
            }
          ],
          "name": "cancelOracleRequest",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_requestId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_payment",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_callbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "_callbackFunctionId",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "_expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_data",
              "type": "bytes32"
            }
          ],
          "name": "fulfillOracleRequest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_node",
              "type": "address"
            }
          ],
          "name": "getAuthorizationStatus",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getChainlinkToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isOwner",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "onTokenTransfer",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_payment",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_specId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "_callbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "_callbackFunctionId",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "_nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_dataVersion",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "oracleRequest",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_node",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "_allowed",
              "type": "bool"
            }
          ],
          "name": "setFulfillmentPermission",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdrawable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6080604052600160045534801561001557600080fd5b506040516113363803806113368339818101604052602081101561003857600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055611284806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "methods": {
          "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
            "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
            "params": {
              "_callbackFunc": "The requester's specified callback address",
              "_expiration": "The time of the expiration for the request",
              "_payment": "The amount of payment given (specified in wei)",
              "_requestId": "The request ID"
            }
          },
          "constructor": {
            "details": "Sets the LinkToken address for the imported LinkTokenInterface",
            "params": {
              "_link": "The address of the LINK token"
            }
          },
          "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
            "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
            "params": {
              "_callbackAddress": "The callback address to call for fulfillment",
              "_callbackFunctionId": "The callback function ID to use for fulfillment",
              "_data": "The data to return to the consuming contract",
              "_expiration": "The expiration that the node should respond by before the requester can cancel",
              "_payment": "The payment amount that will be released for the oracle (specified in wei)",
              "_requestId": "The fulfillment request ID that must match the requester's"
            },
            "returns": {
              "_0": "Status if the external call was successful"
            }
          },
          "getAuthorizationStatus(address)": {
            "params": {
              "_node": "The address of the Chainlink node"
            },
            "returns": {
              "_0": "The authorization status of the node"
            }
          },
          "getChainlinkToken()": {
            "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract"
          },
          "isOwner()": {
            "details": "Returns true if the caller is the current owner."
          },
          "onTokenTransfer(address,uint256,bytes)": {
            "details": "The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
            "params": {
              "_amount": "Amount of LINK sent (specified in wei)",
              "_data": "Payload of the transaction",
              "_sender": "Address of the sender"
            }
          },
          "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
            "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
            "params": {
              "_callbackAddress": "The callback address for the response",
              "_callbackFunctionId": "The callback function ID for the response",
              "_data": "The CBOR payload of the request",
              "_dataVersion": "The specified data version",
              "_nonce": "The nonce sent by the requester",
              "_payment": "The amount of payment given (specified in wei)",
              "_sender": "The sender of the request",
              "_specId": "The Job Specification ID"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "setFulfillmentPermission(address,bool)": {
            "params": {
              "_allowed": "Bool value to determine if the node can fulfill requests",
              "_node": "The address of the Chainlink node"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "withdraw(address,uint256)": {
            "details": "The owner of the contract can be another wallet and does not have to be a Chainlink node",
            "params": {
              "_amount": "The amount to send (specified in wei)",
              "_recipient": "The address to send the LINK token to"
            }
          },
          "withdrawable()": {
            "details": "We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage",
            "returns": {
              "_0": "The amount of withdrawable LINK on the contract"
            }
          }
        },
        "title": "The Chainlink Oracle contract"
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "6080604052600160045534801561001557600080fd5b506040516113363803806113368339818101604052602081101561003857600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055611284806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1336 CODESIZE SUB DUP1 PUSH2 0x1336 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR DUP1 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1284 DUP1 PUSH2 0xB2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7FCD56DB GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xD3E9C314 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x3AD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7FCD56DB EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x29E JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x165D35E1 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x40429946 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x4AB0D190 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x4B602282 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x50188301 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x6EE4D553 EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x100 DUP2 ADD PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x9BE JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0xBDA JUMP JUMPDEST PUSH2 0xDC PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0xC6C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE99 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF0A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x44B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP14 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x54 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x54A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55E TIMESTAMP PUSH2 0x12C PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST SWAP1 POP DUP11 DUP10 DUP10 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP10 PUSH32 0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65 DUP14 DUP5 DUP15 DUP14 DUP14 DUP8 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP13 POP SWAP1 SWAP11 POP POP POP POP POP POP POP POP POP POP POP LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x6F4 JUMPI POP PUSH2 0x6DF PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x72F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1205 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 SWAP1 PUSH2 0x791 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206861766520612076616C6964207265717565737449640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP11 SWAP1 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP11 SWAP1 SHL AND DUP3 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x58 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x78 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD DUP2 EQ PUSH2 0x848 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506172616D7320646F206E6F74206D6174636820726571756573742049440000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x85B SWAP1 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH3 0x61A80 GAS LT ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP11 AND OR DUP2 MSTORE SWAP2 MLOAD DUP2 MLOAD PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x940 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x921 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C8 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xA1B SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x10AC AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x60 SHL DUP3 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x58 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x78 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD DUP2 EQ PUSH2 0xAC7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506172616D7320646F206E6F74206D6174636820726571756573742049440000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP DUP3 GT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD DUP7 SWAP2 PUSH32 0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93 SWAP2 LOG2 PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xBD3 JUMPI INVALID JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBE2 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xC21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH2 0xC74 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 SWAP1 PUSH1 0x44 GT ISZERO PUSH2 0xD21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20214CA3 PUSH1 0xE1 SHL EQ PUSH2 0xD8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374207573652077686974656C69737465642066756E6374696F6E730000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x24 DUP6 ADD MSTORE DUP5 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xDD5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE35 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xE90 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E61626C6520746F2063726561746520726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xEBF PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xEFE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF07 DUP2 PUSH2 0x1109 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xF12 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xF51 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xF63 DUP2 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST PUSH1 0x4 SLOAD LT ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x11D0 PUSH1 0x35 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xFB6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x10AC AND JUMP JUMPDEST PUSH1 0x4 SWAP1 DUP2 SSTORE PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1028 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1046 JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1103 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x114E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x11AA PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416D6F756E7420726571756573746564 KECCAK256 PUSH10 0x73206772656174657220 PUSH21 0x68616E20776974686472617761626C652062616C61 PUSH15 0x63654E6F7420616E20617574686F72 PUSH10 0x7A6564206E6F64652074 PUSH16 0x2066756C66696C6C2072657175657374 PUSH20 0x4F776E61626C653A2063616C6C6572206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x58221220BA3D888940E83965017B04C0F18DEE0E 0xFB DUP13 BLOCKHASH SLT 0x2A SWAP6 0xAC 0xAB PUSH28 0xAEC88CA21C130064736F6C6343000606003300000000000000000000 ",
          "sourceMap": "452:9339:4:-:0;;;879:1;1029:64;;1602:151;5:9:-1;2:2;;;27:1;24;17:12;2:2;1602:151:4;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1602:151:4;718:6:16;:19;;-1:-1:-1;;;;;;718:19:16;727:10;718:19;;;;748:40;;-1:-1:-1;;;;;781:6:16;;;;;718;748:40;;718:6;;748:40;1662:9:4::1;:37:::0;;-1:-1:-1;;;;;;1662:37:4::1;-1:-1:-1::0;;;;;1662:37:4;;;::::1;::::0;;;::::1;::::0;;452:9339;;;-1:-1:-1;452:9339:4;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7FCD56DB GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xD3E9C314 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x3AD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7FCD56DB EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x29E JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x165D35E1 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x40429946 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x4AB0D190 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x4B602282 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0x50188301 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x6EE4D553 EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x80 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x100 DUP2 ADD PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x9B8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH2 0x9BE JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0xBDA JUMP JUMPDEST PUSH2 0xDC PUSH2 0xC4C JUMP JUMPDEST PUSH2 0x1F9 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0xC6C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE99 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x1A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xF0A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x44B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP2 AND EQ ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742063616C6C6261636B20746F204C494E4B000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP14 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP1 DUP4 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x54 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x54A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x135D5CDD081D5CD94818481D5B9A5C5D59481251 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55E TIMESTAMP PUSH2 0x12C PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST SWAP1 POP DUP11 DUP10 DUP10 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x4 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP10 PUSH32 0xD8D7ECC4800D25FA53CE0372F13A416D98907A7EF3D8D3BDD79CF4FE75529C65 DUP14 DUP5 DUP15 DUP14 DUP14 DUP8 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP13 POP SWAP1 SWAP11 POP POP POP POP POP POP POP POP POP POP POP LOG2 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x6F4 JUMPI POP PUSH2 0x6DF PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x72F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1205 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 SWAP1 PUSH2 0x791 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206861766520612076616C6964207265717565737449640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP11 SWAP1 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP11 SWAP1 SHL AND DUP3 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x58 DUP1 DUP4 ADD DUP9 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x78 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD DUP2 EQ PUSH2 0x848 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506172616D7320646F206E6F74206D6174636820726571756573742049440000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x85B SWAP1 DUP10 PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH3 0x61A80 GAS LT ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742070726F7669646520636F6E73756D657220656E6F75676820676173 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP11 AND OR DUP2 MSTORE SWAP2 MLOAD DUP2 MLOAD PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x940 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x921 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x12C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C8 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xA07 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xA1B SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x10AC AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP7 SWAP1 MSTORE CALLER PUSH1 0x60 SHL DUP3 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x58 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x78 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD DUP2 EQ PUSH2 0xAC7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506172616D7320646F206E6F74206D6174636820726571756573742049440000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST TIMESTAMP DUP3 GT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14995C5D595CDD081A5CC81B9BDD08195E1C1A5C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD DUP7 SWAP2 PUSH32 0xA7842B9EC549398102C0D91B1B9919B2F20558AEFDADF57528A95C6CD3292E93 SWAP2 LOG2 PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xBD3 JUMPI INVALID JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBE2 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xC21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH2 0xC74 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCCF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 SWAP1 PUSH1 0x44 GT ISZERO PUSH2 0xD21 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x92DCECC2D8D2C840E4CAE2EACAE6E840D8CADCCEE8D PUSH1 0x53 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x20214CA3 PUSH1 0xE1 SHL EQ PUSH2 0xD8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374207573652077686974656C69737465642066756E6374696F6E730000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP6 PUSH1 0x24 DUP6 ADD MSTORE DUP5 PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xDD5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE35 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xE90 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E61626C6520746F2063726561746520726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xEBF PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xEFE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF07 DUP2 PUSH2 0x1109 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xF12 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0xF51 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x122F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 PUSH2 0xF63 DUP2 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x104B AND JUMP JUMPDEST PUSH1 0x4 SLOAD LT ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x11D0 PUSH1 0x35 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xFB6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x10AC AND JUMP JUMPDEST PUSH1 0x4 SWAP1 DUP2 SSTORE PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1028 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1046 JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1103 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x114E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x11AA PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373416D6F756E7420726571756573746564 KECCAK256 PUSH10 0x73206772656174657220 PUSH21 0x68616E20776974686472617761626C652062616C61 PUSH15 0x63654E6F7420616E20617574686F72 PUSH10 0x7A6564206E6F64652074 PUSH16 0x2066756C66696C6C2072657175657374 PUSH20 0x4F776E61626C653A2063616C6C6572206973206E PUSH16 0x7420746865206F776E6572A264697066 PUSH20 0x58221220BA3D888940E83965017B04C0F18DEE0E 0xFB DUP13 BLOCKHASH SLT 0x2A SWAP6 0xAC 0xAB PUSH28 0xAEC88CA21C130064736F6C6343000606003300000000000000000000 ",
          "sourceMap": "452:9339:4:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;452:9339:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;8549:122:4;;;:::i;:::-;;;;-1:-1:-1;;;;;8549:122:4;;;;;;;;;;;;;;2414:912;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;2414:912:4;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2414:912:4;;;;;;;;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;2414:912:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;2414:912:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2414:912:4;;-1:-1:-1;2414:912:4;-1:-1:-1;2414:912:4;:::i;:::-;;4184:1166;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;4184:1166:4;;;;;;;;-1:-1:-1;;;;;4184:1166:4;;;;;;-1:-1:-1;;;;;;4184:1166:4;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;607:47;;;:::i;:::-;;;;;;;;;;;;;;;;6932:206;;;:::i;7705:641::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;7705:641:4;;;;;;;;-1:-1:-1;;;;;;7705:641:4;;;;;;;;;;:::i;5941:152::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;5941:152:4;;;;;;;;;;:::i;861:71:16:-;;;:::i;1180:84::-;;;:::i;718:663:2:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;718:663:2;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;718:663:2;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;718:663:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;718:663:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;718:663:2;;-1:-1:-1;718:663:2;;-1:-1:-1;;;;;718:663:2:i;5547:143:4:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5547:143:4;-1:-1:-1;;;;;5547:143:4;;:::i;1403:101:16:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1403:101:16;-1:-1:-1;;;;;1403:101:16;;:::i;6408:282:4:-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;6408:282:4;;;;;;;;:::i;8549:122::-;8656:9;;-1:-1:-1;;;;;8656:9:4;8549:122;:::o;2414:912::-;1566:19:2;:17;:19::i;:::-;-1:-1:-1;;;;;1552:33:2;:10;-1:-1:-1;;;;;1552:33:2;;1544:65;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;;;;9738:9:4::1;::::0;2705:16;;-1:-1:-1;;;;;9723:25:4;;::::1;9738:9:::0;::::1;9723:25;;9715:61;;;::::0;;-1:-1:-1;;;9715:61:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;2761:33:::2;::::0;;-1:-1:-1;;2761:33:4::2;::::0;;;;::::2;::::0;;::::2;::::0;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2761:33:4;;;;;;2751:44;;;;::::2;::::0;;;;2731:17:::2;2809:22:::0;;;:11:::2;:22:::0;;;;;;;:27;2801:60:::2;;;::::0;;-1:-1:-1;;;2801:60:4;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;-1:-1:-1;;;2801:60:4;;;;;;;;;;;;;::::2;;2917:18;2938:20;:3;645:9;2938:20;:7;:20;:::i;:::-;2917:41;;3033:8;3051:16;3077:19;3106:10;3007:117;;;;;;;;;;;-1:-1:-1::0;;;;;3007:117:4::2;-1:-1:-1::0;;;;;3007:117:4::2;;;;;;;;-1:-1:-1::0;;;;;3007:117:4::2;;-1:-1:-1::0;;;;;3007:117:4::2;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3007:117:4;;;2990:140;;;;;;2965:11;:22;2977:9;2965:22;;;;;;;;;;;:165;;;;3163:7;3142:179;3178:7;3193:9;3210:8;3226:16;3250:19;3277:10;3295:12;3315:5;;3142:179;;;;-1:-1:-1::0;;;;;3142:179:4::2;-1:-1:-1::0;;;;;3142:179:4::2;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3142:179:4::2;-1:-1:-1::0;;;;;3142:179:4::2;;;;;;-1:-1:-1::0;;;;;3142:179:4::2;;-1:-1:-1::0;;;;;3142:179:4::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16:::0;;::::2;74:27:::0;3142:179:4::2;::::0;137:4:-1::2;117:14:::0;;::::2;-1:-1:::0;;113:30:::2;157:16:::0;;::::2;3142:179:4::0;;::::2;::::0;-1:-1:-1;3142:179:4;;-1:-1:-1;;;;;;;;;;;3142:179:4::2;9782:1;;1615::2::1;2414:912:4::0;;;;;;;;;:::o;4184:1166::-;9458:10;4463:4;9442:27;;;:15;:27;;;;;;;;;:52;;;9487:7;:5;:7::i;:::-;-1:-1:-1;;;;;9473:21:4;:10;-1:-1:-1;;;;;9473:21:4;;9442:52;9434:107;;;;-1:-1:-1;;;9434:107:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9238:23:::1;::::0;;;:11:::1;:23;::::0;;;;;4438:10;;9230:68:::1;;;::::0;;-1:-1:-1;;;9230:68:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4515:118:::2;::::0;;::::2;::::0;;::::2;::::0;;;-1:-1:-1;;4515:118:4::2;::::0;;;;;;;;-1:-1:-1;;;;;;4515:118:4;::::2;::::0;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;4515:118:4;;;;;;4498:141;;;;::::2;::::0;;;;4477:18:::2;4653:23:::0;;;:11:::2;:23:::0;;;;;;;:37;::::2;4645:80;;;::::0;;-1:-1:-1;;;4645:80:4;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;4752:18;::::0;:32:::2;::::0;4775:8;4752:32:::2;:22;:32;:::i;:::-;4731:18;:53:::0;4797:23:::2;::::0;;;:11:::2;:23;::::0;;;;4790:30;712:6:::2;4834:9;:39;;4826:84;;;::::0;;-1:-1:-1;;;4826:84:4;;::::2;;::::0;::::2;::::0;;;;;;;::::2;::::0;;;;;;;;;;;;;::::2;;5216:62;::::0;;::::2;::::0;::::2;::::0;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;5216:62:4;;;;;;::::2;25:18:-1::0;::::2;61:17:::0;;-1:-1;;;;;182:15:::2;-1:-1:::0;;;;;;5216:62:4;::::2;179:29:-1;160:49:::0;;5194:85:4;;;;5176:12:::2;::::0;-1:-1:-1;;;;;5194:21:4;::::2;::::0;5216:62;5194:85;;;25:18:-1;5194:85:4;;25:18:-1;36:153:::2;66:2;61:3;58:11;36:153;;176:10:::0;;164:23;;-1:-1;;139:12;;;;98:2:::2;89:12:::0;;::::2;::::0;114::::2;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5194:85:4;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;-1:-1:::0;5175:104:4;;4184:1166;-1:-1:-1;;;;;;;;;;;4184:1166:4:o;607:47::-;645:9;607:47;:::o;6932:206::-;7058:7;1047:9:16;:7;:9::i;:::-;1039:54;;;;;-1:-1:-1;;;1039:54:16;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1039:54:16;;;;;;;;;;;;;;;7082:18:4::1;::::0;:51:::1;::::0;879:1:::1;7082:51;:22;:51;:::i;:::-;7075:58;;6932:206:::0;:::o;7705:641::-;7907:99;;;;;;;;;;7951:10;7907:99;;;;;;-1:-1:-1;;;;;;7907:99:4;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;7907:99:4;;;;;;7890:122;;;;;;;;;7869:18;8040:23;;;:11;:23;;;;;;;8026:37;;8018:80;;;;;-1:-1:-1;;;8018:80:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;8177:3;8162:11;:18;;8154:53;;;;;-1:-1:-1;;;8154:53:4;;;;;;;;;;;;-1:-1:-1;;;8154:53:4;;;;;;;;;;;;;;;8221:23;;;;:11;:23;;;;;;8214:30;;;8255:31;8233:10;;8255:31;;;8300:9;;:40;;;-1:-1:-1;;;8300:40:4;;8319:10;8300:40;;;;;;;;;;;;-1:-1:-1;;;;;8300:9:4;;;;:18;;:40;;;;;;;;;;;;;;;:9;;:40;;;2:2:-1;;;;27:1;24;17:12;2:2;8300:40:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8300:40:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8300:40:4;8293:48;;;;7705:641;;;;;:::o;5941:152::-;1047:9:16;:7;:9::i;:::-;1039:54;;;;;-1:-1:-1;;;1039:54:16;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1039:54:16;;;;;;;;;;;;;;;-1:-1:-1;;;;;6055:22:4;;;::::1;;::::0;;;:15:::1;:22;::::0;;;;:33;;-1:-1:-1;;6055:33:4::1;::::0;::::1;;::::0;;;::::1;::::0;;5941:152::o;861:71:16:-;899:7;921:6;-1:-1:-1;;;;;921:6:16;861:71;:::o;1180:84::-;1220:4;1253:6;-1:-1:-1;;;;;1253:6:16;1239:10;:20;;1180:84::o;718:663:2:-;1566:19;:17;:19::i;:::-;-1:-1:-1;;;;;1552:33:2;:10;-1:-1:-1;;;;;1552:33:2;;1544:65;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;-1:-1:-1;;;1544:65:2;;;;;;;;;;;;;;;2278:12;;860:5;;283:47;-1:-1:-1;2278:38:2::1;2270:73;;;::::0;;-1:-1:-1;;;2270:73:2;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2270:73:2;;;;;;;;;;;;;::::1;;1974:2:::2;1963:14:::0;::::2;1957:21:::0;897:5;;-1:-1:-1;;;;;;1997:39:2;::::2;-1:-1:-1::0;;;1997:39:2::2;1989:82;;;::::0;;-1:-1:-1;;;1989:82:2;;::::2;;::::0;::::2;::::0;::::2;::::0;;;;::::2;::::0;;;;;;;;;;;;;::::2;;1009:7:::3;1004:2;997:5;993:14;986:31;1139:7;1134:2;1127:5;1123:14;1116:31;1252:12;1278:4;-1:-1:-1::0;;;;;1270:26:2::3;1297:5;1270:33;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;176:10:::0;;164:23;;-1:-1;;139:12;;;;98:2:::3;89:12:::0;;::::3;::::0;114::::3;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1270:33:2;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;1251:52:2;;;1340:7;1332:44;;;::::0;;-1:-1:-1;;;1332:44:2;;::::3;;::::0;::::3;::::0;::::3;::::0;;;;::::3;::::0;;;;;;;;;;;;;::::3;;2077:1;2349::::2;;1615::::1;718:663:::0;;;:::o;5547:143:4:-;-1:-1:-1;;;;;5663:22:4;5642:4;5663:22;;;:15;:22;;;;;;;;;5547:143::o;1403:101:16:-;1047:9;:7;:9::i;:::-;1039:54;;;;;-1:-1:-1;;;1039:54:16;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1039:54:16;;;;;;;;;;;;;;;1471:28:::1;1490:8;1471:18;:28::i;:::-;1403:101:::0;:::o;6408:282:4:-;1047:9:16;:7;:9::i;:::-;1039:54;;;;;-1:-1:-1;;;1039:54:16;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1039:54:16;;;;;;;;;;;;;;;6563:7:4;8930:40:::1;6563:7:::0;879:1:::1;8930:40;:11;:40;:::i;:::-;8908:18;;:62;;8900:128;;;;-1:-1:-1::0;;;8900:128:4::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6601:18:::2;::::0;:31:::2;::::0;6624:7;6601:31:::2;:22;:31;:::i;:::-;6580:18;:52:::0;;;6645:9:::2;::::0;:39:::2;::::0;;-1:-1:-1;;;6645:39:4;;-1:-1:-1;;;;;6645:39:4;;::::2;::::0;;::::2;::::0;;;;;;;;;;;;:9;;;::::2;::::0;:18:::2;::::0;:39;;;;;::::2;::::0;;;;;;;;;:9:::2;::::0;:39;::::2;;2:2:-1::0;::::2;;;27:1;24::::0;17:12:::2;2:2;6645:39:4;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::2;77:16;74:1;67:27;5:2;6645:39:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::2;4:2;-1:-1:::0;6645:39:4;6638:47:::2;;;;1099:1:16::1;6408:282:4::0;;:::o;831:162:17:-;889:7;916:5;;;935:6;;;;927:46;;;;;-1:-1:-1;;;927:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:1;831:162;-1:-1:-1;;;831:162:17:o;1245:165::-;1303:7;1331:1;1326;:6;;1318:49;;;;;-1:-1:-1;;;1318:49:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1385:5:17;;;1245:165::o;1597:211:16:-;-1:-1:-1;;;;;1666:22:16;;1658:73;;;;-1:-1:-1;;;1658:73:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1763:6;;;1742:38;;-1:-1:-1;;;;;1742:38:16;;;;1763:6;;;1742:38;;;1786:6;:17;;-1:-1:-1;;;;;;1786:17:16;-1:-1:-1;;;;;1786:17:16;;;;;;;;;;1597:211::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "948000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "EXPIRY_TIME()": "265",
            "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": "infinite",
            "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": "infinite",
            "getAuthorizationStatus(address)": "1198",
            "getChainlinkToken()": "1038",
            "isOwner()": "1094",
            "onTokenTransfer(address,uint256,bytes)": "infinite",
            "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": "infinite",
            "owner()": "1082",
            "setFulfillmentPermission(address,bool)": "infinite",
            "transferOwnership(address)": "infinite",
            "withdraw(address,uint256)": "infinite",
            "withdrawable()": "infinite"
          }
        },
        "methodIdentifiers": {
          "EXPIRY_TIME()": "4b602282",
          "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": "6ee4d553",
          "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": "4ab0d190",
          "getAuthorizationStatus(address)": "d3e9c314",
          "getChainlinkToken()": "165d35e1",
          "isOwner()": "8f32d59b",
          "onTokenTransfer(address,uint256,bytes)": "a4c0ed36",
          "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": "40429946",
          "owner()": "8da5cb5b",
          "setFulfillmentPermission(address,bool)": "7fcd56db",
          "transferOwnership(address)": "f2fde38b",
          "withdraw(address,uint256)": "f3fef3a3",
          "withdrawable()": "50188301"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CancelOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXPIRY_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"getAuthorizationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_specId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setFulfillmentPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"details\":\"Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.\",\"params\":{\"_callbackFunc\":\"The requester's specified callback address\",\"_expiration\":\"The time of the expiration for the request\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_requestId\":\"The request ID\"}},\"constructor\":{\"details\":\"Sets the LinkToken address for the imported LinkTokenInterface\",\"params\":{\"_link\":\"The address of the LINK token\"}},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"_callbackAddress\":\"The callback address to call for fulfillment\",\"_callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"_data\":\"The data to return to the consuming contract\",\"_expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"_payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"_requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"getAuthorizationStatus(address)\":{\"params\":{\"_node\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"getChainlinkToken()\":{\"details\":\"This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.\",\"params\":{\"_amount\":\"Amount of LINK sent (specified in wei)\",\"_data\":\"Payload of the transaction\",\"_sender\":\"Address of the sender\"}},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"details\":\"Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.\",\"params\":{\"_callbackAddress\":\"The callback address for the response\",\"_callbackFunctionId\":\"The callback function ID for the response\",\"_data\":\"The CBOR payload of the request\",\"_dataVersion\":\"The specified data version\",\"_nonce\":\"The nonce sent by the requester\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_sender\":\"The sender of the request\",\"_specId\":\"The Job Specification ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setFulfillmentPermission(address,bool)\":{\"params\":{\"_allowed\":\"Bool value to determine if the node can fulfill requests\",\"_node\":\"The address of the Chainlink node\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"The owner of the contract can be another wallet and does not have to be a Chainlink node\",\"params\":{\"_amount\":\"The amount to send (specified in wei)\",\"_recipient\":\"The address to send the LINK token to\"}},\"withdrawable()\":{\"details\":\"We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\",\"returns\":{\"_0\":\"The amount of withdrawable LINK on the contract\"}}},\"title\":\"The Chainlink Oracle contract\"},\"userdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"notice\":\"Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address.\"},\"constructor\":\"Deploy with the address of the LINK token\",\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"notice\":\"Called by the Chainlink node to fulfill requests\"},\"getAuthorizationStatus(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"getChainlinkToken()\":{\"notice\":\"Returns the address of the LINK token\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called when LINK is sent to the contract via `transferAndCall`\"},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"notice\":\"Creates the Chainlink request\"},\"setFulfillmentPermission(address,bool)\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"},\"withdraw(address,uint256)\":{\"notice\":\"Allows the node operator to withdraw earned LINK to a given address\"},\"withdrawable()\":{\"notice\":\"Displays the amount of LINK that is available for the node operator to withdraw\"}},\"notice\":\"Node operators can deploy this contract to fulfill requests sent to them\"}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.6/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract LinkTokenReceiver {\\n\\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\\n  uint256 constant private SELECTOR_LENGTH = 4;\\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param _sender Address of the sender\\n   * @param _amount Amount of LINK sent (specified in wei)\\n   * @param _data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes memory _data\\n  )\\n    public\\n    onlyLINK\\n    validRequestLength(_data)\\n    permittedFunctionsForLINK(_data)\\n  {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param _data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory _data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(_data, 32))\\n    }\\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \\\"Must use whitelisted functions\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given payload is less than needed to create a request\\n   * @param _data The request payload\\n   */\\n  modifier validRequestLength(bytes memory _data) {\\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa856c0d069254b46ec90528fe9440485f7dd7efbf13b2b4c80a0e28910d25a95\"},\"@chainlink/contracts/src/v0.6/Oracle.sol\":{\"content\":\"pragma solidity 0.6.6;\\n\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Oracle contract\\n * @notice Node operators can deploy this contract to fulfill requests sent to them\\n */\\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable, LinkTokenReceiver, WithdrawalInterface {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant public EXPIRY_TIME = 5 minutes;\\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n  // We initialize fields to 1 instead of 0 so that the first invocation\\n  // does not cost more gas.\\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\\n\\n  LinkTokenInterface internal LinkToken;\\n  mapping(bytes32 => bytes32) private commitments;\\n  mapping(address => bool) private authorizedNodes;\\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n  event OracleRequest(\\n    bytes32 indexed specId,\\n    address requester,\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddr,\\n    bytes4 callbackFunctionId,\\n    uint256 cancelExpiration,\\n    uint256 dataVersion,\\n    bytes data\\n  );\\n\\n  event CancelOracleRequest(\\n    bytes32 indexed requestId\\n  );\\n\\n  /**\\n   * @notice Deploy with the address of the LINK token\\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n   * @param _link The address of the LINK token\\n   */\\n  constructor(address _link)\\n    public\\n    Ownable()\\n  {\\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _specId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _dataVersion The specified data version\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256 _dataVersion,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n    onlyLINK()\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(commitments[requestId] == 0, \\\"Must use a unique ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 expiration = now.add(EXPIRY_TIME);\\n\\n    commitments[requestId] = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        expiration\\n      )\\n    );\\n\\n    emit OracleRequest(\\n      _specId,\\n      _sender,\\n      requestId,\\n      _payment,\\n      _callbackAddress,\\n      _callbackFunctionId,\\n      expiration,\\n      _dataVersion,\\n      _data);\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param _requestId The fulfillment request ID that must match the requester's\\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param _callbackAddress The callback address to call for fulfillment\\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\\n   * @param _data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration,\\n    bytes32 _data\\n  )\\n    external\\n    onlyAuthorizedNode\\n    override\\n    isValidRequest(_requestId)\\n    returns (bool)\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        _expiration\\n      )\\n    );\\n    require(commitments[_requestId] == paramsHash, \\\"Params do not match request ID\\\");\\n    withdrawableTokens = withdrawableTokens.add(_payment);\\n    delete commitments[_requestId];\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = _callbackAddress.call(abi.encodeWithSelector(_callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Use this to check if a node is authorized for fulfilling requests\\n   * @param _node The address of the Chainlink node\\n   * @return The authorization status of the node\\n   */\\n  function getAuthorizationStatus(address _node)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return authorizedNodes[_node];\\n  }\\n\\n  /**\\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n   * @param _node The address of the Chainlink node\\n   * @param _allowed Bool value to determine if the node can fulfill requests\\n   */\\n  function setFulfillmentPermission(address _node, bool _allowed)\\n    external\\n    override\\n    onlyOwner()\\n  {\\n    authorizedNodes[_node] = _allowed;\\n  }\\n\\n  /**\\n   * @notice Allows the node operator to withdraw earned LINK to a given address\\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n   * @param _recipient The address to send the LINK token to\\n   * @param _amount The amount to send (specified in wei)\\n   */\\n  function withdraw(address _recipient, uint256 _amount)\\n    external\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner\\n    hasAvailableFunds(_amount)\\n  {\\n    withdrawableTokens = withdrawableTokens.sub(_amount);\\n    assert(LinkToken.transfer(_recipient, _amount));\\n  }\\n\\n  /**\\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n   * @return The amount of withdrawable LINK on the contract\\n   */\\n  function withdrawable()\\n    external\\n    view\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner()\\n    returns (uint256)\\n  {\\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n  }\\n\\n  /**\\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\\n   * sent for the request back to the requester's address.\\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\\n   * Emits CancelOracleRequest event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _callbackFunc The requester's specified callback address\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        msg.sender,\\n        _callbackFunc,\\n        _expiration)\\n    );\\n    require(paramsHash == commitments[_requestId], \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(_expiration <= now, \\\"Request is not expired\\\");\\n\\n    delete commitments[_requestId];\\n    emit CancelOracleRequest(_requestId);\\n\\n    assert(LinkToken.transfer(msg.sender, _payment));\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken()\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    return address(LinkToken);\\n  }\\n\\n  // MODIFIERS\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param _amount The given amount to compare to `withdrawableTokens`\\n   */\\n  modifier hasAvailableFunds(uint256 _amount) {\\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \\\"Amount requested is greater than withdrawable balance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if request ID does not exist\\n   * @param _requestId The given request ID to check in stored `commitments`\\n   */\\n  modifier isValidRequest(bytes32 _requestId) {\\n    require(commitments[_requestId] != 0, \\\"Must have a valid requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\\n   */\\n  modifier onlyAuthorizedNode() {\\n    require(authorizedNodes[msg.sender] || msg.sender == owner(), \\\"Not an authorized node to fulfill requests\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != address(LinkToken), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xada59e77de7e044a8d4d229ed01d5bea5ec4c1da5bebea7d68501a60970a6639\"},\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion, // Currently unused, always \\\"1\\\"\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4b41b021bf58c429891ff291637de29be54741565105de82238dac9f6ecee374\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdbf46b45a4c9f38ba71a0391aed0e7b108854b619f292d907ae537228868bda6\"},\"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n  function getAuthorizationStatus(address node) external view returns (bool);\\n  function setFulfillmentPermission(address node, bool allowed) external;\\n  function withdraw(address recipient, uint256 amount) external;\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x325ca1599835f823a92e3e03eb900caae683e873937adb2924e435fa10d6e30a\"},\"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5aa4e79f8e49d7b2e5e16cb5c152a63efafbdaa24f34749fa3793df6b683068\"},\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x3dfd577392b1fde3e54f76a81358fd27c041f30257bb9438f0bb5952e351befa\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x5e6948bb332468d8ef0704b4259babc8aef7ce5969d5997c16db8ad806222a0a\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 4309,
            "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1787,
            "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
            "label": "LinkToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(LinkTokenInterface)3421"
          },
          {
            "astId": 1791,
            "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
            "label": "commitments",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 1795,
            "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
            "label": "authorizedNodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1798,
            "contract": "@chainlink/contracts/src/v0.6/Oracle.sol:Oracle",
            "label": "withdrawableTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(LinkTokenInterface)3421": {
            "encoding": "inplace",
            "label": "contract LinkTokenInterface",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "methods": {
          "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
            "notice": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address."
          },
          "constructor": "Deploy with the address of the LINK token",
          "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
            "notice": "Called by the Chainlink node to fulfill requests"
          },
          "getAuthorizationStatus(address)": {
            "notice": "Use this to check if a node is authorized for fulfilling requests"
          },
          "getChainlinkToken()": {
            "notice": "Returns the address of the LINK token"
          },
          "onTokenTransfer(address,uint256,bytes)": {
            "notice": "Called when LINK is sent to the contract via `transferAndCall`"
          },
          "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
            "notice": "Creates the Chainlink request"
          },
          "setFulfillmentPermission(address,bool)": {
            "notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
          },
          "withdraw(address,uint256)": {
            "notice": "Allows the node operator to withdraw earned LINK to a given address"
          },
          "withdrawable()": {
            "notice": "Displays the amount of LINK that is available for the node operator to withdraw"
          }
        },
        "notice": "Node operators can deploy this contract to fulfill requests sent to them"
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/chainlink/Oracle.sol\": {\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\nimport '@chainlink/contracts/src/v0.6/Oracle.sol';\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Oracle.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OracleInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Oracle contract\\n * @notice Node operators can deploy this contract to fulfill requests sent to them\\n */\\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable, LinkTokenReceiver, WithdrawalInterface {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant public EXPIRY_TIME = 5 minutes;\\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n  // We initialize fields to 1 instead of 0 so that the first invocation\\n  // does not cost more gas.\\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\\n\\n  LinkTokenInterface internal LinkToken;\\n  mapping(bytes32 => bytes32) private commitments;\\n  mapping(address => bool) private authorizedNodes;\\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n  event OracleRequest(\\n    bytes32 indexed specId,\\n    address requester,\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddr,\\n    bytes4 callbackFunctionId,\\n    uint256 cancelExpiration,\\n    uint256 dataVersion,\\n    bytes data\\n  );\\n\\n  event CancelOracleRequest(\\n    bytes32 indexed requestId\\n  );\\n\\n  /**\\n   * @notice Deploy with the address of the LINK token\\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n   * @param _link The address of the LINK token\\n   */\\n  constructor(address _link)\\n    public\\n    Ownable()\\n  {\\n    LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _specId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _dataVersion The specified data version\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256 _dataVersion,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n    onlyLINK()\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(commitments[requestId] == 0, \\\"Must use a unique ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 expiration = now.add(EXPIRY_TIME);\\n\\n    commitments[requestId] = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        expiration\\n      )\\n    );\\n\\n    emit OracleRequest(\\n      _specId,\\n      _sender,\\n      requestId,\\n      _payment,\\n      _callbackAddress,\\n      _callbackFunctionId,\\n      expiration,\\n      _dataVersion,\\n      _data);\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param _requestId The fulfillment request ID that must match the requester's\\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param _callbackAddress The callback address to call for fulfillment\\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\\n   * @param _data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration,\\n    bytes32 _data\\n  )\\n    external\\n    onlyAuthorizedNode\\n    override\\n    isValidRequest(_requestId)\\n    returns (bool)\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        _callbackAddress,\\n        _callbackFunctionId,\\n        _expiration\\n      )\\n    );\\n    require(commitments[_requestId] == paramsHash, \\\"Params do not match request ID\\\");\\n    withdrawableTokens = withdrawableTokens.add(_payment);\\n    delete commitments[_requestId];\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = _callbackAddress.call(abi.encodeWithSelector(_callbackFunctionId, _requestId, _data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Use this to check if a node is authorized for fulfilling requests\\n   * @param _node The address of the Chainlink node\\n   * @return The authorization status of the node\\n   */\\n  function getAuthorizationStatus(address _node)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return authorizedNodes[_node];\\n  }\\n\\n  /**\\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n   * @param _node The address of the Chainlink node\\n   * @param _allowed Bool value to determine if the node can fulfill requests\\n   */\\n  function setFulfillmentPermission(address _node, bool _allowed)\\n    external\\n    override\\n    onlyOwner()\\n  {\\n    authorizedNodes[_node] = _allowed;\\n  }\\n\\n  /**\\n   * @notice Allows the node operator to withdraw earned LINK to a given address\\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n   * @param _recipient The address to send the LINK token to\\n   * @param _amount The amount to send (specified in wei)\\n   */\\n  function withdraw(address _recipient, uint256 _amount)\\n    external\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner\\n    hasAvailableFunds(_amount)\\n  {\\n    withdrawableTokens = withdrawableTokens.sub(_amount);\\n    assert(LinkToken.transfer(_recipient, _amount));\\n  }\\n\\n  /**\\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n   * @return The amount of withdrawable LINK on the contract\\n   */\\n  function withdrawable()\\n    external\\n    view\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner()\\n    returns (uint256)\\n  {\\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n  }\\n\\n  /**\\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\\n   * sent for the request back to the requester's address.\\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\\n   * Emits CancelOracleRequest event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _callbackFunc The requester's specified callback address\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 paramsHash = keccak256(\\n      abi.encodePacked(\\n        _payment,\\n        msg.sender,\\n        _callbackFunc,\\n        _expiration)\\n    );\\n    require(paramsHash == commitments[_requestId], \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(_expiration <= now, \\\"Request is not expired\\\");\\n\\n    delete commitments[_requestId];\\n    emit CancelOracleRequest(_requestId);\\n\\n    assert(LinkToken.transfer(msg.sender, _payment));\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken()\\n    public\\n    view\\n    override\\n    returns (address)\\n  {\\n    return address(LinkToken);\\n  }\\n\\n  // MODIFIERS\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param _amount The given amount to compare to `withdrawableTokens`\\n   */\\n  modifier hasAvailableFunds(uint256 _amount) {\\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \\\"Amount requested is greater than withdrawable balance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if request ID does not exist\\n   * @param _requestId The given request ID to check in stored `commitments`\\n   */\\n  modifier isValidRequest(bytes32 _requestId) {\\n    require(commitments[_requestId] != 0, \\\"Must have a valid requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\\n   */\\n  modifier onlyAuthorizedNode() {\\n    require(authorizedNodes[msg.sender] || msg.sender == owner(), \\\"Not an authorized node to fulfill requests\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != address(LinkToken), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract LinkTokenReceiver {\\n\\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\\n  uint256 constant private SELECTOR_LENGTH = 4;\\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param _sender Address of the sender\\n   * @param _amount Amount of LINK sent (specified in wei)\\n   * @param _data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes memory _data\\n  )\\n    public\\n    onlyLINK\\n    validRequestLength(_data)\\n    permittedFunctionsForLINK(_data)\\n  {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param _data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory _data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(_data, 32))\\n    }\\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \\\"Must use whitelisted functions\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given payload is less than needed to create a request\\n   * @param _data The request payload\\n   */\\n  modifier validRequestLength(bytes memory _data) {\\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion, // Currently unused, always \\\"1\\\"\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n  function getAuthorizationStatus(address node) external view returns (bool);\\n  function setFulfillmentPermission(address node, bool allowed) external;\\n  function withdraw(address recipient, uint256 amount) external;\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Median.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\nimport \\\"./SignedSafeMath.sol\\\";\\n\\nlibrary Median {\\n  using SignedSafeMath for int256;\\n\\n  int256 constant INT_MAX = 2**255-1;\\n\\n  /**\\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\\n   * array has an even number of elements.\\n   * @dev The list passed as an argument isn't modified.\\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\\n   * the runtime is O(n^2).\\n   * @param list The list of elements to compare\\n   */\\n  function calculate(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    return calculateInplace(copy(list));\\n  }\\n\\n  /**\\n   * @notice See documentation for function calculate.\\n   * @dev The list passed as an argument may be permuted.\\n   */\\n  function calculateInplace(int256[] memory list)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    require(0 < list.length, \\\"list must not be empty\\\");\\n    uint256 len = list.length;\\n    uint256 middleIndex = len / 2;\\n    if (len % 2 == 0) {\\n      int256 median1;\\n      int256 median2;\\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\\n      return SignedSafeMath.avg(median1, median2);\\n    } else {\\n      return quickselect(list, 0, len - 1, middleIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Maximum length of list that shortSelectTwo can handle\\n   */\\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\\n\\n  /**\\n   * @notice Select the k1-th and k2-th element from list of length at most 7\\n   * @dev Uses an optimal sorting network\\n   */\\n  function shortSelectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    private\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\\n    // for lists of length 7. Network layout is taken from\\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\\n\\n    uint256 len = hi + 1 - lo;\\n    int256 x0 = list[lo + 0];\\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\\n\\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\\n\\n    uint256 index1 = k1 - lo;\\n    if (index1 == 0) {k1th = x0;}\\n    else if (index1 == 1) {k1th = x1;}\\n    else if (index1 == 2) {k1th = x2;}\\n    else if (index1 == 3) {k1th = x3;}\\n    else if (index1 == 4) {k1th = x4;}\\n    else if (index1 == 5) {k1th = x5;}\\n    else if (index1 == 6) {k1th = x6;}\\n    else {revert(\\\"k1 out of bounds\\\");}\\n\\n    uint256 index2 = k2 - lo;\\n    if (k1 == k2) {return (k1th, k1th);}\\n    else if (index2 == 0) {return (k1th, x0);}\\n    else if (index2 == 1) {return (k1th, x1);}\\n    else if (index2 == 2) {return (k1th, x2);}\\n    else if (index2 == 3) {return (k1th, x3);}\\n    else if (index2 == 4) {return (k1th, x4);}\\n    else if (index2 == 5) {return (k1th, x5);}\\n    else if (index2 == 6) {return (k1th, x6);}\\n    else {revert(\\\"k2 out of bounds\\\");}\\n  }\\n\\n  /**\\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\\n   * (inclusive). Modifies list in-place.\\n   */\\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\\n    private\\n    pure\\n    returns (int256 kth)\\n  {\\n    require(lo <= k);\\n    require(k <= hi);\\n    while (lo < hi) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        int256 ignore;\\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\\n        return kth;\\n      }\\n      uint256 pivotIndex = partition(list, lo, hi);\\n      if (k <= pivotIndex) {\\n        // since pivotIndex < (original hi passed to partition),\\n        // termination is guaranteed in this case\\n        hi = pivotIndex;\\n      } else {\\n        // since (original lo passed to partition) <= pivotIndex,\\n        // termination is guaranteed in this case\\n        lo = pivotIndex + 1;\\n      }\\n    }\\n    return list[lo];\\n  }\\n\\n  /**\\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\\n   * lo and hi (inclusive). Modifies list in-place.\\n   */\\n  function quickselectTwo(\\n    int256[] memory list,\\n    uint256 lo,\\n    uint256 hi,\\n    uint256 k1,\\n    uint256 k2\\n  )\\n    internal // for testing\\n    pure\\n    returns (int256 k1th, int256 k2th)\\n  {\\n    require(k1 < k2);\\n    require(lo <= k1 && k1 <= hi);\\n    require(lo <= k2 && k2 <= hi);\\n\\n    while (true) {\\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\\n        return shortSelectTwo(list, lo, hi, k1, k2);\\n      }\\n      uint256 pivotIdx = partition(list, lo, hi);\\n      if (k2 <= pivotIdx) {\\n        hi = pivotIdx;\\n      } else if (pivotIdx < k1) {\\n        lo = pivotIdx + 1;\\n      } else {\\n        assert(k1 <= pivotIdx && pivotIdx < k2);\\n        k1th = quickselect(list, lo, pivotIdx, k1);\\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\\n        return (k1th, k2th);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\\n   * Returns an index i, such that:\\n   * - lo <= i < hi\\n   * - forall j in [lo, i]. list[j] <= list[i]\\n   * - forall j in [i, hi]. list[i] <= list[j]\\n   */\\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    // We don't care about overflow of the addition, because it would require a list\\n    // larger than any feasible computer's memory.\\n    int256 pivot = list[(lo + hi) / 2];\\n    lo -= 1; // this can underflow. that's intentional.\\n    hi += 1;\\n    while (true) {\\n      do {\\n        lo += 1;\\n      } while (list[lo] < pivot);\\n      do {\\n        hi -= 1;\\n      } while (list[hi] > pivot);\\n      if (lo < hi) {\\n        (list[lo], list[hi]) = (list[hi], list[lo]);\\n      } else {\\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\\n        // in each loop iteration and\\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\\n        //   will achieve hi < orig_hi;\\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\\n        //   needed:\\n        //   - lo will have to stop at least once in the interval\\n        //     [orig_lo, (orig_lo + orig_hi)/2]\\n        //   - (orig_lo + orig_hi)/2 < orig_hi\\n        return hi;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Makes an in-memory copy of the array passed in\\n   * @param list Reference to the array to be copied\\n   */\\n  function copy(int256[] memory list)\\n    private\\n    pure\\n    returns(int256[] memory)\\n  {\\n    int256[] memory list2 = new int256[](list.length);\\n    for (uint256 i = 0; i < list.length; i++) {\\n      list2[i] = list[i];\\n    }\\n    return list2;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/SignedSafeMath.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nlibrary SignedSafeMath {\\n  int256 constant private _INT256_MIN = -2**255;\\n\\n  /**\\n   * @dev Multiplies two signed integers, reverts on overflow.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    int256 c = a * b;\\n    require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n    require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n    int256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two signed integers, reverts on overflow.\\n   */\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two signed integers, reverts on overflow.\\n   */\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @notice Computes average of two signed integers, ensuring that the computation\\n   * doesn't overflow.\\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\\n   * avg(-3, -4) = -3\\n   */\\n  function avg(int256 _a, int256 _b)\\n    internal\\n    pure\\n    returns (int256)\\n  {\\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\\n      return add(_a, _b) / 2;\\n    }\\n    int256 remainder = (_a % 2 + _b % 2) / 2;\\n    return add(add(_a / 2, _b / 2), remainder);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/PreCoordinator.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./ChainlinkClient.sol\\\";\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./Median.sol\\\";\\nimport \\\"./vendor/Ownable.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title PreCoordinator is a contract that builds on-chain service agreements\\n * using the current architecture of 1 request to 1 oracle contract.\\n * @dev This contract accepts requests as service agreement IDs and loops over\\n * the corresponding list of oracles to create distinct requests to each one.\\n */\\ncontract PreCoordinator is ChainlinkClient, Ownable, ChainlinkRequestInterface, LinkTokenReceiver {\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant private MAX_ORACLE_COUNT = 45;\\n\\n  uint256 private globalNonce;\\n\\n  struct ServiceAgreement {\\n    uint256 totalPayment;\\n    uint256 minResponses;\\n    address[] oracles;\\n    bytes32[] jobIds;\\n    uint256[] payments;\\n  }\\n\\n  struct Requester {\\n    bytes4 callbackFunctionId;\\n    address sender;\\n    address callbackAddress;\\n    int256[] responses;\\n  }\\n\\n  // Service Agreement ID => ServiceAgreement\\n  mapping(bytes32 => ServiceAgreement) internal serviceAgreements;\\n  // Local Request ID => Service Agreement ID\\n  mapping(bytes32 => bytes32) internal serviceAgreementRequests;\\n  // Requester's Request ID => Requester\\n  mapping(bytes32 => Requester) internal requesters;\\n  // Local Request ID => Requester's Request ID\\n  mapping(bytes32 => bytes32) internal requests;\\n\\n  event NewServiceAgreement(bytes32 indexed saId, uint256 payment, uint256 minresponses);\\n  event ServiceAgreementRequested(bytes32 indexed saId, bytes32 indexed requestId, uint256 payment);\\n  event ServiceAgreementResponseReceived(bytes32 indexed saId, bytes32 indexed requestId, address indexed oracle, int256 answer);\\n  event ServiceAgreementAnswerUpdated(bytes32 indexed saId, bytes32 indexed requestId, int256 answer);\\n  event ServiceAgreementDeleted(bytes32 indexed saId);\\n\\n  /**\\n   * @notice Deploy the contract with a specified address for the LINK\\n   * and Oracle contract addresses\\n   * @dev Sets the storage for the specified addresses\\n   * @param _link The address of the LINK token contract\\n   */\\n  constructor(address _link) public {\\n    if(_link == address(0)) {\\n      setPublicChainlinkToken();\\n    } else {\\n      setChainlinkToken(_link);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows the owner of the contract to create new service agreements\\n   * with multiple oracles. Each oracle will have their own Job ID and can have\\n   * their own payment amount.\\n   * @dev The globalNonce keeps service agreement IDs unique. Assume one cannot\\n   * create the max uint256 number of service agreements in the same block.\\n   * @param _minResponses The minimum number of responses before the requesting\\n   * contract is called with the response data.\\n   * @param _oracles The list of oracle contract addresses.\\n   * @param _jobIds The corresponding list of Job IDs.\\n   * @param _payments The corresponding list of payment amounts.\\n   */\\n  function createServiceAgreement(\\n    uint256 _minResponses,\\n    address[] calldata _oracles,\\n    bytes32[] calldata _jobIds,\\n    uint256[] calldata _payments\\n  )\\n    external returns (bytes32 saId)\\n  {\\n    require(_minResponses > 0, \\\"Min responses must be > 0\\\");\\n    require(_oracles.length == _jobIds.length && _oracles.length == _payments.length, \\\"Unmet length\\\");\\n    require(_oracles.length <= MAX_ORACLE_COUNT, \\\"Cannot have more than 45 oracles\\\");\\n    require(_oracles.length >= _minResponses, \\\"Invalid min responses\\\");\\n    uint256 totalPayment;\\n    for (uint i = 0; i < _payments.length; i++) {\\n      totalPayment = totalPayment.add(_payments[i]);\\n    }\\n    saId = keccak256(abi.encodePacked(globalNonce, now));\\n    globalNonce++; // yes, let it overflow\\n    serviceAgreements[saId] = ServiceAgreement(totalPayment, _minResponses, _oracles, _jobIds, _payments);\\n\\n    emit NewServiceAgreement(saId, totalPayment, _minResponses);\\n  }\\n\\n  /**\\n   * @notice This is a helper function to retrieve the details of a service agreement\\n   * by its given service agreement ID.\\n   * @dev This function is used instead of the public mapping to return the values\\n   * of the arrays: oracles, jobIds, and payments.\\n   */\\n  function getServiceAgreement(bytes32 _saId)\\n    external view returns\\n  (\\n    uint256 totalPayment,\\n    uint256 minResponses,\\n    address[] memory oracles,\\n    bytes32[] memory jobIds,\\n    uint256[] memory payments\\n  )\\n  {\\n    return\\n    (\\n      serviceAgreements[_saId].totalPayment,\\n      serviceAgreements[_saId].minResponses,\\n      serviceAgreements[_saId].oracles,\\n      serviceAgreements[_saId].jobIds,\\n      serviceAgreements[_saId].payments\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken() public view override returns (address) {\\n    return chainlinkTokenAddress();\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param _sender The sender of the request\\n   * @param _payment The amount of payment given (specified in wei)\\n   * @param _saId The Job Specification ID\\n   * @param _callbackAddress The callback address for the response\\n   * @param _callbackFunctionId The callback function ID for the response\\n   * @param _nonce The nonce sent by the requester\\n   * @param _data The CBOR payload of the request\\n   */\\n  function oracleRequest(\\n    address _sender,\\n    uint256 _payment,\\n    bytes32 _saId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionId,\\n    uint256 _nonce,\\n    uint256,\\n    bytes calldata _data\\n  )\\n    external\\n    onlyLINK\\n    override\\n    checkCallbackAddress(_callbackAddress)\\n  {\\n    uint256 totalPayment = serviceAgreements[_saId].totalPayment;\\n    // this revert message does not bubble up\\n    require(_payment >= totalPayment, \\\"Insufficient payment\\\");\\n    bytes32 callbackRequestId = keccak256(abi.encodePacked(_sender, _nonce));\\n    require(requesters[callbackRequestId].sender == address(0), \\\"Nonce already in-use\\\");\\n    requesters[callbackRequestId].callbackFunctionId = _callbackFunctionId;\\n    requesters[callbackRequestId].callbackAddress = _callbackAddress;\\n    requesters[callbackRequestId].sender = _sender;\\n    createRequests(_saId, callbackRequestId, _data);\\n    if (_payment > totalPayment) {\\n      uint256 overage = _payment.sub(totalPayment);\\n      LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n      assert(_link.transfer(_sender, overage));\\n    }\\n  }\\n\\n  /**\\n   * @dev Creates Chainlink requests to each oracle in the service agreement with the\\n   * same data payload supplied by the requester\\n   * @param _saId The service agreement ID\\n   * @param _incomingRequestId The requester-supplied request ID\\n   * @param _data The data payload (request parameters) to send to each oracle\\n   */\\n  function createRequests(bytes32 _saId, bytes32 _incomingRequestId, bytes memory _data) private {\\n    ServiceAgreement memory sa = serviceAgreements[_saId];\\n    require(sa.minResponses > 0, \\\"Invalid service agreement\\\");\\n    Chainlink.Request memory request;\\n    bytes32 outgoingRequestId;\\n    emit ServiceAgreementRequested(_saId, _incomingRequestId, sa.totalPayment);\\n    for (uint i = 0; i < sa.oracles.length; i++) {\\n      request = buildChainlinkRequest(sa.jobIds[i], address(this), this.chainlinkCallback.selector);\\n      request.setBuffer(_data);\\n      outgoingRequestId = sendChainlinkRequestTo(sa.oracles[i], request, sa.payments[i]);\\n      requests[outgoingRequestId] = _incomingRequestId;\\n      serviceAgreementRequests[outgoingRequestId] = _saId;\\n    }\\n  }\\n\\n  /**\\n   * @notice The fulfill method from requests created by this contract\\n   * @dev The recordChainlinkFulfillment protects this function from being called\\n   * by anyone other than the oracle address that the request was sent to\\n   * @param _requestId The ID that was generated for the request\\n   * @param _data The answer provided by the oracle\\n   */\\n  function chainlinkCallback(bytes32 _requestId, int256 _data)\\n    external\\n    recordChainlinkFulfillment(_requestId)\\n    returns (bool)\\n  {\\n    ServiceAgreement memory sa = serviceAgreements[serviceAgreementRequests[_requestId]];\\n    bytes32 cbRequestId = requests[_requestId];\\n    bytes32 saId = serviceAgreementRequests[_requestId];\\n    delete requests[_requestId];\\n    delete serviceAgreementRequests[_requestId];\\n    emit ServiceAgreementResponseReceived(saId, cbRequestId, msg.sender, _data);\\n    requesters[cbRequestId].responses.push(_data);\\n    Requester memory req = requesters[cbRequestId];\\n    if (req.responses.length == sa.oracles.length) delete requesters[cbRequestId];\\n    bool success = true;\\n    if (req.responses.length == sa.minResponses) {\\n      int256 result = Median.calculate(req.responses);\\n      emit ServiceAgreementAnswerUpdated(saId, cbRequestId, result);\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (success, ) = req.callbackAddress.call(abi.encodeWithSelector(req.callbackFunctionId, cbRequestId, result));\\n    }\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Allows the owner to withdraw any LINK balance on the contract\\n   * @dev The only valid case for there to be remaining LINK on this contract\\n   * is if a user accidentally sent LINK directly to this contract's address.\\n   */\\n  function withdrawLink() external onlyOwner {\\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(_link.transfer(msg.sender, _link.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n  }\\n\\n  /**\\n   * @notice Call this method if no response is received within 5 minutes\\n   * @param _requestId The ID that was generated for the request to cancel\\n   * @param _payment The payment specified for the request to cancel\\n   * @param _callbackFunctionId The bytes4 callback function ID specified for\\n   * the request to cancel\\n   * @param _expiration The expiration generated for the request to cancel\\n   */\\n  function cancelOracleRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunctionId,\\n    uint256 _expiration\\n  )\\n    external\\n    override\\n  {\\n    bytes32 cbRequestId = requests[_requestId];\\n    delete requests[_requestId];\\n    delete serviceAgreementRequests[_requestId];\\n    Requester memory req = requesters[cbRequestId];\\n    require(req.sender == msg.sender, \\\"Only requester can cancel\\\");\\n    delete requesters[cbRequestId];\\n    cancelChainlinkRequest(_requestId, _payment, _callbackFunctionId, _expiration);\\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(_link.transfer(req.sender, _payment), \\\"Unable to transfer\\\");\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param _to The callback address\\n   */\\n  modifier checkCallbackAddress(address _to) {\\n    require(_to != chainlinkTokenAddress(), \\\"Cannot callback to LINK\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n  using SafeMathChainlink for uint256;\\n\\n  uint256 constant internal LINK = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ARGS_VERSION = 1;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  ChainlinkRequestInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param _specId The Job Specification ID that the request will be created for\\n   * @param _callbackAddress The callback address that the response will be sent to\\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32)\\n  {\\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param _oracle The address of the oracle for the request\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32 requestId)\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    _req.nonce = requestCount;\\n    pendingRequests[requestId] = _oracle;\\n    emit ChainlinkRequested(requestId);\\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of LINK sent for the request\\n   * @param _callbackFunc The callback function specified for the request\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    internal\\n  {\\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkCancelled(_requestId);\\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param _oracle The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address _oracle) internal {\\n    oracle = ChainlinkRequestInterface(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param _link The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address _link) internal {\\n    link = LinkTokenInterface(_link);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param _oracle The address of the oracle contract that will fulfill the request\\n   * @param _requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\\n    internal\\n    notPendingRequest(_requestId)\\n  {\\n    pendingRequests[_requestId] = _oracle;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param _ens The address of the ENS contract\\n   * @param _node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address _ens, bytes32 _node)\\n    internal\\n  {\\n    ens = ENSInterface(_ens);\\n    ensNode = _node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Encodes the request to be sent to the oracle contract\\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\\n   * will be validated in the oracle contract.\\n   * @param _req The initialized Chainlink Request\\n   * @return The bytes payload for the `transferAndCall` method\\n   */\\n  function encodeRequest(Chainlink.Request memory _req)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    return abi.encodeWithSelector(\\n      oracle.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      _req.id,\\n      _req.callbackAddress,\\n      _req.callbackFunctionId,\\n      _req.nonce,\\n      ARGS_VERSION,\\n      _req.buf.buf);\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 _requestId)\\n    internal\\n    recordChainlinkFulfillment(_requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\\n    require(msg.sender == pendingRequests[_requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkFulfilled(_requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 _requestId) {\\n    require(pendingRequests[_requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/Chainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param _id The Job Specification ID\\n   * @param _callbackAddress The callback address\\n   * @param _callbackFunction The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 _id,\\n    address _callbackAddress,\\n    bytes4 _callbackFunction\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = _id;\\n    self.callbackAddress = _callbackAddress;\\n    self.callbackFunctionId = _callbackFunction;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param _data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory _data)\\n    internal pure\\n  {\\n    BufferChainlink.init(self.buf, _data.length);\\n    BufferChainlink.append(self.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The string value to add\\n   */\\n  function add(Request memory self, string memory _key, string memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeString(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory _key, int256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory _key, uint256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < _values.length; i++) {\\n      self.buf.encodeString(_values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/ENSInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\\n  function setResolver(bytes32 node, address _resolver) external;\\n  function setOwner(bytes32 node, address _owner) external;\\n  function setTTL(bytes32 node, uint64 _ttl) external;\\n  function owner(bytes32 node) external view returns (address);\\n  function resolver(bytes32 node) external view returns (address);\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/interfaces/PointerInterface.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/ENSResolver.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/CBORChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  function encodeType(BufferChainlink.buffer memory buf, uint8 major, uint value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.6/vendor/BufferChainlink.sol\": {\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint a, uint b) private pure returns(uint) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\"\n    },\n    \"contracts/messengers/staking-efficiency/SEMessenger.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '@chainlink/contracts/src/v0.6/ChainlinkClient.sol';\\n\\nimport '@stacktical/dsla-contracts/contracts/interfaces/IMessenger.sol';\\nimport '@stacktical/dsla-contracts/contracts/SLA.sol';\\nimport '@stacktical/dsla-contracts/contracts/PeriodRegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/StringUtils.sol';\\nimport '@stacktical/dsla-contracts/contracts/StakeRegistry.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\n/**\\n * @title SEMessenger\\n * @dev Staking efficiency Messenger\\n */\\n\\ncontract SEMessenger is ChainlinkClient, IMessenger, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev Mapping that stores chainlink sli request information\\n    mapping(bytes32 => SLIRequest) public requestIdToSLIRequest;\\n    /// @dev Array with all request IDs\\n    bytes32[] public requests;\\n    /// @dev The address of the SLARegistry contract\\n    address private _slaRegistryAddress;\\n    /// @dev Chainlink oracle address\\n    address private immutable _oracle;\\n    /// @dev chainlink jobId\\n    bytes32 private _jobId;\\n    // @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 private constant _baseFee = 0.1 ether;\\n    /// @dev fee for Chainlink querys. Currently 0.1 LINK\\n    uint256 private _fee;\\n    /// @dev to multiply the SLI value and get better precision. Useful to deploy SLO correctly\\n    uint256 private constant _messengerPrecision = 10**3;\\n\\n    uint256 private _requestsCounter;\\n    uint256 private _fulfillsCounter;\\n    PeriodRegistry private periodRegistry;\\n    StakeRegistry private stakeRegistry;\\n    bool private retry = false;\\n    /// @dev network name e.g. ethereum, harmony etc, to tell external adapter where to point\\n    bytes32 public networkName;\\n\\n    /**\\n     * @dev parameterize the variables according to network\\n     * @notice sets the Chainlink parameters (oracle address, token address, jobId) and sets the SLARegistry to 0x0 address\\n     * @param _messengerChainlinkOracle 1. the address of the oracle to create requests to\\n     * @param _messengerChainlinkToken 2. the address of LINK token contract\\n     * @param _feeMultiplier 6. states the amount of paid nodes running behind the precoordinator, to set the fee\\n     */\\n    constructor(\\n        address _messengerChainlinkOracle,\\n        address _messengerChainlinkToken,\\n        uint256 _feeMultiplier,\\n        PeriodRegistry _periodRegistry,\\n        StakeRegistry _stakeRegistry,\\n        bytes32 _networkName\\n    ) public {\\n        setChainlinkToken(_messengerChainlinkToken);\\n        _oracle = _messengerChainlinkOracle;\\n        _fee = _feeMultiplier * _baseFee;\\n        periodRegistry = _periodRegistry;\\n        stakeRegistry = _stakeRegistry;\\n        networkName = _networkName;\\n    }\\n\\n    /**\\n     * @dev event emitted when modifying the jobId\\n     * @param owner 1. -\\n     * @param jobId 2. -\\n     * @param fee 3. -\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev event emitted when modifying the jobId\\n     * @param caller 1. -\\n     * @param requestsCounter 2. -\\n     * @param requestId 3. -\\n     */\\n    event SLIRequested(\\n        address indexed caller,\\n        uint256 requestsCounter,\\n        bytes32 requestId\\n    );\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        if (!retry) {\\n            require(\\n                msg.sender == _slaRegistryAddress,\\n                'Can only be called by SLARegistry'\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier retryLock() {\\n        retry = true;\\n        _;\\n        retry = false;\\n    }\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() public override {\\n        // Only able to trigger this function once\\n        require(\\n            _slaRegistryAddress == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        _slaRegistryAddress = msg.sender;\\n    }\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. value of the period id\\n     * @param _slaAddress 2. SLA Address\\n     * @param _messengerOwnerApproval 3. if approval by owner or msg sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _messengerOwnerApproval,\\n        address _callerAddress\\n    ) public override onlySLARegistry nonReentrant {\\n        require(_jobId != 0, '_jobI empty');\\n        SLA sla = SLA(_slaAddress);\\n        if (_messengerOwnerApproval) {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                owner(),\\n                address(this),\\n                _fee\\n            );\\n        } else {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                _callerAddress,\\n                address(this),\\n                _fee\\n            );\\n        }\\n        Chainlink.Request memory request = buildChainlinkRequest(\\n            _jobId,\\n            address(this),\\n            this.fulfillSLI.selector\\n        );\\n        (\\n            uint256 sla_monitoring_start,\\n            uint256 sla_monitoring_end\\n        ) = periodRegistry.getPeriodStartAndEnd(sla.periodType(), _periodId);\\n        request.add(\\n            'sla_monitoring_start',\\n            StringUtils.uintToStr(sla_monitoring_start)\\n        );\\n        request.add(\\n            'sla_monitoring_end',\\n            StringUtils.uintToStr(sla_monitoring_end)\\n        );\\n        request.add('sla_address', StringUtils.addressToString(_slaAddress));\\n        request.add('network_name', StringUtils.bytes32ToStr(networkName));\\n\\n        // Sends the request with 0.1 LINK to the oracle contract\\n        bytes32 requestId = sendChainlinkRequestTo(_oracle, request, _fee);\\n\\n        requests.push(requestId);\\n\\n        requestIdToSLIRequest[requestId] = SLIRequest({\\n            slaAddress: _slaAddress,\\n            periodId: _periodId\\n        });\\n\\n        _requestsCounter += 1;\\n        emit SLIRequested(_callerAddress, _requestsCounter, requestId);\\n    }\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponse response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponse)\\n        external\\n        override\\n        nonReentrant\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        SLIRequest memory request = requestIdToSLIRequest[_requestId];\\n        emit SLIReceived(\\n            request.slaAddress,\\n            request.periodId,\\n            _requestId,\\n            bytes32(_chainlinkResponse)\\n        );\\n        _fulfillsCounter += 1;\\n        SLA(request.slaAddress).registerSLI(\\n            _chainlinkResponse,\\n            request.periodId\\n        );\\n    }\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        override\\n        retryLock\\n    {\\n        require(\\n            stakeRegistry.periodIsVerified(_slaAddress, _periodId),\\n            'StakeRegistry: not verified'\\n        );\\n        SLA sla = SLA(_slaAddress);\\n        (, , SLA.Status status) = sla.periodSLIs(_periodId);\\n        require(status == SLA.Status.NotVerified, 'SLA: verified');\\n        requestSLI(_periodId, _slaAddress, false, msg.sender);\\n    }\\n\\n    /**\\n     * @dev sets a new jobId, which is a agreement Id of a PreCoordinator contract\\n     * @param _newJobId the id of the PreCoordinator agreement\\n     * @param _feeMultiplier how many Chainlink nodes would be paid on the agreement id, to set the fee value\\n     */\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _jobId = _newJobId;\\n        _fee = _feeMultiplier * _baseFee;\\n        emit JobIdModified(msg.sender, _newJobId, _fee);\\n    }\\n\\n    /**\\n     * @dev returns the value of the sla registry address\\n     */\\n    function slaRegistryAddress() external view override returns (address) {\\n        return _slaRegistryAddress;\\n    }\\n\\n    /**\\n     * @dev returns the value of the messenger precision\\n     */\\n    function messengerPrecision() external view override returns (uint256) {\\n        return _messengerPrecision;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink oracle contract address\\n     */\\n    function oracle() external view override returns (address) {\\n        return _oracle;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink job id\\n     */\\n    function jobId() external view override returns (bytes32) {\\n        return _jobId;\\n    }\\n\\n    /**\\n     * @dev returns the chainlink fee value on LINK tokens\\n     */\\n    function fee() external view override returns (uint256) {\\n        return _fee;\\n    }\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view override returns (uint256) {\\n        return _requestsCounter;\\n    }\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view override returns (uint256) {\\n        return _fulfillsCounter;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/interfaces/IMessenger.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. id of the Chainlink request\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param _chainlinkResponseUint256 response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponseUint256)\\n        external\\n        virtual;\\n\\n    /**\\n     * @dev gets the interfaces precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        virtual;\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        virtual;\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/SLA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './SLORegistry.sol';\\nimport './Staking.sol';\\n\\ncontract SLA is Staking {\\n    using SafeMath for uint256;\\n\\n    enum Status {\\n        NotVerified,\\n        Respected,\\n        NotRespected\\n    }\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    //\\n    string public ipfsHash;\\n    address public immutable messengerAddress;\\n    ISLARegistry private _slaRegistry;\\n    IPeriodRegistry private immutable _periodRegistry;\\n    SLORegistry private immutable _sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    IPeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    bytes32[] public extraData;\\n\\n    bool private _breachedContract = false;\\n    bool public userWithdrawLocked = true;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    modifier onlyMessenger() {\\n        require(msg.sender == messengerAddress, 'not messenger');\\n        _;\\n    }\\n\\n    modifier onlyISLARegistry() {\\n        require(msg.sender == address(_slaRegistry), 'not ISLARegistry');\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        IPeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        bytes32[] memory _extraData,\\n        uint64 _leverage\\n    )\\n        public\\n        Staking(\\n            ISLARegistry(msg.sender),\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        messengerAddress = _messengerAddress;\\n        _slaRegistry = ISLARegistry(msg.sender);\\n        _periodRegistry = IPeriodRegistry(_slaRegistry.periodRegistry());\\n        _sloRegistry = SLORegistry(_slaRegistry.sloRegistry());\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        extraData = _extraData;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n        (uint256 sloValue, ) = _sloRegistry.registeredSLO(address(this));\\n        if (_sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            uint256 precision = 10000;\\n            uint256 deviation = _sli.sub(sloValue).mul(precision).div(\\n                _sli.add(sloValue).div(2)\\n            );\\n            uint256 normalizedPeriodId = _periodId.sub(initialPeriodId).add(1);\\n            uint256 rewardPercentage = deviation.mul(normalizedPeriodId).div(\\n                finalPeriodId - initialPeriodId + 1\\n            );\\n            _setRespectedPeriodReward(_periodId, rewardPercentage, precision);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUsersCompensation(_periodId);\\n            _breachedContract = true;\\n        }\\n    }\\n\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        if (_periodId < initialPeriodId) return false;\\n        if (_periodId > finalPeriodId) return false;\\n        return true;\\n    }\\n\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n        return\\n            _breachedContract == true ||\\n            (block.timestamp >= endOfLastValidPeriod &&\\n                periodSLIs[finalPeriodId].status != Status.NotVerified);\\n    }\\n\\n    function stakeTokens(uint256 _amount, address _token) external {\\n        bool isContractFinished = contractFinished();\\n        require(!isContractFinished, 'finished contract');\\n        _stake(_amount, _token);\\n        emit Stake(_token, nextVerifiablePeriod, msg.sender, _amount);\\n        IStakeRegistry stakeRegistry = IStakeRegistry(\\n            _slaRegistry.stakeRegistry()\\n        );\\n        stakeRegistry.registerStakedSla(msg.sender);\\n    }\\n\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        bool isContractFinished = contractFinished();\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawProviderTokens(_amount, _tokenAddress, isContractFinished);\\n    }\\n\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        if (msg.sender != owner() && userWithdrawLocked) {\\n            bool isContractFinished = contractFinished();\\n            require(isContractFinished, 'not finished');\\n        }\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n        _withdrawUserTokens(_amount, _tokenAddress);\\n    }\\n\\n    function toggleUserWithdrawLocked() external onlyOwner {\\n        userWithdrawLocked = !userWithdrawLocked;\\n    }\\n\\n    function getStakersLength() external view returns (uint256) {\\n        return stakers.length;\\n    }\\n\\n    function breachedContract() external view returns (bool) {\\n        return _breachedContract;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/PeriodRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\n\\n/**\\n * @title SLARegistry\\n * @dev SLARegistry is a contract for handling creation of service level\\n * agreements and keeping track of the created agreements\\n */\\ncontract PeriodRegistry is IPeriodRegistry, Ownable {\\n    using SafeMath for uint256;\\n\\n    /// @dev struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @dev (periodType=>PeriodDefinition) hourly/weekly/biWeekly/monthly/yearly are periodTypes\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log a new period initialized\\n     *@param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev public function for creating canonical service level agreements\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of the starts of the period\\n     *@param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        PeriodDefinition storage periodDefinition = periodDefinitions[\\n            _periodType\\n        ];\\n        require(\\n            !periodDefinition.initialized,\\n            'Period type already initialized'\\n        );\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            'Period type starts and ends should match'\\n        );\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                'Start should be before end'\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    'Start of a period should be 1 second after the end of the previous period'\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev function to add new periods to certain period type\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodStarts 2. array of uint256 of the period starts to add\\n     *@param _periodEnds 3. array of uint256 of the period starts to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) public onlyOwner {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        PeriodDefinition storage periodDefinition = periodDefinitions[\\n            _periodType\\n        ];\\n        require(periodDefinition.initialized, 'Period was not initialized yet');\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                'Start should be before end'\\n            );\\n            if (index < _periodStarts.length.sub(1)) {\\n                require(\\n                    _periodStarts[index + 1].sub(_periodEnds[index]) == 1,\\n                    'Start of a period should be 1 second after the end of the previous period'\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @dev public function to get the start and end of a period\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (uint256 start, uint256 end)\\n    {\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @dev public function to check if a periodType id is initialized\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        override\\n        returns (bool initialized)\\n    {\\n        PeriodDefinition memory periodDefinition = periodDefinitions[\\n            _periodType\\n        ];\\n        initialized = periodDefinition.initialized;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period id is valid i.e. it belongs to the added id array\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        override\\n        returns (bool valid)\\n    {\\n        PeriodDefinition memory periodDefinition = periodDefinitions[\\n            _periodType\\n        ];\\n        valid = periodDefinition.starts.length.sub(1) >= _periodId;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has finished\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            'Period data is not valid'\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to check if a period has started\\n     *@param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     *@param _periodId 2. period id to get start and end\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            'Period data is not valid'\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev public function to get the periodDefinitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/StringUtils.sol\": {\n      \"content\": \"// solhint-disable-line\\npragma solidity 0.6.6;\\n\\nlibrary StringUtils {\\n    function addressToString(address _address)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = '0123456789abcdef';\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function bytes32ToStr(bytes32 _bytes32)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function bytesToUint(bytes calldata b)\\n        external\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /*\\n        ORACLIZE_API\\n        Copyright (c) 2015-2016 Oraclize SRL\\n        Copyright (c) 2016 Oraclize LTD\\n        Permission is hereby granted, free of charge, to any person obtaining a copy\\n        of this software and associated documentation files (the \\\"Software\\\"), to deal\\n        in the Software without restriction, including without limitation the rights\\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n        copies of the Software, and to permit persons to whom the Software is\\n        furnished to do so, subject to the following conditions:\\n        The above copyright notice and this permission notice shall be included in\\n        all copies or substantial portions of the Software.\\n        THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n        THE SOFTWARE.\\n    */\\n    function uintToStr(uint256 _i)\\n        external\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        uint256 number = _i;\\n        if (number == 0) {\\n            return '0';\\n        }\\n        uint256 j = number;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (number != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (number % 10)));\\n            number /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/StakeRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport './SLA.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './StringUtils.sol';\\n\\n/**\\n * @title StakeRegistry\\n * @dev StakeRegistry is a contract to register the staking activity of the platform, along\\n with controlling certain admin privileged parameters\\n */\\ncontract StakeRegistry is IStakeRegistry, Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev struct to return on getActivePool function.\\n    struct ActivePool {\\n        address SLAAddress;\\n        uint256 stake;\\n        string assetName;\\n        address assetAddress;\\n    }\\n\\n    struct LockedValue {\\n        uint256 lockedValue;\\n        uint256 slaPeriodIdsLength;\\n        uint256 dslaDepositByPeriod;\\n        uint256 dslaPlatformReward;\\n        uint256 dslaMessengerReward;\\n        uint256 dslaUserReward;\\n        uint256 dslaBurnedByVerification;\\n        mapping(uint256 => bool) verifiedPeriods;\\n    }\\n\\n    address private _DSLATokenAddress;\\n    ISLARegistry public slaRegistry;\\n\\n    //______ onlyOwner modifiable parameters ______\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\\n    uint256 private _DSLAburnRate = 3;\\n    /// @dev (ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\\n    mapping(address => LockedValue) public slaLockedValue;\\n    /// @dev DSLA deposit by period to create SLA\\n    uint256 private _dslaDepositByPeriod = 1000 ether;\\n    /// @dev DSLA rewarded to the foundation\\n    uint256 private _dslaPlatformReward = 250 ether;\\n    /// @dev DSLA rewarded to the Messenger creator\\n    uint256 private _dslaMessengerReward = 250 ether;\\n    /// @dev DSLA rewarded to user calling the period verification\\n    uint256 private _dslaUserReward = 250 ether;\\n    /// @dev DSLA burned after every period verification\\n    uint256 private _dslaBurnedByVerification = 250 ether;\\n    /// @dev max token length for allowedTokens array of Staking contracts\\n    uint256 private _maxTokenLength = 1;\\n    /// @dev max times of hedge leverage\\n    uint64 private _maxLeverage = 100;\\n    /// @dev burn DSLA after verification\\n    bool private _burnDSLA = true;\\n\\n    /// @dev array with the allowed tokens addresses of the StakeRegistry\\n    address[] public allowedTokens;\\n\\n    /// @dev (userAddress => SLA[]) with user staked SLAs to get tokenPool\\n    mapping(address => SLA[]) public userStakedSlas;\\n\\n    /**\\n     * @dev event to log a verifiation reward distributed\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param requester 2. -\\n     * @param userReward 3. -\\n     * @param platformReward 4. -\\n     * @param messengerReward 5. -\\n     * @param burnedDSLA 6. -\\n     */\\n    event VerificationRewardDistributed(\\n        address indexed sla,\\n        address indexed requester,\\n        uint256 userReward,\\n        uint256 platformReward,\\n        uint256 messengerReward,\\n        uint256 burnedDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param DSLAburnRate 1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\\n     *@param dslaDepositByPeriod 2. DSLA deposit by period to create SLA\\n     *@param dslaPlatformReward 3. DSLA rewarded to Stacktical team\\n     *@param dslaUserReward 4. DSLA rewarded to user calling the period verification\\n     *@param dslaBurnedByVerification 5. DSLA burned after every period verification\\n     */\\n    event StakingParametersModified(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n\\n    event LockedValueReturned(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param dTokenAddress 1. -\\n     *@param sla 2. -\\n     *@param name 3. -\\n     *@param symbol 4. -\\n     */\\n    event DTokenCreated(\\n        address indexed dTokenAddress,\\n        address indexed sla,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     *@param sla 1. -\\n     *@param owner 2. -\\n     *@param amount 3. -\\n     */\\n    event ValueLocked(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param _dslaTokenAddress 1. DSLA Token\\n     */\\n    constructor(address _dslaTokenAddress) public {\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                .add(_dslaMessengerReward)\\n                .add(_dslaUserReward)\\n                .add(_dslaBurnedByVerification),\\n            'Staking parameters should match on summation'\\n        );\\n        _DSLATokenAddress = _dslaTokenAddress;\\n        allowedTokens.push(_dslaTokenAddress);\\n    }\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            'Can only be called by SLARegistry'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external override {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        slaRegistry = ISLARegistry(msg.sender);\\n    }\\n\\n    /**\\n     *@dev add a token to ve allowed for staking\\n     *@param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        require(!isAllowedToken(_tokenAddress), 'token already added');\\n        allowedTokens.push(_tokenAddress);\\n    }\\n\\n    function isAllowedToken(address _tokenAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev public view function that returns true if the _owner has staked on _sla\\n     *@param _user 1. address to check\\n     *@param _sla 2. sla to check\\n     *@return bool, true if _sla was staked by _user\\n     */\\n\\n    function slaWasStakedByUser(address _user, address _sla)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < userStakedSlas[_user].length; index++) {\\n            if (address(userStakedSlas[_user][index]) == _sla) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     *@dev register the sending SLA contract as staked by _owner\\n     *@param _owner 1. SLA contract to stake\\n     */\\n    function registerStakedSla(address _owner)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        if (!slaWasStakedByUser(_owner, msg.sender)) {\\n            userStakedSlas[_owner].push(SLA(msg.sender));\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     *@dev to create dTokens for staking\\n     *@param _name 1. token name\\n     *@param _symbol 2. token symbol\\n     */\\n    function createDToken(string calldata _name, string calldata _symbol)\\n        external\\n        override\\n        returns (address)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        ERC20PresetMinterPauser dToken = new ERC20PresetMinterPauser(\\n            _name,\\n            _symbol\\n        );\\n        dToken.grantRole(dToken.MINTER_ROLE(), msg.sender);\\n        emit DTokenCreated(address(dToken), msg.sender, _name, _symbol);\\n        return address(dToken);\\n    }\\n\\n    function lockDSLAValue(\\n        address _slaOwner,\\n        address _sla,\\n        uint256 _periodIdsLength\\n    ) external override onlySLARegistry nonReentrant {\\n        uint256 lockedValue = _dslaDepositByPeriod.mul(_periodIdsLength);\\n        ERC20(_DSLATokenAddress).safeTransferFrom(\\n            _slaOwner,\\n            address(this),\\n            lockedValue\\n        );\\n        slaLockedValue[_sla] = LockedValue({\\n            lockedValue: lockedValue,\\n            slaPeriodIdsLength: _periodIdsLength,\\n            dslaDepositByPeriod: _dslaDepositByPeriod,\\n            dslaPlatformReward: _dslaPlatformReward,\\n            dslaMessengerReward: _dslaMessengerReward,\\n            dslaUserReward: _dslaUserReward,\\n            dslaBurnedByVerification: _dslaBurnedByVerification\\n        });\\n        emit ValueLocked(_sla, _slaOwner, lockedValue);\\n    }\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external override onlySLARegistry nonReentrant {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        require(\\n            !_lockedValue.verifiedPeriods[_periodId],\\n            'Period rewards already distributed'\\n        );\\n        _lockedValue.verifiedPeriods[_periodId] = true;\\n        _lockedValue.lockedValue = _lockedValue.lockedValue.sub(\\n            _lockedValue.dslaDepositByPeriod\\n        );\\n        ERC20(_DSLATokenAddress).safeTransfer(\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward\\n        );\\n        ERC20(_DSLATokenAddress).safeTransfer(\\n            owner(),\\n            _lockedValue.dslaPlatformReward\\n        );\\n        ERC20(_DSLATokenAddress).safeTransfer(\\n            IMessenger(SLA(_sla).messengerAddress()).owner(),\\n            _lockedValue.dslaMessengerReward\\n        );\\n        if (_burnDSLA) {\\n            (bool success, ) = _DSLATokenAddress.call(\\n                abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes('burn(uint256)'))),\\n                    _lockedValue.dslaBurnedByVerification\\n                )\\n            );\\n            require(success, 'burn process failed');\\n        }\\n        emit VerificationRewardDistributed(\\n            _sla,\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward,\\n            _lockedValue.dslaPlatformReward,\\n            _lockedValue.dslaMessengerReward,\\n            _lockedValue.dslaBurnedByVerification\\n        );\\n    }\\n\\n    function returnLockedValue(address _sla)\\n        external\\n        override\\n        onlySLARegistry\\n        nonReentrant\\n    {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        uint256 remainingBalance = _lockedValue.lockedValue;\\n        require(remainingBalance > 0, 'locked value is empty');\\n        _lockedValue.lockedValue = 0;\\n        ERC20(_DSLATokenAddress).safeTransfer(\\n            SLA(_sla).owner(),\\n            remainingBalance\\n        );\\n        emit LockedValueReturned(_sla, SLA(_sla).owner(), remainingBalance);\\n    }\\n\\n    /**\\n     * @dev returns the active pools owned by a user.\\n     * @param _slaOwner 1. owner of the active pool\\n     * @return ActivePool[], array of structs: {SLAAddress,stake,assetName}\\n     */\\n    function getActivePool(address _slaOwner)\\n        external\\n        view\\n        returns (ActivePool[] memory)\\n    {\\n        bytes4 NAME_SELECTOR = bytes4(keccak256(bytes('name()')));\\n        uint256 stakeCounter = 0;\\n        // Count the stakes of the user, checking every SLA staked\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = SLA(userStakedSlas[_slaOwner][index]);\\n            stakeCounter = stakeCounter.add(\\n                currentSLA.getAllowedTokensLength()\\n            );\\n        }\\n\\n        ActivePool[] memory activePools = new ActivePool[](stakeCounter);\\n        // to insert on activePools array\\n        uint256 stakePosition = 0;\\n        for (\\n            uint256 index = 0;\\n            index < userStakedSlas[_slaOwner].length;\\n            index++\\n        ) {\\n            SLA currentSLA = userStakedSlas[_slaOwner][index];\\n            for (\\n                uint256 tokenIndex = 0;\\n                tokenIndex < currentSLA.getAllowedTokensLength();\\n                tokenIndex++\\n            ) {\\n                (address tokenAddress, uint256 stake) = currentSLA\\n                .getTokenStake(_slaOwner, tokenIndex);\\n                (, bytes memory tokenNameBytes) = tokenAddress.staticcall(\\n                    abi.encodeWithSelector(NAME_SELECTOR)\\n                );\\n                ActivePool memory currentActivePool = ActivePool({\\n                    SLAAddress: address(currentSLA),\\n                    stake: stake,\\n                    assetName: string(tokenNameBytes),\\n                    assetAddress: tokenAddress\\n                });\\n                activePools[stakePosition] = currentActivePool;\\n                stakePosition = stakePosition.add(1);\\n            }\\n        }\\n        return activePools;\\n    }\\n\\n    //_______ OnlyOwner functions _______\\n    function setStakingParameters(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    ) external onlyOwner {\\n        _DSLAburnRate = DSLAburnRate;\\n        _dslaDepositByPeriod = dslaDepositByPeriod;\\n        _dslaPlatformReward = dslaPlatformReward;\\n        _dslaMessengerReward = dslaMessengerReward;\\n        _dslaUserReward = dslaUserReward;\\n        _dslaBurnedByVerification = dslaBurnedByVerification;\\n        _maxTokenLength = maxTokenLength;\\n        _maxLeverage = maxLeverage;\\n        _burnDSLA = burnDSLA;\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward\\n                .add(_dslaMessengerReward)\\n                .add(_dslaUserReward)\\n                .add(_dslaBurnedByVerification),\\n            'Staking parameters should match on summation'\\n        );\\n        emit StakingParametersModified(\\n            DSLAburnRate,\\n            dslaDepositByPeriod,\\n            dslaPlatformReward,\\n            dslaMessengerReward,\\n            dslaUserReward,\\n            dslaBurnedByVerification,\\n            maxTokenLength,\\n            maxLeverage,\\n            burnDSLA\\n        );\\n    }\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        )\\n    {\\n        DSLAburnRate = _DSLAburnRate;\\n        dslaDepositByPeriod = _dslaDepositByPeriod;\\n        dslaPlatformReward = _dslaPlatformReward;\\n        dslaMessengerReward = _dslaMessengerReward;\\n        dslaUserReward = _dslaUserReward;\\n        dslaBurnedByVerification = _dslaBurnedByVerification;\\n        maxTokenLength = _maxTokenLength;\\n        maxLeverage = _maxLeverage;\\n        burnDSLA = _burnDSLA;\\n    }\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return slaLockedValue[_sla].verifiedPeriods[_periodId];\\n    }\\n\\n    function DSLATokenAddress() external view override returns (address) {\\n        return _DSLATokenAddress;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/interfaces/ISLARegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface ISLARegistry {\\n    function sloRegistry() external view returns (address);\\n\\n    function periodRegistry() external view returns (address);\\n\\n    function messengerRegistry() external view returns (address);\\n\\n    function stakeRegistry() external view returns (address);\\n\\n    function isRegisteredSLA(address _slaAddress) external view returns (bool);\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/interfaces/IStakeRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface IStakeRegistry {\\n    function registerStakedSla(address _owner) external returns (bool);\\n\\n    function setSLARegistry() external;\\n\\n    function lockDSLAValue(\\n        address slaOwner_,\\n        address sla_,\\n        uint256 periodIdsLength_\\n    ) external;\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        );\\n\\n    function DSLATokenAddress() external view returns (address);\\n\\n    function isAllowedToken(address tokenAddress_) external view returns (bool);\\n\\n    function returnLockedValue(address sla_) external;\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external;\\n\\n    function createDToken(string calldata _name, string calldata _symbol)\\n        external\\n        returns (address);\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/interfaces/IPeriodRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface IPeriodRegistry {\\n    enum PeriodType {\\n        Hourly,\\n        Daily,\\n        Weekly,\\n        BiWeekly,\\n        Monthly,\\n        Yearly\\n    }\\n\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/SLORegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SLORegistry\\n * @dev SLORegistry is a contract for handling creation of service level\\n * objectives and querying those service level objectives\\n */\\ncontract SLORegistry {\\n    enum SLOType {\\n        EqualTo,\\n        NotEqualTo,\\n        SmallerThan,\\n        SmallerOrEqualTo,\\n        GreaterThan,\\n        GreaterOrEqualTo\\n    }\\n\\n    struct SLO {\\n        uint256 sloValue;\\n        SLOType sloType;\\n    }\\n    /**\\n     * @dev SLO Registered event\\n     * @param sla 1. -\\n     * @param sloValue 2. -\\n     * @param sloType 3. -\\n     */\\n    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\\n\\n    address private slaRegistry;\\n    mapping(address => SLO) public registeredSLO;\\n\\n    modifier onlySLARegistry {\\n        require(\\n            msg.sender == slaRegistry,\\n            'Should only be called using the SLARegistry contract'\\n        );\\n        _;\\n    }\\n\\n    function setSLARegistry() public {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev public function for creating service level objectives\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _slaAddress 3. -\\n     */\\n    function registerSLO(\\n        uint256 _sloValue,\\n        SLOType _sloType,\\n        address _slaAddress\\n    ) public onlySLARegistry {\\n        registeredSLO[_slaAddress] = SLO({\\n            sloValue: _sloValue,\\n            sloType: _sloType\\n        });\\n        emit SLORegistered(_slaAddress, _sloValue, _sloType);\\n    }\\n\\n    /**\\n     * @dev external view function to check a value against the SLO\\n     * @param _value The SLI value to check against the SL\\n     * @return boolean with the SLO honored state\\n     */\\n    function isRespected(uint256 _value, address _slaAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        SLO memory slo = registeredSLO[_slaAddress];\\n        SLOType sloType = slo.sloType;\\n        uint256 sloValue = slo.sloValue;\\n\\n        if (sloType == SLOType.EqualTo) {\\n            return _value == sloValue;\\n        }\\n\\n        if (sloType == SLOType.NotEqualTo) {\\n            return _value != sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerThan) {\\n            return _value < sloValue;\\n        }\\n\\n        if (sloType == SLOType.SmallerOrEqualTo) {\\n            return _value <= sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterThan) {\\n            return _value > sloValue;\\n        }\\n\\n        if (sloType == SLOType.GreaterOrEqualTo) {\\n            return _value >= sloValue;\\n        }\\n        revert(\\\"isRespected wasn't executed properly\\\");\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/Staking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './StringUtils.sol';\\n\\ncontract Staking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev StakeRegistry contract\\n    IStakeRegistry private _stakeRegistry;\\n    /// @dev SLARegistry contract\\n    IPeriodRegistry private immutable _periodRegistry;\\n    /// @dev DSLA token address to burn fees\\n    address private immutable _dslaTokenAddress;\\n\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providerPool;\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public usersPool;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => ERC20PresetMinterPauser) public duTokenRegistry;\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => ERC20PresetMinterPauser) public dpTokenRegistry;\\n\\n    /// @dev address[] of the stakers of the SLA contract\\n    address[] public stakers;\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token) == true, 'token not allowed');\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted {\\n        if (whitelistedContract == true) {\\n            require(whitelist[msg.sender] == true, 'not whitelisted');\\n        }\\n        _;\\n    }\\n\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 usersStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    constructor(\\n        ISLARegistry slaRegistry_,\\n        bool whitelistedContract_,\\n        uint128 slaID_,\\n        uint64 leverage_,\\n        address contractOwner_\\n    ) public {\\n        _stakeRegistry = IStakeRegistry(slaRegistry_.stakeRegistry());\\n        _periodRegistry = IPeriodRegistry(slaRegistry_.periodRegistry());\\n        whitelistedContract = whitelistedContract_;\\n        (\\n            uint256 _DSLAburnRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint64 _maxLeverage,\\n\\n        ) = _stakeRegistry.getStakingParameters();\\n        _dslaTokenAddress = _stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[contractOwner_] = true;\\n        slaID = slaID_;\\n        require(\\n            leverage_ <= _maxLeverage && leverage_ >= 1,\\n            'incorrect leverage'\\n        );\\n        leverage = leverage_;\\n    }\\n\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == false) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]] == true) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, , ) = _stakeRegistry\\n        .getStakingParameters();\\n        require(!isAllowedToken(_tokenAddress), 'already added');\\n        require(_stakeRegistry.isAllowedToken(_tokenAddress), 'not allowed');\\n        allowedTokens.push(_tokenAddress);\\n        require(maxTokenLength >= allowedTokens.length, 'max token length');\\n        string memory dTokenID = StringUtils.uintToStr(slaID);\\n        string memory duTokenName = string(\\n            abi.encodePacked('DSLA-SHORT-', dTokenID)\\n        );\\n        string memory duTokenSymbol = string(\\n            abi.encodePacked('DSLA-SP-', dTokenID)\\n        );\\n        string memory dpTokenName = string(\\n            abi.encodePacked('DSLA-LONG-', dTokenID)\\n        );\\n        string memory dpTokenSymbol = string(\\n            abi.encodePacked('DSLA-LP-', dTokenID)\\n        );\\n\\n        ERC20PresetMinterPauser duToken = ERC20PresetMinterPauser(\\n            _stakeRegistry.createDToken(duTokenName, duTokenSymbol)\\n        );\\n        ERC20PresetMinterPauser dpToken = ERC20PresetMinterPauser(\\n            _stakeRegistry.createDToken(dpTokenName, dpTokenSymbol)\\n        );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenName,\\n            address(duToken),\\n            duTokenName,\\n            duTokenName\\n        );\\n    }\\n\\n    function _stake(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n        onlyWhitelisted\\n    {\\n        ERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        //duTokens\\n        if (msg.sender != owner()) {\\n            (uint256 providerStake, uint256 usersStake) = (\\n                providerPool[_tokenAddress],\\n                usersPool[_tokenAddress]\\n            );\\n            require(\\n                usersStake.add(_amount).mul(leverage) <= providerStake,\\n                'user stake'\\n            );\\n            ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // if there's no minted tokens, then create 1-1 proportion\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = usersPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDUTokens = _amount.mul(p0).div(t0);\\n                duToken.mint(msg.sender, mintedDUTokens);\\n            }\\n            usersPool[_tokenAddress] = usersPool[_tokenAddress].add(_amount);\\n            //dpTokens\\n        } else {\\n            ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                uint256 t0 = providerPool[_tokenAddress];\\n                // mint dTokens proportionally\\n                uint256 mintedDPTokens = _amount.mul(p0).div(t0);\\n                dpToken.mint(msg.sender, mintedDPTokens);\\n            }\\n\\n            providerPool[_tokenAddress] = providerPool[_tokenAddress].add(\\n                _amount\\n            );\\n        }\\n\\n        if (registeredStakers[msg.sender] == false) {\\n            registeredStakers[msg.sender] = true;\\n            stakers.push(msg.sender);\\n        }\\n    }\\n\\n    function _setRespectedPeriodReward(\\n        uint256 _periodId,\\n        uint256 _rewardPercentage,\\n        uint256 _precision\\n    ) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 reward = usersStake.mul(_rewardPercentage).div(_precision);\\n\\n            usersPool[tokenAddress] = usersPool[tokenAddress].sub(reward);\\n\\n            providerPool[tokenAddress] = providerPool[tokenAddress].add(reward);\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    function _setUsersCompensation(uint256 _periodId) internal {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n            uint256 usersStake = usersPool[tokenAddress];\\n            uint256 compensation = usersStake.mul(leverage);\\n            providerPool[tokenAddress] = providerPool[tokenAddress].sub(\\n                compensation\\n            );\\n            usersPool[tokenAddress] = usersPool[tokenAddress].add(compensation);\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersStake,\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) {\\n        uint256 providerStake = providerPool[_tokenAddress];\\n        uint256 usersStake = usersPool[_tokenAddress];\\n        if (!_contractFinished) {\\n            require(\\n                providerStake.sub(_amount) >= usersStake.mul(leverage),\\n                'bad amount'\\n            );\\n        }\\n        ERC20PresetMinterPauser dpToken = dpTokenRegistry[_tokenAddress];\\n        uint256 p0 = dpToken.totalSupply();\\n        uint256 t0 = providerPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        uint256 burnedDPTokens = _amount.mul(p0).div(t0);\\n        dpToken.burnFrom(msg.sender, burnedDPTokens);\\n        providerPool[_tokenAddress] = providerPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function _withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        internal\\n        onlyAllowedToken(_tokenAddress)\\n    {\\n        ERC20PresetMinterPauser duToken = duTokenRegistry[_tokenAddress];\\n        uint256 p0 = duToken.totalSupply();\\n        uint256 t0 = usersPool[_tokenAddress];\\n        // Burn duTokens in a way that it doesn't affect the PoolTokens/LPTokens\\n        // average for current period.\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        uint256 burnedDUTokens = _amount.mul(p0).div(t0);\\n        duToken.burnFrom(msg.sender, burnedDUTokens);\\n        usersPool[_tokenAddress] = usersPool[_tokenAddress].sub(_amount);\\n        ERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    function getTokenStake(address _staker, uint256 _allowedTokenIndex)\\n        external\\n        view\\n        returns (address tokenAddress, uint256 stake)\\n    {\\n        address allowedTokenAddress = allowedTokens[_allowedTokenIndex];\\n        if (_staker == owner()) {\\n            return (allowedTokenAddress, providerPool[allowedTokenAddress]);\\n        } else {\\n            ERC20PresetMinterPauser dToken = duTokenRegistry[\\n                allowedTokenAddress\\n            ];\\n            uint256 dTokenSupply = dToken.totalSupply();\\n            if (dTokenSupply == 0) {\\n                return (allowedTokenAddress, 0);\\n            }\\n            uint256 dTokenBalance = dToken.balanceOf(_staker);\\n            return (\\n                allowedTokenAddress,\\n                usersPool[allowedTokenAddress].mul(dTokenBalance).div(\\n                    dTokenSupply\\n                )\\n            );\\n        }\\n    }\\n\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"../token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Pausable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/Details.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport './SLA.sol';\\nimport './SLORegistry.sol';\\nimport './Staking.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessengerRegistry.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title Details\\n * @dev Details is a contract to fetch details of contracts with a single RPC endpoint\\n */\\ncontract Details {\\n    struct TokenStake {\\n        address tokenAddress;\\n        uint256 totalStake;\\n        uint256 usersPool;\\n        uint256 providerPool;\\n    }\\n\\n    struct DtokenDetails {\\n        address tokenAddress;\\n        uint256 totalSupply;\\n        address dTokenAddress;\\n        string dTokenSymbol;\\n        string dTokenName;\\n        uint256 balance;\\n        uint256 allowance;\\n    }\\n\\n    /**\\n     * @dev external view function that returns all dynamic agreement information\\n     * @return breachedContract 1. breached contract\\n     * @return stakersCount 2. amount of stakers\\n     * @return nextVerifiablePeriod 3. amount of stakers\\n     */\\n\\n    function getSLADynamicDetails(address _slaAddress)\\n        external\\n        view\\n        returns (\\n            bool breachedContract,\\n            uint256 stakersCount,\\n            uint256 nextVerifiablePeriod,\\n            uint64 leverage\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        breachedContract = sla.breachedContract();\\n        stakersCount = sla.getStakersLength();\\n        nextVerifiablePeriod = sla.nextVerifiablePeriod();\\n        leverage = sla.leverage();\\n    }\\n\\n    function getSLAStaticDetails(address _slaAddress, SLORegistry _sloRegistry)\\n        external\\n        view\\n        returns (\\n            address slaOwner,\\n            address messengerAddress,\\n            uint256 sloValue,\\n            uint256 creationBlockNumber,\\n            uint256 slaId,\\n            uint128 initialPeriodId,\\n            uint128 finalPeriodId,\\n            bool whiteListed,\\n            IPeriodRegistry.PeriodType periodType,\\n            SLORegistry.SLOType sloType,\\n            string memory ipfsHash\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        slaOwner = sla.owner();\\n        messengerAddress = sla.messengerAddress();\\n        whiteListed = sla.whitelistedContract();\\n        periodType = sla.periodType();\\n        (sloValue, sloType) = _sloRegistry.registeredSLO(_slaAddress);\\n        creationBlockNumber = sla.creationBlockNumber();\\n        slaId = sla.slaID();\\n        ipfsHash = sla.ipfsHash();\\n        initialPeriodId = sla.initialPeriodId();\\n        finalPeriodId = sla.finalPeriodId();\\n    }\\n\\n    function getSLADetailsArrays(address _slaAddress)\\n        external\\n        view\\n        returns (\\n            SLA.PeriodSLI[] memory periodSLIs,\\n            TokenStake[] memory tokensStake\\n        )\\n    {\\n        SLA sla = SLA(_slaAddress);\\n        uint256 initialPeriodId = sla.initialPeriodId();\\n        uint256 finalPeriodId = sla.finalPeriodId();\\n        uint256 periodIdsLength = finalPeriodId - initialPeriodId + 1;\\n        periodSLIs = new SLA.PeriodSLI[](periodIdsLength);\\n        for (uint256 index = 0; index < periodIdsLength; index++) {\\n            uint256 periodId = initialPeriodId + index;\\n            (uint256 timestamp, uint256 sli, SLA.Status status) = sla\\n            .periodSLIs(periodId);\\n            periodSLIs[index] = SLA.PeriodSLI({\\n                status: status,\\n                sli: sli,\\n                timestamp: timestamp\\n            });\\n        }\\n        uint256 allowedTokensLength = sla.getAllowedTokensLength();\\n        tokensStake = new TokenStake[](allowedTokensLength);\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            address tokenAddress = sla.allowedTokens(index);\\n            tokensStake[index] = TokenStake({\\n                tokenAddress: tokenAddress,\\n                totalStake: sla.usersPool(sla.allowedTokens(index)) +\\n                    sla.providerPool(sla.allowedTokens(index)),\\n                usersPool: sla.usersPool(sla.allowedTokens(index)),\\n                providerPool: sla.providerPool(sla.allowedTokens(index))\\n            });\\n        }\\n    }\\n\\n    function getDTokensDetails(address _slaAddress, address _owner)\\n        public\\n        view\\n        returns (\\n            DtokenDetails[] memory dpTokens,\\n            DtokenDetails[] memory duTokens\\n        )\\n    {\\n        bool fromOwner = _owner != address(0x0);\\n        SLA sla = SLA(_slaAddress);\\n        uint256 allowedTokensLength = sla.getAllowedTokensLength();\\n        dpTokens = new DtokenDetails[](allowedTokensLength);\\n        duTokens = new DtokenDetails[](allowedTokensLength);\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            address tokenAddress = sla.allowedTokens(index);\\n            address dpTokenAddress = address(sla.dpTokenRegistry(tokenAddress));\\n            dpTokens[index] = DtokenDetails({\\n                dTokenAddress: dpTokenAddress,\\n                tokenAddress: tokenAddress,\\n                totalSupply: ERC20(dpTokenAddress).totalSupply(),\\n                dTokenSymbol: ERC20(dpTokenAddress).symbol(),\\n                dTokenName: ERC20(dpTokenAddress).name(),\\n                balance: fromOwner\\n                    ? ERC20(dpTokenAddress).balanceOf(_owner)\\n                    : 0,\\n                allowance: fromOwner\\n                    ? ERC20(dpTokenAddress).allowance(_owner, _slaAddress)\\n                    : 0\\n            });\\n            address duTokenAddress = address(sla.duTokenRegistry(tokenAddress));\\n            duTokens[index] = DtokenDetails({\\n                dTokenAddress: duTokenAddress,\\n                tokenAddress: tokenAddress,\\n                totalSupply: ERC20(duTokenAddress).totalSupply(),\\n                dTokenSymbol: ERC20(duTokenAddress).symbol(),\\n                dTokenName: ERC20(duTokenAddress).name(),\\n                balance: fromOwner\\n                    ? ERC20(duTokenAddress).balanceOf(_owner)\\n                    : 0,\\n                allowance: fromOwner\\n                    ? ERC20(duTokenAddress).allowance(_owner, _slaAddress)\\n                    : 0\\n            });\\n        }\\n    }\\n\\n    function _addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = '0123456789abcdef';\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/interfaces/IMessengerRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\ninterface IMessengerRegistry {\\n    function setSLARegistry() external;\\n\\n    function registerMessenger(\\n        address callerAddress_,\\n        address messengerAddress_,\\n        string calldata specificationUrl_\\n    ) external;\\n\\n    function registeredMessengers(address messengerAddress_)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\n    },\n    \"contracts/tokens/PolygonERC20.sol\": {\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\ncontract PolygonERC20 is ERC20 {\\n    using SafeMath for uint256;\\n    // keeping it for checking, whether deposit being called by valid address or not\\n    address deployer;\\n\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(name, symbol)\\n    {\\n        _setupDecimals(18);\\n        deployer = msg.sender;\\n\\n        _mint(msg.sender, 10**27);\\n    }\\n\\n    // being proxified smart contract, most probably childChainManagerProxy contract's address\\n    // is not going to change ever, but still, lets keep it\\n    //    function updateChildChainManager(address newChildChainManagerProxy)\\n    //        external\\n    //    {\\n    //        require(\\n    //            newChildChainManagerProxy != address(0),\\n    //            'Bad ChildChainManagerProxy address'\\n    //        );\\n    //        require(msg.sender == deployer, \\\"You're not allowed\\\");\\n    //\\n    //        childChainManagerProxy = newChildChainManagerProxy;\\n    //    }\\n\\n    //    function deposit(address user, bytes calldata depositData) external {\\n    //        require(\\n    //            msg.sender == childChainManagerProxy,\\n    //            \\\"You're not allowed to deposit\\\"\\n    //        );\\n    //\\n    //        uint256 amount = abi.decode(depositData, (uint256));\\n    //\\n    //        // `amount` token getting minted here & equal amount got locked in RootChainManager\\n    //        totalSupply = totalSupply.add(amount);\\n    //        _balances[user] = _balances[user].add(amount);\\n    //\\n    //        emit Transfer(address(0), user, amount);\\n    //    }\\n    //\\n    //    function withdraw(uint256 amount) external {\\n    //        _balances[msg.sender] = _balances[msg.sender].sub(\\n    //            amount,\\n    //            'ERC20: burn amount exceeds balance'\\n    //        );\\n    //        totalSupply = totalSupply.sub(amount);\\n    //\\n    //        emit Transfer(msg.sender, address(0), amount);\\n    //    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/SLARegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport './SLA.sol';\\nimport './SLORegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessengerRegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/ISLARegistry.sol';\\n\\ncontract SLARegistry is ISLARegistry {\\n    using SafeMath for uint256;\\n\\n    /// @dev SLO registry\\n    address private _sloRegistry;\\n    /// @dev Periods registry\\n    address private _periodRegistry;\\n    /// @dev Messengers registry\\n    address private _messengerRegistry;\\n    /// @dev Stake registry\\n    address private _stakeRegistry;\\n    /// @dev stores the addresses of created SLAs\\n    SLA[] public SLAs;\\n    /// @dev stores the indexes of service level agreements owned by an user\\n    mapping(address => uint256[]) private _userToSLAIndexes;\\n    /// @dev to check if registered SLA\\n    mapping(address => bool) private _registeredSLAs;\\n    // value to lock past periods on SLA deployment\\n    bool private immutable _checkPastPeriod;\\n\\n    event SLACreated(SLA indexed sla, address indexed owner);\\n\\n    event SLIRequested(\\n        uint256 periodId,\\n        address indexed sla,\\n        address indexed caller\\n    );\\n\\n    event ReturnLockedValue(address indexed sla, address indexed caller);\\n\\n    constructor(\\n        address sloRegistry_,\\n        address periodRegistry_,\\n        address messengerRegistry_,\\n        address stakeRegistry_,\\n        bool checkPastPeriod_\\n    ) public {\\n        _sloRegistry = sloRegistry_;\\n        SLORegistry(_sloRegistry).setSLARegistry();\\n        _periodRegistry = periodRegistry_;\\n        _stakeRegistry = stakeRegistry_;\\n        IStakeRegistry(_stakeRegistry).setSLARegistry();\\n        _messengerRegistry = messengerRegistry_;\\n        IMessengerRegistry(_messengerRegistry).setSLARegistry();\\n        _checkPastPeriod = checkPastPeriod_;\\n    }\\n\\n    function createSLA(\\n        uint256 sloValue_,\\n        SLORegistry.SLOType sloType_,\\n        bool whitelisted_,\\n        address messengerAddress_,\\n        IPeriodRegistry.PeriodType periodType_,\\n        uint128 initialPeriodId_,\\n        uint128 finalPeriodId_,\\n        string memory ipfsHash_,\\n        bytes32[] memory extraData_,\\n        uint64 leverage_\\n    ) public {\\n        bool validPeriod = IPeriodRegistry(_periodRegistry).isValidPeriod(\\n            periodType_,\\n            initialPeriodId_\\n        );\\n        require(validPeriod, 'first id invalid');\\n        validPeriod = IPeriodRegistry(_periodRegistry).isValidPeriod(\\n            periodType_,\\n            finalPeriodId_\\n        );\\n        require(validPeriod, 'final id invalid');\\n        bool initializedPeriod = IPeriodRegistry(_periodRegistry)\\n        .isInitializedPeriod(periodType_);\\n        require(initializedPeriod, 'period not initialized');\\n        require(finalPeriodId_ >= initialPeriodId_, 'invalid final/initial');\\n\\n        if (_checkPastPeriod) {\\n            bool periodHasStarted = IPeriodRegistry(_periodRegistry)\\n            .periodHasStarted(periodType_, initialPeriodId_);\\n            require(!periodHasStarted, 'past period');\\n        }\\n        bool registeredMessenger = IMessengerRegistry(_messengerRegistry)\\n        .registeredMessengers(messengerAddress_);\\n        require(registeredMessenger == true, 'invalid messenger');\\n\\n        SLA sla = new SLA(\\n            msg.sender,\\n            whitelisted_,\\n            periodType_,\\n            messengerAddress_,\\n            initialPeriodId_,\\n            finalPeriodId_,\\n            uint128(SLAs.length),\\n            ipfsHash_,\\n            extraData_,\\n            leverage_\\n        );\\n\\n        SLORegistry(_sloRegistry).registerSLO(\\n            sloValue_,\\n            sloType_,\\n            address(sla)\\n        );\\n        IStakeRegistry(_stakeRegistry).lockDSLAValue(\\n            msg.sender,\\n            address(sla),\\n            finalPeriodId_ - initialPeriodId_ + 1\\n        );\\n        SLAs.push(sla);\\n        _registeredSLAs[address(sla)] = true;\\n        uint256 index = SLAs.length.sub(1);\\n        _userToSLAIndexes[msg.sender].push(index);\\n        emit SLACreated(sla, msg.sender);\\n    }\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        SLA _sla,\\n        bool _ownerApproval\\n    ) public {\\n        require(isRegisteredSLA(address(_sla)), 'invalid SLA');\\n        require(\\n            _periodId == _sla.nextVerifiablePeriod(),\\n            'not nextVerifiablePeriod'\\n        );\\n        (, , SLA.Status status) = _sla.periodSLIs(_periodId);\\n        require(status == SLA.Status.NotVerified, 'invalid SLA status');\\n        bool breachedContract = _sla.breachedContract();\\n        require(!breachedContract, 'breached contract');\\n        bool slaAllowedPeriodId = _sla.isAllowedPeriod(_periodId);\\n        require(slaAllowedPeriodId, 'invalid period');\\n        IPeriodRegistry.PeriodType slaPeriodType = _sla.periodType();\\n        bool periodFinished = IPeriodRegistry(_periodRegistry).periodIsFinished(\\n            slaPeriodType,\\n            _periodId\\n        );\\n        require(periodFinished, 'period unfinished');\\n        address slaMessenger = _sla.messengerAddress();\\n        SLIRequested(_periodId, address(_sla), msg.sender);\\n        IMessenger(slaMessenger).requestSLI(\\n            _periodId,\\n            address(_sla),\\n            _ownerApproval,\\n            msg.sender\\n        );\\n        IStakeRegistry(_stakeRegistry).distributeVerificationRewards(\\n            address(_sla),\\n            msg.sender,\\n            _periodId\\n        );\\n    }\\n\\n    function returnLockedValue(SLA _sla) public {\\n        require(isRegisteredSLA(address(_sla)), 'invalid SLA');\\n        require(msg.sender == _sla.owner(), 'msg.sender not owner');\\n        uint256 lastValidPeriodId = _sla.finalPeriodId();\\n        IPeriodRegistry.PeriodType periodType = _sla.periodType();\\n        (, uint256 endOfLastValidPeriod) = IPeriodRegistry(_periodRegistry)\\n        .getPeriodStartAndEnd(periodType, lastValidPeriodId);\\n\\n        (, , SLA.Status lastPeriodStatus) = _sla.periodSLIs(lastValidPeriodId);\\n        require(\\n            _sla.breachedContract() ||\\n                (block.timestamp >= endOfLastValidPeriod &&\\n                    lastPeriodStatus != SLA.Status.NotVerified),\\n            'not finished contract'\\n        );\\n        ReturnLockedValue(address(_sla), msg.sender);\\n        IStakeRegistry(_stakeRegistry).returnLockedValue(address(_sla));\\n    }\\n\\n    function registerMessenger(\\n        address _messengerAddress,\\n        string memory _specificationUrl\\n    ) public {\\n        IMessenger(_messengerAddress).setSLARegistry();\\n        IMessengerRegistry(_messengerRegistry).registerMessenger(\\n            msg.sender,\\n            _messengerAddress,\\n            _specificationUrl\\n        );\\n    }\\n\\n    function userSLAs(address _user) public view returns (SLA[] memory) {\\n        uint256 count = _userToSLAIndexes[_user].length;\\n        SLA[] memory SLAList = new SLA[](count);\\n        uint256[] memory userSLAIndexes = _userToSLAIndexes[_user];\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            SLAList[i] = (SLAs[userSLAIndexes[i]]);\\n        }\\n\\n        return (SLAList);\\n    }\\n\\n    function allSLAs() public view returns (SLA[] memory) {\\n        return (SLAs);\\n    }\\n\\n    function isRegisteredSLA(address _slaAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _registeredSLAs[_slaAddress];\\n    }\\n\\n    function sloRegistry() external view override returns (address) {\\n        return _sloRegistry;\\n    }\\n\\n    function periodRegistry() external view override returns (address) {\\n        return _periodRegistry;\\n    }\\n\\n    function messengerRegistry() external view override returns (address) {\\n        return _messengerRegistry;\\n    }\\n\\n    function stakeRegistry() external view override returns (address) {\\n        return _stakeRegistry;\\n    }\\n\\n    function checkPastPeriod() external view returns (bool) {\\n        return _checkPastPeriod;\\n    }\\n}\\n\"\n    },\n    \"@stacktical/dsla-contracts/contracts/MessengerRegistry.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/IMessengerRegistry.sol';\\n\\n/**\\n * @title MessengerRegistry\\n * @dev MessengerRegistry is a contract to register openly distributed Messengers\\n */\\ncontract MessengerRegistry is IMessengerRegistry {\\n    struct Messenger {\\n        address ownerAddress;\\n        address messengerAddress;\\n        string specificationUrl;\\n        uint256 precision;\\n        uint256 requestsCounter;\\n        uint256 fulfillsCounter;\\n        uint256 id;\\n    }\\n\\n    Messenger[] private _messengers;\\n    /// @dev (messengerAddress=>bool) to check if the Messenger was\\n    mapping(address => bool) private _registeredMessengers;\\n    /// @dev (userAddress=>messengerAddress[]) to register the messengers of an owner\\n    mapping(address => uint256[]) private _ownerMessengers;\\n\\n    address private _slaRegistry;\\n\\n    event MessengerRegistered(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    event MessengerModified(\\n        address indexed ownerAddress,\\n        address indexed messengerAddress,\\n        string specificationUrl,\\n        uint256 precision,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called\\n     * once\\n     */\\n    function setSLARegistry() external override {\\n        // Only able to trigger this function once\\n        require(\\n            address(_slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        _slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @dev function to register a new Messenger\\n     */\\n    function registerMessenger(\\n        address callerAddress_,\\n        address messengerAddress_,\\n        string calldata specificationUrl_\\n    ) external override {\\n        require(\\n            msg.sender == _slaRegistry,\\n            'Should only be called using the SLARegistry contract'\\n        );\\n        require(\\n            !_registeredMessengers[messengerAddress_],\\n            'messenger already registered'\\n        );\\n\\n        IMessenger messenger = IMessenger(messengerAddress_);\\n        address messengerOwner = messenger.owner();\\n        require(\\n            messengerOwner == callerAddress_,\\n            'Should only be called by the messenger owner'\\n        );\\n        uint256 precision = messenger.messengerPrecision();\\n        uint256 requestsCounter = messenger.requestsCounter();\\n        uint256 fulfillsCounter = messenger.fulfillsCounter();\\n        _registeredMessengers[messengerAddress_] = true;\\n        uint256 id = _messengers.length;\\n        _ownerMessengers[messengerOwner].push(id);\\n\\n        _messengers.push(\\n            Messenger({\\n                ownerAddress: messengerOwner,\\n                messengerAddress: messengerAddress_,\\n                specificationUrl: specificationUrl_,\\n                precision: precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: id\\n            })\\n        );\\n\\n        emit MessengerRegistered(\\n            messengerOwner,\\n            messengerAddress_,\\n            specificationUrl_,\\n            precision,\\n            id\\n        );\\n    }\\n\\n    /**\\n     * @dev function to modifyMessenger a Messenger\\n     */\\n    function modifyMessenger(\\n        string calldata _specificationUrl,\\n        uint256 _messengerId\\n    ) external {\\n        Messenger storage storedMessenger = _messengers[_messengerId];\\n        IMessenger messenger = IMessenger(storedMessenger.messengerAddress);\\n        require(\\n            msg.sender == messenger.owner(),\\n            'Can only be modified by the owner'\\n        );\\n        storedMessenger.specificationUrl = _specificationUrl;\\n        storedMessenger.ownerAddress = msg.sender;\\n        emit MessengerModified(\\n            storedMessenger.ownerAddress,\\n            storedMessenger.messengerAddress,\\n            storedMessenger.specificationUrl,\\n            storedMessenger.precision,\\n            storedMessenger.id\\n        );\\n    }\\n\\n    function getMessengers() external view returns (Messenger[] memory) {\\n        Messenger[] memory returnMessengers = new Messenger[](\\n            _messengers.length\\n        );\\n        for (uint256 index = 0; index < _messengers.length; index++) {\\n            IMessenger messenger = IMessenger(\\n                _messengers[index].messengerAddress\\n            );\\n            uint256 requestsCounter = messenger.requestsCounter();\\n            uint256 fulfillsCounter = messenger.fulfillsCounter();\\n            returnMessengers[index] = Messenger({\\n                ownerAddress: _messengers[index].ownerAddress,\\n                messengerAddress: _messengers[index].messengerAddress,\\n                specificationUrl: _messengers[index].specificationUrl,\\n                precision: _messengers[index].precision,\\n                requestsCounter: requestsCounter,\\n                fulfillsCounter: fulfillsCounter,\\n                id: _messengers[index].id\\n            });\\n        }\\n        return returnMessengers;\\n    }\\n\\n    function getMessengersLength() external view returns (uint256) {\\n        return _messengers.length;\\n    }\\n\\n    function registeredMessengers(address messengerAddress_)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _registeredMessengers[messengerAddress_];\\n    }\\n}\\n\"\n    },\n    \"contracts/DSLA.sol\": {\n      \"content\": \"// Entrypoint chainlink\\npragma solidity 0.6.6;\\nimport '@stacktical/dsla-contracts/contracts/SLARegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/PeriodRegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/StakeRegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/MessengerRegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/SLORegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/SLA.sol';\\nimport '@stacktical/dsla-contracts/contracts/SLARegistry.sol';\\nimport '@stacktical/dsla-contracts/contracts/StringUtils.sol';\\nimport '@stacktical/dsla-contracts/contracts/Details.sol';\\n\"\n    },\n    \"contracts/tokens/EthereumERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport '@openzeppelin/contracts/presets/ERC20PresetMinterPauser.sol';\\n\\ncontract EthereumERC20 is ERC20PresetMinterPauser {\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, {decimals} have\\n     * a default value of 18.\\n     * @notice token name: DSLA , token symbol: DSLA\\n     */\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20PresetMinterPauser(name, symbol)\\n    {\\n        mint(msg.sender, 10**27);\\n    }\\n}\\n\"\n    },\n    \"contracts/chainlink/PreCoordinator.sol\": {\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\nimport '@chainlink/contracts/src/v0.6/PreCoordinator.sol';\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "5d6fae9569f25bc74e59242f0ea93510",
      "transactionHash": "0x91d6bbea401a4ab0c1b3d3a46ebb76a7ff6476ceb4df6478f7ab49902b58c79c",
      "args": [
        "0xb0897686c545045afc77cf20ec7a532e3120e0f1"
      ]
    },
    "decoded": {
      "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
      "gasPrice": "1000000000",
      "gasLimit": "1147427",
      "to": null,
      "value": "0",
      "nonce": 49,
      "data": "0x6080604052600160045534801561001557600080fd5b506040516113363803806113368339818101604052602081101561003857600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600180546001600160a01b0319166001600160a01b0392909216919091179055611284806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed36146102a6578063d3e9c31414610361578063f2fde38b14610387578063f3fef3a3146103ad576100cf565b80637fcd56db146102685780638da5cb5b146102965780638f32d59b1461029e576100cf565b8063165d35e1146100d457806340429946146100f85780634ab0d190146101ab5780634b6022821461020d57806350188301146102275780636ee4d5531461022f575b600080fd5b6100dc6103d9565b604080516001600160a01b039092168252519081900360200190f35b6101a9600480360361010081101561010f57600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b5090925090506103e8565b005b6101f9600480360360c08110156101c157600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a001356106be565b604080519115158252519081900360200190f35b6102156109b8565b60408051918252519081900360200190f35b6102156109be565b6101a96004803603608081101561024557600080fd5b508035906020810135906001600160e01b03196040820135169060600135610a20565b6101a96004803603604081101561027e57600080fd5b506001600160a01b0381351690602001351515610bda565b6100dc610c4c565b6101f9610c5b565b6101a9600480360360608110156102bc57600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c6c945050505050565b6101f96004803603602081101561037757600080fd5b50356001600160a01b0316610e99565b6101a96004803603602081101561039d57600080fd5b50356001600160a01b0316610eb7565b6101a9600480360360408110156103c357600080fd5b506001600160a01b038135169060200135610f0a565b6001546001600160a01b031690565b6103f06103d9565b6001600160a01b0316336001600160a01b03161461044b576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60015486906001600160a01b03808316911614156104b0576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f742063616c6c6261636b20746f204c494e4b000000000000000000604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff1960608d901b166020808301919091526034808301899052835180840390910181526054909201835281519181019190912060008181526002909252919020541561054a576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b600061055e4261012c63ffffffff61104b16565b90508a89898360405160200180858152602001846001600160a01b03166001600160a01b031660601b8152601401836001600160e01b0319166001600160e01b0319168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a6001600160a01b03166001600160a01b03168152602001898152602001888152602001876001600160a01b03166001600160a01b03168152602001866001600160e01b0319166001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a2505050505050505050505050565b3360009081526003602052604081205460ff16806106f457506106df610c4c565b6001600160a01b0316336001600160a01b0316145b61072f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611205602a913960400191505060405180910390fd5b6000878152600260205260409020548790610791576040805162461bcd60e51b815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6040805160208082018a90526bffffffffffffffffffffffff1960608a901b16828401526001600160e01b0319881660548301526058808301889052835180840390910181526078909201835281519181019190912060008b81526002909252919020548114610848576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b60045461085b908963ffffffff61104b16565b60045560008981526002602052604081205562061a805a10156108c5576040805162461bcd60e51b815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106109405780518252601f199092019160209182019101610921565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b50909b9a5050505050505050505050565b61012c81565b60006109c8610c5b565b610a07576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b600454610a1b90600163ffffffff6110ac16565b905090565b6040805160208082018690523360601b828401526001600160e01b0319851660548301526058808301859052835180840390910181526078909201835281519181019190912060008781526002909252919020548114610ac7576040805162461bcd60e51b815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115610b15576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b6000858152600260205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a26001546040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d6020811015610bcb57600080fd5b5051610bd357fe5b5050505050565b610be2610c5b565b610c21576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610c746103d9565b6001600160a01b0316336001600160a01b031614610ccf576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b8051819060441115610d21576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b602082015182906001600160e01b031981166320214ca360e11b14610d8d576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b8560248501528460448501526000306001600160a01b0316856040518082805190602001908083835b60208310610dd55780518252601f199092019160209182019101610db6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e35576040519150601f19603f3d011682016040523d82523d6000602084013e610e3a565b606091505b5050905080610e90576040805162461bcd60e51b815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b50505050505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610ebf610c5b565b610efe576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b610f0781611109565b50565b610f12610c5b565b610f51576040805162461bcd60e51b8152602060048201819052602482015260008051602061122f833981519152604482015290519081900360640190fd5b80610f6381600163ffffffff61104b16565b6004541015610fa35760405162461bcd60e51b81526004018080602001828103825260358152602001806111d06035913960400191505060405180910390fd5b600454610fb6908363ffffffff6110ac16565b60049081556001546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561101457600080fd5b505af1158015611028573d6000803e3d6000fd5b505050506040513d602081101561103e57600080fd5b505161104657fe5b505050565b6000828201838110156110a5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082821115611103576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806111aa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c2072657175657374734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ba3d888940e83965017b04c0f18dee0efb8c40122a95acab7baec88ca21c130064736f6c63430006060033000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f1",
      "r": "0x5ccc31daac253fbf5a92ee9ca4a6cdc0f851bc7643c0762b3dbea25828afce89",
      "s": "0x5ae6c8b8c6d54edab62c02e950ee5af7b01203d6f3c108649ca93668a1ed3b1b",
      "v": 310,
      "chainId": 137
    }
  }
}