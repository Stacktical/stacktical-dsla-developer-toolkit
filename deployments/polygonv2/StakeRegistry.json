{
  "address": "0xCe952191Fd641ec113bF56Fa6201Fc58bef5A752",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dslaTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "DTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockedValueReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "DSLAburnRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dslaDepositByPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dslaPlatformReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dslaMessengerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dslaUserReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dslaBurnedByVerification",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTokenLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "maxLeverage",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "burnDSLA",
          "type": "bool"
        }
      ],
      "name": "StakingParametersModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ValueLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "messengerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedDSLA",
          "type": "uint256"
        }
      ],
      "name": "VerificationRewardDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DSLATokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "createDToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sla",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verificationRewardReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "distributeVerificationRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "DSLAburnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaDepositByPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaPlatformReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaMessengerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaUserReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaBurnedByVerification",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTokenLength",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "maxLeverage",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "burnDSLA",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slaOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sla",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodIdsLength",
          "type": "uint256"
        }
      ],
      "name": "lockDSLAValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sla",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "periodIsVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "registerStakedSla",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sla",
          "type": "address"
        }
      ],
      "name": "returnLockedValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSLARegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "DSLAburnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaDepositByPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaPlatformReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaMessengerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaUserReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaBurnedByVerification",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTokenLength",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "maxLeverage",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "burnDSLA",
          "type": "bool"
        }
      ],
      "name": "setStakingParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "slaLockedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slaPeriodIdsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaDepositByPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaPlatformReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaMessengerReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaUserReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dslaBurnedByVerification",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slaRegistry",
      "outputs": [
        {
          "internalType": "contract ISLARegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sla",
          "type": "address"
        }
      ],
      "name": "slaWasStakedByUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakedSlas",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb7db51d2a4254256e97486a60d12c3a075f13d64c30cdd8cd748eb22344905b",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0xCe952191Fd641ec113bF56Fa6201Fc58bef5A752",
    "transactionIndex": 35,
    "gasUsed": "3554991",
    "logsBloom": "0x
    "blockHash": "0xc12c04b502a28a6285a2f988f0908c2713e50967f261c8add684ce465db05f47",
    "transactionHash": "0xcb7db51d2a4254256e97486a60d12c3a075f13d64c30cdd8cd748eb22344905b",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 35192678,
        "transactionHash": "0xcb7db51d2a4254256e97486a60d12c3a075f13d64c30cdd8cd748eb22344905b",
        "address": "0xCe952191Fd641ec113bF56Fa6201Fc58bef5A752",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0xc12c04b502a28a6285a2f988f0908c2713e50967f261c8add684ce465db05f47"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 35192678,
        "transactionHash": "0xcb7db51d2a4254256e97486a60d12c3a075f13d64c30cdd8cd748eb22344905b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x000000000000000000000000000000000000000000000000030c571ed0c7f1f600000000000000000000000000000000000000000000000473c0ec8c2b124369000000000000000000000000000000000000000000001e26b458e7778415848a00000000000000000000000000000000000000000000000470b4956d5a4a5173000000000000000000000000000000000000000000001e26b7653e9654dd7680",
        "logIndex": 145,
        "blockHash": "0xc12c04b502a28a6285a2f988f0908c2713e50967f261c8add684ce465db05f47"
      }
    ],
    "blockNumber": 35192678,
    "cumulativeGasUsed": "8881857",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0E390e9ceA0D0e8cd40048ced9fA9EA10D71639"
  ],
  "solcInputHash": "b47b1da8947805f3b521fd14a441e1c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dslaTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"DTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedValueReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DSLAburnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dslaDepositByPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dslaPlatformReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dslaMessengerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dslaUserReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dslaBurnedByVerification\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTokenLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burnDSLA\",\"type\":\"bool\"}],\"name\":\"StakingParametersModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValueLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messengerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedDSLA\",\"type\":\"uint256\"}],\"name\":\"VerificationRewardDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DSLATokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"createDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sla\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verificationRewardReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"distributeVerificationRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"DSLAburnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaDepositByPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaPlatformReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaMessengerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaBurnedByVerification\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenLength\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burnDSLA\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slaOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sla\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodIdsLength\",\"type\":\"uint256\"}],\"name\":\"lockDSLAValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sla\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"periodIsVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"registerStakedSla\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sla\",\"type\":\"address\"}],\"name\":\"returnLockedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSLARegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DSLAburnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaDepositByPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaPlatformReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaMessengerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaBurnedByVerification\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenLength\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burnDSLA\",\"type\":\"bool\"}],\"name\":\"setStakingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slaLockedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slaPeriodIdsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaDepositByPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaPlatformReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaMessengerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaUserReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dslaBurnedByVerification\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slaRegistry\",\"outputs\":[{\"internalType\":\"contract ISLARegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sla\",\"type\":\"address\"}],\"name\":\"slaWasStakedByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedSlas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"StakeRegistry is a contract to register the staking activity of the platform, along with controlling certain admin privileged parameters\",\"events\":{\"DTokenCreated(address,address,string,string)\":{\"details\":\"event to log modifications on the staking parameters\",\"params\":{\"dTokenAddress\":\"1. -\",\"name\":\"3. -\",\"sla\":\"2. -\",\"symbol\":\"4. -\"}},\"LockedValueReturned(address,address,uint256)\":{\"details\":\"event to log modifications on the staking parameters\",\"params\":{\"amount\":\"3. -\",\"owner\":\"2. -\",\"sla\":\"1. -\"}},\"StakingParametersModified(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)\":{\"details\":\"event to log modifications on the staking parameters\",\"params\":{\"DSLAburnRate\":\"1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\",\"dslaBurnedByVerification\":\"5. DSLA burned after every period verification\",\"dslaDepositByPeriod\":\"2. DSLA deposit by period to create SLA\",\"dslaPlatformReward\":\"3. DSLA rewarded to Stacktical team\",\"dslaUserReward\":\"4. DSLA rewarded to user calling the period verification\"}},\"ValueLocked(address,address,uint256)\":{\"details\":\"event to log modifications on the staking parameters\",\"params\":{\"amount\":\"3. -\",\"owner\":\"2. -\",\"sla\":\"1. -\"}},\"VerificationRewardDistributed(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"event to log a verifiation reward distributed\",\"params\":{\"burnedDSLA\":\"6. -\",\"messengerReward\":\"5. -\",\"platformReward\":\"4. -\",\"requester\":\"2. -\",\"sla\":\"1. The address of the created service level agreement contract\",\"userReward\":\"3. -\"}}},\"kind\":\"dev\",\"methods\":{\"DSLATokenAddress()\":{\"returns\":{\"_0\":\"address of DSLA token\"}},\"addAllowedTokens(address)\":{\"details\":\"only owner can call this function for non-registered tokens\",\"params\":{\"_tokenAddress\":\"1. address of the new allowed token\"}},\"constructor\":{\"params\":{\"_dslaTokenAddress\":\"1. DSLA Token\"}},\"createDToken(string,string,uint8)\":{\"details\":\"only registered SLA can call this function\",\"params\":{\"_decimals\":\"3. token decimals\",\"_name\":\"1. token name\",\"_symbol\":\"2. token symbol\"}},\"distributeVerificationRewards(address,address,uint256)\":{\"details\":\"only SLARegistry can call this function\",\"params\":{\"_periodId\":\"verified period id by verifier\",\"_sla\":\"address of sla\",\"_verificationRewardReceiver\":\"verifier who verified the periodId\"}},\"isAllowedToken(address)\":{\"params\":{\"_tokenAddress\":\"token address to check\"},\"returns\":{\"_0\":\"true if registered\"}},\"lockDSLAValue(address,address,uint256)\":{\"details\":\"only SLARegistry can call this function\",\"params\":{\"_periodIdsLength\":\"number of periods to lock\",\"_sla\":\"address of sla\",\"_slaOwner\":\"owner address of sla\"}},\"periodIsVerified(address,uint256)\":{\"params\":{\"_periodId\":\"period id\",\"_sla\":\"address of SLA\"},\"returns\":{\"_0\":\"verified or not\"}},\"registerStakedSla(address)\":{\"details\":\"only registered SLA can call this function\",\"params\":{\"_owner\":\"1. SLA contract to stake\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"returnLockedValue(address)\":{\"details\":\"only SLARegistry can call this function\",\"params\":{\"_sla\":\"address of SLA\"}},\"setSLARegistry()\":{\"details\":\"this function can only be called once\"},\"setStakingParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)\":{\"details\":\"only owner can call this function\"},\"slaWasStakedByUser(address,address)\":{\"details\":\"public view function that returns true if the _owner has staked on _sla\",\"params\":{\"_sla\":\"2. sla to check\",\"_user\":\"1. address to check\"},\"returns\":{\"_0\":\"bool, true if _sla was staked by _user\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_DSLAburnRate\":{\"details\":\"corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\"},\"_burnDSLA\":{\"details\":\"burn DSLA after verification\"},\"_dslaBurnedByVerification\":{\"details\":\"DSLA burned after every period verification\"},\"_dslaDepositByPeriod\":{\"details\":\"DSLA deposit by period to create SLA\"},\"_dslaMessengerReward\":{\"details\":\"DSLA rewarded to the Messenger creator\"},\"_dslaPlatformReward\":{\"details\":\"DSLA rewarded to the foundation\"},\"_dslaUserReward\":{\"details\":\"DSLA rewarded to user calling the period verification\"},\"_maxLeverage\":{\"details\":\"max times of hedge leverage\"},\"_maxTokenLength\":{\"details\":\"max token length for allowedTokens array of Staking contracts\"},\"allowedTokens\":{\"details\":\"array with the allowed tokens addresses of the StakeRegistry\"},\"slaLockedValue\":{\"details\":\"(ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\"},\"userStakedSlas\":{\"details\":\"(userAddress => (SLA address => registered)) with user staked SLAs to get tokenPool\"}},\"title\":\"StakeRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DSLATokenAddress()\":{\"notice\":\"external view function that returns DSLA token address\"},\"addAllowedTokens(address)\":{\"notice\":\"add a token to ve allowed for staking\"},\"constructor\":{\"notice\":\"Constructor\"},\"createDToken(string,string,uint8)\":{\"notice\":\"function to create dTokens for staking\"},\"distributeVerificationRewards(address,address,uint256)\":{\"notice\":\"function to distribute verification rewards to verifier\"},\"getStakingParameters()\":{\"notice\":\"external view function that returns staking parameters\"},\"isAllowedToken(address)\":{\"notice\":\"function to check if the token is registered\"},\"lockDSLAValue(address,address,uint256)\":{\"notice\":\"function to lock DSLA\"},\"periodIsVerified(address,uint256)\":{\"notice\":\"external view function that checks the verification of period\"},\"registerStakedSla(address)\":{\"notice\":\"function to register the sending SLA contract as staked by _owner\"},\"returnLockedValue(address)\":{\"notice\":\"function to return locked tokens back to sla owner\"},\"setSLARegistry()\":{\"notice\":\"function to set the SLARegistry contract address\"},\"setStakingParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)\":{\"notice\":\"external function that sets staking parameters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@dsla-protocol/core/contracts/StakeRegistry.sol\":\"StakeRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dsla-protocol/core/contracts/SLA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/ISLORegistry.sol';\\nimport './Staking.sol';\\n\\n/**\\n @title Service Level Agreement Contract\\n */\\ncontract SLA is Staking {\\n    enum Status {\\n        NotVerified,\\n        Respected,\\n        NotRespected\\n    }\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    string public ipfsHash;\\n    ISLARegistry private _slaRegistry;\\n    ISLORegistry private immutable _sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    IPeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    uint256[] public severity;\\n    uint256[] public penalty;\\n\\n    bool public terminateContract = false;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    /// @notice An event that is emitted when creating a new SLI\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    /// @notice An event that is emitted when staking in User or Provider Pool\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount,\\n        Position position\\n    );\\n    /// @notice An event that is emitted when withdrawing from Provider Pool\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when withdrawing from User Pool\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when toggles termination\\n    event ToggleTermination(bool termination);\\n\\n    /// @dev Modifier ensuring that certain function can only be called by Messenger\\n    modifier onlyMessenger() {\\n        require(msg.sender == messengerAddress, 'not messenger');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        IPeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        uint256[] memory _severity,\\n        uint256[] memory _penalty,\\n        uint64 _leverage\\n    )\\n        Staking(\\n            ISLARegistry(msg.sender),\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner,\\n            _messengerAddress\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        _slaRegistry = ISLARegistry(msg.sender);\\n        _sloRegistry = ISLORegistry(_slaRegistry.sloRegistry());\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        severity = _severity;\\n        penalty = _penalty;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    /**\\n     * @notice External function that registers new SLI\\n     * @param _sli sli value to register\\n     * @param _periodId period id of new sli\\n     */\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        require(_periodId == nextVerifiablePeriod, 'invalid period id');\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n\\n        uint256 deviation = _sloRegistry.getDeviation(\\n            _sli,\\n            address(this),\\n            severity,\\n            penalty\\n        );\\n\\n        if (_sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            _setProviderReward(_periodId, deviation);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUserReward(_periodId, deviation);\\n        }\\n    }\\n\\n    /**\\n     @notice External view function to see if a period id is allowed or not\\n     @param _periodId period id to check\\n     @return bool allowed or not\\n     */\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        return _periodId >= initialPeriodId && _periodId <= finalPeriodId;\\n    }\\n\\n    /**\\n     * @notice Public view function to check if the contract is finished\\n     * @dev finish condition = should pass last verified period and final period should not be verified.\\n     * @return Bool whether finished or not\\n     */\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n        return ((block.timestamp >= endOfLastValidPeriod &&\\n            periodSLIs[finalPeriodId].status != Status.NotVerified) ||\\n            terminateContract);\\n    }\\n\\n    /**\\n     * @notice External function to stake tokens in User or Provider Pools\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     * @param _position User or Provider pool\\n     */\\n    function stakeTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        Position _position\\n    ) external {\\n        require(!contractFinished(), 'This SLA has finished.');\\n\\n        require(_amount > 0, 'Stake must be greater than 0.');\\n\\n        _stake(_tokenAddress, nextVerifiablePeriod, _amount, _position);\\n\\n        emit Stake(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount,\\n            _position\\n        );\\n\\n        IStakeRegistry(_slaRegistry.stakeRegistry()).registerStakedSla(\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from Provider Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawProviderTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from User Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawUserTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    function toggleTermination() external onlyOwner {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n\\n        require(\\n            block.timestamp >= endOfLastValidPeriod,\\n            'This SLA has not finished.'\\n        );\\n\\n        terminateContract = !terminateContract;\\n\\n        emit ToggleTermination(terminateContract);\\n    }\\n}\\n\",\"keccak256\":\"0x1dd3de12f41a12456884c2787e73de642919a0ea34a160dede3bfbc570ccfda1\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/StakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './SLA.sol';\\nimport './dToken.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\n\\n/**\\n * @title StakeRegistry\\n * @dev StakeRegistry is a contract to register the staking activity of the platform, along\\n with controlling certain admin privileged parameters\\n */\\ncontract StakeRegistry is IStakeRegistry, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct LockedValue {\\n        uint256 lockedValue;\\n        uint256 slaPeriodIdsLength;\\n        uint256 dslaDepositByPeriod;\\n        uint256 dslaPlatformReward;\\n        uint256 dslaMessengerReward;\\n        uint256 dslaUserReward;\\n        uint256 dslaBurnedByVerification;\\n        mapping(uint256 => bool) verifiedPeriods;\\n    }\\n\\n    address private _DSLATokenAddress;\\n    ISLARegistry public slaRegistry;\\n\\n    //______ onlyOwner modifiable parameters ______\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\\n    uint256 private _DSLAburnRate = 3;\\n    /// @dev (ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\\n    mapping(address => LockedValue) public slaLockedValue;\\n    /// @dev DSLA deposit by period to create SLA\\n    uint256 private _dslaDepositByPeriod = 1000 ether;\\n    /// @dev DSLA rewarded to the foundation\\n    uint256 private _dslaPlatformReward = 250 ether;\\n    /// @dev DSLA rewarded to the Messenger creator\\n    uint256 private _dslaMessengerReward = 250 ether;\\n    /// @dev DSLA rewarded to user calling the period verification\\n    uint256 private _dslaUserReward = 250 ether;\\n    /// @dev DSLA burned after every period verification\\n    uint256 private _dslaBurnedByVerification = 250 ether;\\n    /// @dev max token length for allowedTokens array of Staking contracts\\n    uint256 private _maxTokenLength = 1;\\n    /// @dev max times of hedge leverage\\n    uint64 private _maxLeverage = 100;\\n    /// @dev burn DSLA after verification\\n    bool private _burnDSLA = true;\\n\\n    /// @dev array with the allowed tokens addresses of the StakeRegistry\\n    address[] public allowedTokens;\\n\\n    /// @dev (userAddress => (SLA address => registered)) with user staked SLAs to get tokenPool\\n    mapping(address => mapping(address => bool)) public userStakedSlas;\\n\\n    /**\\n     * @dev event to log a verifiation reward distributed\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param requester 2. -\\n     * @param userReward 3. -\\n     * @param platformReward 4. -\\n     * @param messengerReward 5. -\\n     * @param burnedDSLA 6. -\\n     */\\n    event VerificationRewardDistributed(\\n        address indexed sla,\\n        address indexed requester,\\n        uint256 userReward,\\n        uint256 platformReward,\\n        uint256 messengerReward,\\n        uint256 burnedDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param DSLAburnRate 1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\\n     * @param dslaDepositByPeriod 2. DSLA deposit by period to create SLA\\n     * @param dslaPlatformReward 3. DSLA rewarded to Stacktical team\\n     * @param dslaUserReward 4. DSLA rewarded to user calling the period verification\\n     * @param dslaBurnedByVerification 5. DSLA burned after every period verification\\n     */\\n    event StakingParametersModified(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param sla 1. -\\n     * @param owner 2. -\\n     * @param amount 3. -\\n     */\\n\\n    event LockedValueReturned(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param dTokenAddress 1. -\\n     * @param sla 2. -\\n     * @param name 3. -\\n     * @param symbol 4. -\\n     */\\n    event DTokenCreated(\\n        address indexed dTokenAddress,\\n        address indexed sla,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param sla 1. -\\n     * @param owner 2. -\\n     * @param amount 3. -\\n     */\\n    event ValueLocked(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            'Can only be called by SLARegistry'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _dslaTokenAddress 1. DSLA Token\\n     */\\n    constructor(address _dslaTokenAddress) {\\n        require(\\n            _dslaTokenAddress != address(0x0),\\n            'invalid DSLA token address'\\n        );\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward +\\n                    _dslaMessengerReward +\\n                    _dslaUserReward +\\n                    _dslaBurnedByVerification,\\n            'Staking parameters should match on summation'\\n        );\\n        _DSLATokenAddress = _dslaTokenAddress;\\n        allowedTokens.push(_dslaTokenAddress);\\n    }\\n\\n    /**\\n     * @notice function to set the SLARegistry contract address\\n     * @dev this function can only be called once\\n     */\\n    function setSLARegistry() external override {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        slaRegistry = ISLARegistry(msg.sender);\\n    }\\n\\n    /**\\n     * @notice add a token to ve allowed for staking\\n     * @dev only owner can call this function for non-registered tokens\\n     * @param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        require(\\n            !isAllowedToken(_tokenAddress),\\n            'This token has been allowed already.'\\n        );\\n        allowedTokens.push(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice function to check if the token is registered\\n     * @param _tokenAddress token address to check\\n     * @return true if registered\\n     */\\n    function isAllowedToken(address _tokenAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev public view function that returns true if the _owner has staked on _sla\\n     * @param _user 1. address to check\\n     * @param _sla 2. sla to check\\n     * @return bool, true if _sla was staked by _user\\n     */\\n\\n    function slaWasStakedByUser(address _user, address _sla)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return userStakedSlas[_user][_sla];\\n    }\\n\\n    /**\\n     * @notice function to register the sending SLA contract as staked by _owner\\n     * @dev only registered SLA can call this function\\n     * @param _owner 1. SLA contract to stake\\n     */\\n    function registerStakedSla(address _owner)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        if (!slaWasStakedByUser(_owner, msg.sender)) {\\n            userStakedSlas[_owner][msg.sender] = true;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice function to create dTokens for staking\\n     * @dev only registered SLA can call this function\\n     * @param _name 1. token name\\n     * @param _symbol 2. token symbol\\n     * @param _decimals 3. token decimals\\n     */\\n    function createDToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external override returns (address) {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        dToken newDToken = new dToken(_name, _symbol, _decimals);\\n        newDToken.grantRole(newDToken.MINTER_ROLE(), msg.sender);\\n        emit DTokenCreated(address(newDToken), msg.sender, _name, _symbol);\\n        return address(newDToken);\\n    }\\n\\n    /**\\n     * @notice function to lock DSLA\\n     * @dev only SLARegistry can call this function\\n     * @param _slaOwner owner address of sla\\n     * @param _sla address of sla\\n     * @param _periodIdsLength number of periods to lock\\n     */\\n    function lockDSLAValue(\\n        address _slaOwner,\\n        address _sla,\\n        uint256 _periodIdsLength\\n    ) external override onlySLARegistry nonReentrant {\\n        uint256 lockedValue = _dslaDepositByPeriod * _periodIdsLength;\\n        IERC20(_DSLATokenAddress).safeTransferFrom(\\n            _slaOwner,\\n            address(this),\\n            lockedValue\\n        );\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        _lockedValue.lockedValue = lockedValue;\\n        _lockedValue.slaPeriodIdsLength = _periodIdsLength;\\n        _lockedValue.dslaDepositByPeriod = _dslaDepositByPeriod;\\n        _lockedValue.dslaPlatformReward = _dslaPlatformReward;\\n        _lockedValue.dslaMessengerReward = _dslaMessengerReward;\\n        _lockedValue.dslaUserReward = _dslaUserReward;\\n        _lockedValue.dslaBurnedByVerification = _dslaBurnedByVerification;\\n        emit ValueLocked(_sla, _slaOwner, lockedValue);\\n    }\\n\\n    /**\\n     * @notice function to distribute verification rewards to verifier\\n     * @dev only SLARegistry can call this function\\n     * @param _sla address of sla\\n     * @param _verificationRewardReceiver verifier who verified the periodId\\n     * @param _periodId verified period id by verifier\\n     */\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external override onlySLARegistry nonReentrant {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        require(\\n            !_lockedValue.verifiedPeriods[_periodId],\\n            'Period rewards already distributed'\\n        );\\n        _lockedValue.verifiedPeriods[_periodId] = true;\\n        _lockedValue.lockedValue -= _lockedValue.dslaDepositByPeriod;\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward\\n        );\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            owner(),\\n            _lockedValue.dslaPlatformReward\\n        );\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            IMessenger(SLA(_sla).messengerAddress()).owner(),\\n            _lockedValue.dslaMessengerReward\\n        );\\n        if (_burnDSLA) {\\n            (bool success, ) = _DSLATokenAddress.call(\\n                abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes('burn(uint256)'))),\\n                    _lockedValue.dslaBurnedByVerification\\n                )\\n            );\\n            require(success, 'burn process failed');\\n        }\\n        emit VerificationRewardDistributed(\\n            _sla,\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward,\\n            _lockedValue.dslaPlatformReward,\\n            _lockedValue.dslaMessengerReward,\\n            _lockedValue.dslaBurnedByVerification\\n        );\\n    }\\n\\n    /**\\n     * @notice function to return locked tokens back to sla owner\\n     * @dev only SLARegistry can call this function\\n     * @param _sla address of SLA\\n     */\\n    function returnLockedValue(address _sla)\\n        external\\n        override\\n        onlySLARegistry\\n        nonReentrant\\n    {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        uint256 remainingBalance = _lockedValue.lockedValue;\\n        require(remainingBalance > 0, 'locked value is empty');\\n        _lockedValue.lockedValue = 0;\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            SLA(_sla).owner(),\\n            remainingBalance\\n        );\\n        emit LockedValueReturned(_sla, SLA(_sla).owner(), remainingBalance);\\n    }\\n\\n    //_______ OnlyOwner functions _______\\n    /**\\n     * @notice external function that sets staking parameters\\n     * @dev only owner can call this function\\n     */\\n    function setStakingParameters(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    ) external onlyOwner {\\n        _DSLAburnRate = DSLAburnRate;\\n        _dslaDepositByPeriod = dslaDepositByPeriod;\\n        _dslaPlatformReward = dslaPlatformReward;\\n        _dslaMessengerReward = dslaMessengerReward;\\n        _dslaUserReward = dslaUserReward;\\n        _dslaBurnedByVerification = dslaBurnedByVerification;\\n        _maxTokenLength = maxTokenLength;\\n        _maxLeverage = maxLeverage;\\n        _burnDSLA = burnDSLA;\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward +\\n                    _dslaMessengerReward +\\n                    _dslaUserReward +\\n                    _dslaBurnedByVerification,\\n            'Staking parameters should match on summation'\\n        );\\n        emit StakingParametersModified(\\n            DSLAburnRate,\\n            dslaDepositByPeriod,\\n            dslaPlatformReward,\\n            dslaMessengerReward,\\n            dslaUserReward,\\n            dslaBurnedByVerification,\\n            maxTokenLength,\\n            maxLeverage,\\n            burnDSLA\\n        );\\n    }\\n\\n    /**\\n     * @notice external view function that returns staking parameters\\n     */\\n    function getStakingParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        )\\n    {\\n        DSLAburnRate = _DSLAburnRate;\\n        dslaDepositByPeriod = _dslaDepositByPeriod;\\n        dslaPlatformReward = _dslaPlatformReward;\\n        dslaMessengerReward = _dslaMessengerReward;\\n        dslaUserReward = _dslaUserReward;\\n        dslaBurnedByVerification = _dslaBurnedByVerification;\\n        maxTokenLength = _maxTokenLength;\\n        maxLeverage = _maxLeverage;\\n        burnDSLA = _burnDSLA;\\n    }\\n\\n    /**\\n     * @notice external view function that checks the verification of period\\n     * @param _sla address of SLA\\n     * @param _periodId period id\\n     * @return verified or not\\n     */\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return slaLockedValue[_sla].verifiedPeriods[_periodId];\\n    }\\n\\n    /**\\n     * @notice external view function that returns DSLA token address\\n     * @return address of DSLA token\\n     */\\n    function DSLATokenAddress() external view override returns (address) {\\n        return _DSLATokenAddress;\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakeRegistry, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n}\\n\",\"keccak256\":\"0xce78ba6fd9549e5427a3435524f69e11a45c1c99e7f1fd781356c079453fa502\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/IERC20Query.sol';\\nimport './dToken.sol';\\n\\n/**\\n * @title Staking\\n * @notice Staking of user and provider pool rewards\\n */\\ncontract Staking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Position of staking\\n    /// @dev OK => Provider Pool (LONG), KO => User Pool (SHORT)\\n    enum Position {\\n        OK,\\n        KO\\n    }\\n\\n    /// @dev StakeRegistry contract\\n    IStakeRegistry private _stakeRegistry;\\n\\n    /// @dev SLARegistry contract\\n    IPeriodRegistry internal immutable _periodRegistry;\\n\\n    /// @dev DSLA token address to burn fees\\n    address private immutable _dslaTokenAddress;\\n    /// @dev messenger address\\n    address public immutable messengerAddress;\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providersPool;\\n\\n    /// @dev (userAddress=>uint256) provider staking activity\\n    mapping(address => uint256) public lastProviderStake;\\n\\n    /// @dev (tokenAddress=>uint256) user staking\\n    mapping(address => uint256) public usersPool;\\n\\n    /// @dev (userAddress=>uint256) user staking activity\\n    mapping(address => uint256) public lastUserStake;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => dToken) public duTokenRegistry;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => dToken) public dpTokenRegistry;\\n\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n\\n    /// @dev number of stakers\\n    uint256 public stakersNum;\\n\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    /// @dev claiming fees when a user claim tokens, base 10000\\n    uint16 private constant ownerRewardsRate = 30; // 0.3%, base 10000\\n    uint16 private constant protocolRewardsRate = 15; // 0.15%, base 10000\\n    uint16 private constant rewardsCapRate = 2500; // 25%, base 10000\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token), 'This token is not allowed.');\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelistedContract) {\\n            require(whitelist[msg.sender], 'not whitelisted');\\n        }\\n        _;\\n    }\\n\\n    /// @notice An event that emitted when generating provider rewards\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    /// @notice An event that emitted when generating user rewards\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 userStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    /// @notice An event that emitted when owner adds new dTokens\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param slaRegistry_ SLARegistry address\\n     * @param whitelistedContract_ Declare if contract is whitelisted\\n     * @param slaID_ ID of SLA\\n     * @param leverage_ Leverage of reward\\n     * @param contractOwner_ SLA Owner address\\n     * @param messengerAddress_ Messenger Address\\n     */\\n    constructor(\\n        ISLARegistry slaRegistry_,\\n        bool whitelistedContract_,\\n        uint128 slaID_,\\n        uint64 leverage_,\\n        address contractOwner_,\\n        address messengerAddress_\\n    ) {\\n        require(contractOwner_ != address(0x0), 'invalid owner address');\\n        require(messengerAddress_ != address(0x0), 'invalid messenger address');\\n        _stakeRegistry = IStakeRegistry(slaRegistry_.stakeRegistry());\\n        _periodRegistry = IPeriodRegistry(slaRegistry_.periodRegistry());\\n        whitelistedContract = whitelistedContract_;\\n        (\\n            uint256 _DSLAburnRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint64 _maxLeverage,\\n\\n        ) = _stakeRegistry.getStakingParameters();\\n        _dslaTokenAddress = _stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[contractOwner_] = true;\\n        slaID = slaID_;\\n        require(\\n            leverage_ <= _maxLeverage && leverage_ >= 1,\\n            'incorrect leverage'\\n        );\\n        leverage = leverage_;\\n        messengerAddress = messengerAddress_;\\n    }\\n\\n    /**\\n     * @notice Add multiple addresses to whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to whitelist\\n     */\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (!whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove multiple addresses from whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to remove\\n     */\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to allowedTokens list\\n     * @dev It creates dpToken(Provider) and duToken(User) that represents the position.\\n            only owner can call this function\\n     * @param _tokenAddress Token address to allow\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, , ) = _stakeRegistry\\n            .getStakingParameters();\\n\\n        require(\\n            !isAllowedToken(_tokenAddress),\\n            'This token has been allowed already.'\\n        );\\n\\n        require(\\n            _stakeRegistry.isAllowedToken(_tokenAddress),\\n            'This token is not allowed.'\\n        );\\n        allowedTokens.push(_tokenAddress);\\n\\n        require(maxTokenLength >= allowedTokens.length, 'max token length');\\n\\n        string memory duTokenName = IMessenger(messengerAddress).spName();\\n        string memory duTokenSymbol = IMessenger(messengerAddress)\\n            .spSymbolSlaId(slaID);\\n        string memory dpTokenName = IMessenger(messengerAddress).lpName();\\n        string memory dpTokenSymbol = IMessenger(messengerAddress)\\n            .lpSymbolSlaId(slaID);\\n\\n        uint8 decimals = IERC20Query(_tokenAddress).decimals();\\n\\n        dToken duToken = dToken(\\n            _stakeRegistry.createDToken(duTokenName, duTokenSymbol, decimals)\\n        );\\n\\n        dToken dpToken = dToken(\\n            _stakeRegistry.createDToken(dpTokenName, dpTokenSymbol, decimals)\\n        );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenSymbol,\\n            address(duToken),\\n            duTokenName,\\n            duTokenSymbol\\n        );\\n    }\\n\\n    /**\\n     * @notice Stake allowed assets in User or Provider pools until next period\\n     * @param _tokenAddress Address of token to stake\\n     * @param _nextVerifiablePeriod Next verifiable PeriodId\\n     * @param _amount Amount of tokens to stake\\n     * @param _position Staking position, OK or KO\\n     */\\n    function _stake(\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        uint256 _amount,\\n        Position _position\\n    ) internal onlyAllowedToken(_tokenAddress) onlyWhitelisted nonReentrant {\\n        IERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // DSLA-SP proofs of SLA Position\\n        if (_position == Position.KO) {\\n            require(\\n                (usersPool[_tokenAddress] + _amount) * leverage <=\\n                    providersPool[_tokenAddress],\\n                'Stake exceeds leveraged cap.'\\n            );\\n\\n            dToken duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // If there are no minted tokens, then mint them 1:1\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                duToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / usersPool[_tokenAddress]\\n                );\\n            }\\n            usersPool[_tokenAddress] += _amount;\\n            lastUserStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        // DSLA-LP proofs of SLA Position\\n        if (_position == Position.OK) {\\n            dToken dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                dpToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / providersPool[_tokenAddress]\\n                );\\n            }\\n            providersPool[_tokenAddress] += _amount;\\n            lastProviderStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        if (!registeredStakers[msg.sender]) {\\n            registeredStakers[msg.sender] = true;\\n            stakersNum++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of provider pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setProviderReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 reward = (providersPool[tokenAddress] * _rewardPercentage) /\\n                (leverage * _precision);\\n\\n            // Reward must be less than 25% of usersPool to ensure payout at all time\\n            if (\\n                reward > (usersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                reward =\\n                    (usersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            usersPool[tokenAddress] -= reward;\\n            providersPool[tokenAddress] += reward;\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of user pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setUserReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 compensation = (usersPool[tokenAddress] *\\n                leverage *\\n                _rewardPercentage) / _precision;\\n\\n            // Compensation must be less than 25% of providersPool to ensure payout at all time\\n            if (\\n                compensation >\\n                (providersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                compensation =\\n                    (providersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            providersPool[tokenAddress] -= compensation;\\n            usersPool[tokenAddress] += compensation;\\n\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersPool[tokenAddress],\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from Provider Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastProviderStake[msg.sender] < _nextVerifiablePeriod,\\n                'Provider lock-up until the next verification.'\\n            );\\n\\n            // Allow provider withdrawal as long as the provider pool exceeds the leveraged user pool\\n            require(\\n                providersPool[_tokenAddress] - _amount >=\\n                    usersPool[_tokenAddress] * leverage,\\n                'Withdrawal exceeds leveraged cap.'\\n            );\\n        }\\n\\n        dToken dpToken = dpTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the Provider Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        dpToken.burnFrom(\\n            msg.sender,\\n            (_amount * dpToken.totalSupply()) / providersPool[_tokenAddress]\\n        );\\n        providersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from User Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawUserTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastUserStake[msg.sender] < _nextVerifiablePeriod,\\n                'User lock-up until the next verification.'\\n            );\\n        }\\n\\n        dToken duToken = duTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the User Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        duToken.burnFrom(\\n            msg.sender,\\n            (_amount * duToken.totalSupply()) / usersPool[_tokenAddress]\\n        );\\n        usersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Distribute rewards to owner and protocol when user claims\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @return outstandingAmount\\n     */\\n    function _distributeClaimingRewards(uint256 _amount, address _tokenAddress)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 slaOwnerRewards = (_amount * ownerRewardsRate) / 10000;\\n        uint256 protocolRewards = (_amount * protocolRewardsRate) / 10000;\\n        IERC20(_tokenAddress).safeTransfer(owner(), slaOwnerRewards);\\n        IERC20(_tokenAddress).safeTransfer(\\n            _stakeRegistry.owner(),\\n            protocolRewards\\n        );\\n        return _amount - slaOwnerRewards - protocolRewards;\\n    }\\n\\n    /**\\n     * @notice Get number of allowed tokens\\n     * @return Number of allowed tokens\\n     */\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    /**\\n     * @notice External view function that returns the number of stakers\\n     * @return Number of stakers\\n     */\\n    function getStakersLength() external view returns (uint256) {\\n        return stakersNum;\\n    }\\n\\n    /**\\n     * @notice Check if the token is allowed or not\\n     * @param _tokenAddress Token address to check allowance\\n     * @return isAllowed\\n     */\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe37dbff42cb0cf45f102ce0f1026d84e20736ce3db22bbf443722d5a9cbfc612\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/dToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\n\\ncontract dToken is ERC20PresetMinterPauser {\\n    uint8 _decimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals_\\n    ) ERC20PresetMinterPauser(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x8c905b915de337f5fd07e2929f5c20f958a123242f1945c6731181a763e5c5e0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IERC20Query.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IERC20Query {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x0e1abfa7f467437e9a5f1c97a512b8314689cb2fda6f0d8bf9fe102958d42acb\",\"license\":\"GPL-2.0-or-later\"},\"@dsla-protocol/core/contracts/interfaces/IMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when created a new chainlink request\\n     * @param caller 1. Requester's address\\n     * @param requestsCounter 2. total count of requests\\n     * @param requestId 3. id of the Chainlink request\\n     */\\n    event SLIRequested(\\n        address indexed caller,\\n        uint256 requestsCounter,\\n        bytes32 requestId\\n    );\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. period id\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev event emitted when updating Chainlink Job ID\\n     * @param owner 1. Oracle Owner\\n     * @param jobId 2. Updated job id\\n     * @param fee 3. Chainlink request fee\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param answer response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 answer) external virtual;\\n\\n    /**\\n     * @dev gets the interfaces precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the name of DSLA-LP token\\n     */\\n    function lpName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token\\n     */\\n    function lpSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token with slaId\\n     */\\n    function lpSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    /**\\n     * @dev returns the name of DSLA-SP token\\n     */\\n    function spName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token\\n     */\\n    function spSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token with slaId\\n     */\\n    function spSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        virtual;\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        virtual;\\n}\\n\",\"keccak256\":\"0x363b4c32a70e465f35a939daa788a719cb2ac755764d76fd34222849ea22fbb0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IPeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IPeriodRegistry {\\n    enum PeriodType {\\n        Hourly,\\n        Daily,\\n        Weekly,\\n        BiWeekly,\\n        Monthly,\\n        Yearly\\n    }\\n\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xa3b4321be33c6a0f8dd7d1cebc53fb9755fb970e4b0e6048ec03cc84aa09a55d\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLARegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLARegistry {\\n    function sloRegistry() external view returns (address);\\n\\n    function periodRegistry() external view returns (address);\\n\\n    function messengerRegistry() external view returns (address);\\n\\n    function stakeRegistry() external view returns (address);\\n\\n    function isRegisteredSLA(address _slaAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44bc345be784ff06c5a74d93a519a479c12eab73235016ebeaa7318026f749b8\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLORegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLORegistry {\\n    function getDeviation(\\n        uint256 _sli,\\n        address _slaAddress,\\n        uint256[] calldata _severity,\\n        uint256[] calldata _penalty\\n    ) external view returns (uint256);\\n\\n    function isRespected(uint256 _value, address _slaAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x67e3451bac1e5e7b8271d4299f5c81f0bd119b82a8177635b5ce5bb9db154cb7\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IStakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IStakeRegistry {\\n    function registerStakedSla(address _owner) external returns (bool);\\n\\n    function setSLARegistry() external;\\n\\n    function lockDSLAValue(\\n        address slaOwner_,\\n        address sla_,\\n        uint256 periodIdsLength_\\n    ) external;\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        );\\n\\n    function DSLATokenAddress() external view returns (address);\\n\\n    function isAllowedToken(address tokenAddress_) external view returns (bool);\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function returnLockedValue(address sla_) external;\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external;\\n\\n    function createDToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 decimals\\n    ) external returns (address);\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa0828e4f42d721cb759a2400ca5ff5f132e0a2c92e9b99b1ddcd4d4cfeb23d4c\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003600455683635c9adc5dea00000600655680d8d726b7177a80000600781905560088190556009819055600a556001600b55600c80546001600160481b031916680100000000000000641790553480156200005f57600080fd5b5060405162003ca038038062003ca0833981016040819052620000829162000237565b60016000556200009233620001e5565b6001600160a01b038116620000ee5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642044534c4120746f6b656e206164647265737300000000000060448201526064015b60405180910390fd5b600a5460095460085460075462000106919062000269565b62000112919062000269565b6200011e919062000269565b60065414620001855760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e6720706172616d65746572732073686f756c64206d617463682060448201526b37b71039bab6b6b0ba34b7b760a11b6064820152608401620000e5565b600280546001600160a01b039092166001600160a01b03199283168117909155600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501805490921617905562000290565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200024a57600080fd5b81516001600160a01b03811681146200026257600080fd5b9392505050565b600082198211156200028b57634e487b7160e01b600052601160045260246000fd5b500190565b613a0080620002a06000396000f3fe60806040523480156200001157600080fd5b5060043610620001455760003560e01c80638b8e530911620000bb578063cbe230c3116200007a578063cbe230c31462000391578063db69a46214620003a8578063f2fde38b14620003bc578063f388158914620003d3578063f700839e14620003dd57600080fd5b80638b8e530914620003075780638d9cc7ed14620003195780638da5cb5b1462000330578063ab9a81a5146200033a578063b290508e146200037a57600080fd5b806340c71f0f116200010857806340c71f0f14620002165780635e5f2e2614620002465780635f635ce1146200025d578063715018a614620002e65780637afb4c0a14620002f057600080fd5b80630df0bfc6146200014a578063171e44ea146200019e57806322f3c33c14620001b75780632575d7ca14620001ce57806328eca2cf14620001e5575b600080fd5b620001896200015b3660046200167c565b6001600160a01b039182166000908152600e6020908152604080832093909416825291909152205460ff1690565b60405190151581526020015b60405180910390f35b620001b5620001af366004620016ba565b62000422565b005b620001b5620001c8366004620016da565b620004e8565b620001b5620001df366004620016ba565b620008da565b62000189620001f63660046200167c565b600e60209081526000928352604080842090915290825290205460ff1681565b6200022d620002273660046200176c565b62000af5565b6040516001600160a01b03909116815260200162000195565b6200022d62000257366004620017fe565b62000d3d565b620002b06200026e366004620016ba565b60056020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00162000195565b620001b562000d68565b620001b562000301366004620016da565b62000d80565b6002546001600160a01b03166200022d565b620001b56200032a36600462001827565b62000e9d565b6200022d62000fd5565b620001896200034b366004620018b5565b6001600160a01b0391909116600090815260056020908152604080832093835260079093019052205460ff1690565b620001896200038b366004620016ba565b62000fef565b62000189620003a2366004620016ba565b6200111b565b6003546200022d906001600160a01b031681565b620001b5620003cd366004620016ba565b6200118d565b620001b56200120c565b600454600654600754600854600954600a54600b54600c5467ffffffffffffffff811690600160401b900460ff166040516200019599989796959493929190620018e4565b6200042c6200128c565b62000437816200111b565b15620004965760405162461bcd60e51b8152602060048201526024808201527f5468697320746f6b656e20686173206265656e20616c6c6f77656420616c726560448201526330b23c9760e11b60648201526084015b60405180910390fd5b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314620005155760405162461bcd60e51b81526004016200048d906200192f565b600260005414156200053b5760405162461bcd60e51b81526004016200048d9062001970565b600260009081556001600160a01b0384168152600560209081526040808320848452600781019092529091205460ff1615620005c55760405162461bcd60e51b815260206004820152602260248201527f506572696f64207265776172647320616c726561647920646973747269627574604482015261195960f21b60648201526084016200048d565b60008281526007820160205260408120805460ff191660011790556002820154825490918391620005f8908490620019bd565b909155505060058101546002546200061e916001600160a01b03909116908590620012ef565b620006456200062c62000fd5565b60038301546002546001600160a01b03169190620012ef565b6200074b846001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200068357600080fd5b505afa15801562000698573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006be9190620019d7565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620006f757600080fd5b505afa1580156200070c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007329190620019d7565b60048301546002546001600160a01b03169190620012ef565b600c54600160401b900460ff16156200086657600254604080518082018252600d81526c6275726e2875696e743235362960981b6020918201526006840154825160248082019290925283518082039092018252604401835290810180516001600160e01b0316630852cd8d60e31b17905290516000926001600160a01b031691620007d79162001a26565b6000604051808303816000865af19150503d806000811462000816576040519150601f19603f3d011682016040523d82523d6000602084013e6200081b565b606091505b5050905080620008645760405162461bcd60e51b8152602060048201526013602482015272189d5c9b881c1c9bd8d95cdcc819985a5b1959606a1b60448201526064016200048d565b505b60058101546003820154600483015460068401546040805194855260208501939093529183015260608201526001600160a01b0380851691908616907f826cb0a7342bbb8cfd359b578a84d13c8d382259a596846313632ea4f8a9e0df9060800160405180910390a3505060016000555050565b6003546001600160a01b03163314620009075760405162461bcd60e51b81526004016200048d906200192f565b600260005414156200092d5760405162461bcd60e51b81526004016200048d9062001970565b600260009081556001600160a01b0382168152600560205260409020805480620009925760405162461bcd60e51b81526020600482015260156024820152746c6f636b65642076616c756520697320656d70747960581b60448201526064016200048d565b6000826000018190555062000a29836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009da57600080fd5b505afa158015620009ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a159190620019d7565b6002546001600160a01b03169083620012ef565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a6357600080fd5b505afa15801562000a78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9e9190620019d7565b6001600160a01b0316836001600160a01b03167f526b43222b64bfcfeed3563208adb6adf96643dbe2b032bf8c1db565f648066b8360405162000ae391815260200190565b60405180910390a35050600160005550565b60035460405163c4277a7b60e01b81523360048201526000916001600160a01b03169063c4277a7b9060240160206040518083038186803b15801562000b3a57600080fd5b505afa15801562000b4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b75919062001a44565b62000bbe5760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920666f72207265676973746572656420534c417360401b60448201526064016200048d565b6000868686868660405162000bd39062001658565b62000be395949392919062001a8d565b604051809103906000f08015801562000c00573d6000803e3d6000fd5b509050806001600160a01b0316632f2ff15d826001600160a01b031663d53913936040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4c57600080fd5b505afa15801562000c61573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c87919062001ace565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401600060405180830381600087803b15801562000cc757600080fd5b505af115801562000cdc573d6000803e3d6000fd5b50505050336001600160a01b0316816001600160a01b03167f775642c5d9d0b2d22469762e2d60401339c2c949c17073f300875b9d519542d58989898960405162000d2b949392919062001ae8565b60405180910390a39695505050505050565b600d818154811062000d4e57600080fd5b6000918252602090912001546001600160a01b0316905081565b62000d726200128c565b62000d7e600062001359565b565b6003546001600160a01b0316331462000dad5760405162461bcd60e51b81526004016200048d906200192f565b6002600054141562000dd35760405162461bcd60e51b81526004016200048d9062001970565b6002600090815560065462000dea90839062001b13565b60025490915062000e07906001600160a01b0316853084620013ab565b6001600160a01b03838116600081815260056020818152604092839020868155600181018890556006805460028301556007546003830155600854600483015560095493820193909355600a549281019290925591518581529093881692917fbed8b484d876a51d8bc97cdb1cf64b989bd09f01fa27c956ed58b2eebc7524d9910160405180910390a350506001600055505050565b62000ea76200128c565b60048990556006889055600787905560088690556009859055600a849055600b839055600c8054821515600160401b0268ffffffffffffffffff1990911667ffffffffffffffff851617179055838562000f02888a62001b35565b62000f0e919062001b35565b62000f1a919062001b35565b6006541462000f815760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e6720706172616d65746572732073686f756c64206d617463682060448201526b37b71039bab6b6b0ba34b7b760a11b60648201526084016200048d565b7f6f8c694dce70811f9682da311aef04650917bf4c3dd5d6b925c37ceb49074c6f89898989898989898960405162000fc299989796959493929190620018e4565b60405180910390a1505050505050505050565b600062000fea6001546001600160a01b031690565b905090565b60035460405163c4277a7b60e01b81523360048201526000916001600160a01b03169063c4277a7b9060240160206040518083038186803b1580156200103457600080fd5b505afa15801562001049573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200106f919062001a44565b620010b85760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920666f72207265676973746572656420534c417360401b60448201526064016200048d565b6001600160a01b0382166000908152600e6020908152604080832033845290915290205460ff1662001113576001600160a01b0382166000908152600e602090815260408083203384529091529020805460ff191660011790555b506001919050565b6000805b600d548110156200118457826001600160a01b0316600d82815481106200114a576200114a62001b50565b6000918252602090912001546001600160a01b031614156200116f5750600192915050565b806200117b8162001b66565b9150506200111f565b50600092915050565b620011976200128c565b6001600160a01b038116620011fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200048d565b620012098162001359565b50565b6003546001600160a01b031615620012785760405162461bcd60e51b815260206004820152602860248201527f534c41526567697374727920616464726573732068617320616c7265616479206044820152671899595b881cd95d60c21b60648201526084016200048d565b600380546001600160a01b03191633179055565b336200129762000fd5565b6001600160a01b03161462000d7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200048d565b6040516001600160a01b0383166024820152604481018290526200135490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620013eb565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052620013e59085906323b872dd60e01b906084016200131c565b50505050565b600062001442826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620014c49092919063ffffffff16565b80519091501562001354578080602001905181019062001463919062001a44565b620013545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200048d565b6060620014d58484600085620014df565b90505b9392505050565b606082471015620015425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200048d565b6001600160a01b0385163b6200159b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200048d565b600080866001600160a01b03168587604051620015b9919062001a26565b60006040518083038185875af1925050503d8060008114620015f8576040519150601f19603f3d011682016040523d82523d6000602084013e620015fd565b606091505b50915091506200160f8282866200161a565b979650505050505050565b606083156200162b575081620014d8565b8251156200163c5782518084602001fd5b8160405162461bcd60e51b81526004016200048d919062001b84565b611e118062001bba83390190565b6001600160a01b03811681146200120957600080fd5b600080604083850312156200169057600080fd5b82356200169d8162001666565b91506020830135620016af8162001666565b809150509250929050565b600060208284031215620016cd57600080fd5b8135620014d88162001666565b600080600060608486031215620016f057600080fd5b8335620016fd8162001666565b925060208401356200170f8162001666565b929592945050506040919091013590565b60008083601f8401126200173357600080fd5b50813567ffffffffffffffff8111156200174c57600080fd5b6020830191508360208285010111156200176557600080fd5b9250929050565b6000806000806000606086880312156200178557600080fd5b853567ffffffffffffffff808211156200179e57600080fd5b620017ac89838a0162001720565b90975095506020880135915080821115620017c657600080fd5b50620017d58882890162001720565b909450925050604086013560ff81168114620017f057600080fd5b809150509295509295909350565b6000602082840312156200181157600080fd5b5035919050565b80151581146200120957600080fd5b60008060008060008060008060006101208a8c0312156200184757600080fd5b8935985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff811681146200189157600080fd5b91506101008a0135620018a48162001818565b809150509295985092959850929598565b60008060408385031215620018c957600080fd5b8235620018d68162001666565b946020939093013593505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015267ffffffffffffffff1660e083015215156101008201526101200190565b60208082526021908201527f43616e206f6e6c792062652063616c6c656420627920534c41526567697374726040820152607960f81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015620019d257620019d2620019a7565b500390565b600060208284031215620019ea57600080fd5b8151620014d88162001666565b60005b8381101562001a14578181015183820152602001620019fa565b83811115620013e55750506000910152565b6000825162001a3a818460208701620019f7565b9190910192915050565b60006020828403121562001a5757600080fd5b8151620014d88162001818565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062001aa360608301878962001a64565b828103602084015262001ab881868862001a64565b91505060ff831660408301529695505050505050565b60006020828403121562001ae157600080fd5b5051919050565b60408152600062001afe60408301868862001a64565b82810360208401526200160f81858762001a64565b600081600019048311821515161562001b305762001b30620019a7565b500290565b6000821982111562001b4b5762001b4b620019a7565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141562001b7d5762001b7d620019a7565b5060010190565b602081526000825180602084015262001ba5816040850160208701620019f7565b601f01601f1916919091016040019291505056fe60806040523480156200001157600080fd5b5060405162001e1138038062001e118339810160408190526200003491620003f7565b8282818181600590805190602001906200005092919062000284565b5080516200006690600690602084019062000284565b50506007805460ff1916905550620000806000336200011f565b6200009b60008051602062001df1833981519152336200011f565b620000b660008051602062001dd1833981519152336200011f565b50620000c690506000336200011f565b620000e160008051602062001df1833981519152336200011f565b620000fc60008051602062001dd1833981519152336200011f565b6007805460ff9092166101000261ff001990921691909117905550620004b99050565b6200012b82826200012f565b5050565b6200014682826200017260201b6200094b1760201c565b60008281526001602090815260409091206200016d918390620009cf62000212821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200012b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ce3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000229836001600160a01b03841662000232565b90505b92915050565b60008181526001830160205260408120546200027b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200022c565b5060006200022c565b82805462000292906200047c565b90600052602060002090601f016020900481019282620002b6576000855562000301565b82601f10620002d157805160ff191683800117855562000301565b8280016001018555821562000301579182015b8281111562000301578251825591602001919060010190620002e4565b506200030f92915062000313565b5090565b5b808211156200030f576000815560010162000314565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200035257600080fd5b81516001600160401b03808211156200036f576200036f6200032a565b604051601f8301601f19908116603f011681019082821181831017156200039a576200039a6200032a565b81604052838152602092508683858801011115620003b757600080fd5b600091505b83821015620003db5785820183015181830184015290820190620003bc565b83821115620003ed5760008385830101525b9695505050505050565b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b620004338783880162000340565b945060208601519150808211156200044a57600080fd5b50620004598682870162000340565b925050604084015160ff811681146200047157600080fd5b809150509250925092565b600181811c908216806200049157607f821691505b60208210811415620004b357634e487b7160e01b600052602260045260246000fd5b50919050565b61190880620004c96000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d5391393146103bd578063d547741f146103e4578063dd62ed3e146103f7578063e63ab1e91461040a57600080fd5b8063a457c2d714610384578063a9059cbb14610397578063ca15c873146103aa57600080fd5b80639010d07c116100d35780639010d07c1461033657806391d148541461036157806395d89b4114610374578063a217fddf1461037c57600080fd5b806370a08231146102f257806379cc67901461031b5780638456cb591461032e57600080fd5b8063313ce567116101665780633f4ba83a116101405780633f4ba83a146102b957806340c10f19146102c157806342966c68146102d45780635c975abb146102e757600080fd5b8063313ce5671461027657806336568abe1461029357806339509351146102a657600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063248a9ca31461023e5780632f2ff15d1461026157600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d73660046115ae565b610431565b60405190151581526020015b60405180910390f35b6101f961045c565b6040516101e89190611604565b6101dc610214366004611653565b6104ee565b6004545b6040519081526020016101e8565b6101dc61023936600461167d565b610506565b61021d61024c3660046116b9565b60009081526020819052604090206001015490565b61027461026f3660046116d2565b61052a565b005b600754610100900460ff1660405160ff90911681526020016101e8565b6102746102a13660046116d2565b610554565b6101dc6102b4366004611653565b6105d7565b6102746105f9565b6102746102cf366004611653565b61069f565b6102746102e23660046116b9565b61073e565b60075460ff166101dc565b61021d6103003660046116fe565b6001600160a01b031660009081526002602052604090205490565b610274610329366004611653565b61074b565b610274610760565b610349610344366004611719565b610804565b6040516001600160a01b0390911681526020016101e8565b6101dc61036f3660046116d2565b610823565b6101f961084c565b61021d600081565b6101dc610392366004611653565b61085b565b6101dc6103a5366004611653565b6108d6565b61021d6103b83660046116b9565b6108e4565b61021d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102746103f23660046116d2565b6108fb565b61021d61040536600461173b565b610920565b61021d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b14806104565750610456826109e4565b92915050565b60606005805461046b90611765565b80601f016020809104026020016040519081016040528092919081815260200182805461049790611765565b80156104e45780601f106104b9576101008083540402835291602001916104e4565b820191906000526020600020905b8154815290600101906020018083116104c757829003601f168201915b5050505050905090565b6000336104fc818585610a19565b5060019392505050565b600033610514858285610b3d565b61051f858585610bb7565b506001949350505050565b60008281526020819052604090206001015461054581610d90565b61054f8383610d9a565b505050565b6001600160a01b03811633146105c95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105d38282610dbc565b5050565b6000336104fc8185856105ea8383610920565b6105f491906117b6565b610a19565b6106237f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610823565b6106955760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e70617573650000000000000060648201526084016105c0565b61069d610dde565b565b6106c97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610823565b6107345760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d7573742068616044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016105c0565b6105d38282610e30565b6107483382610f1b565b50565b610756823383610b3d565b6105d38282610f1b565b61078a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610823565b6107fc5760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20706175736500000000000000000060648201526084016105c0565b61069d611075565b600082815260016020526040812061081c90836110b2565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606006805461046b90611765565b600033816108698286610920565b9050838110156108c95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105c0565b61051f8286868403610a19565b6000336104fc818585610bb7565b6000818152600160205260408120610456906110be565b60008281526020819052604090206001015461091681610d90565b61054f8383610dbc565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6109558282610823565b6105d3576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561098b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061081c836001600160a01b0384166110c8565b60006001600160e01b03198216637965db0b60e01b148061045657506301ffc9a760e01b6001600160e01b0319831614610456565b6001600160a01b038316610a7b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105c0565b6001600160a01b038216610adc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105c0565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610b498484610920565b90506000198114610bb15781811015610ba45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105c0565b610bb18484848403610a19565b50505050565b6001600160a01b038316610c1b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105c0565b6001600160a01b038216610c7d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105c0565b610c88838383611117565b6001600160a01b03831660009081526002602052604090205481811015610d005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105c0565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610d379084906117b6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8391815260200190565b60405180910390a3610bb1565b6107488133611122565b610da4828261094b565b600082815260016020526040902061054f90826109cf565b610dc68282611186565b600082815260016020526040902061054f90826111eb565b610de6611200565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610e865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105c0565b610e9260008383611117565b8060046000828254610ea491906117b6565b90915550506001600160a01b03821660009081526002602052604081208054839290610ed19084906117b6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f7b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105c0565b610f8782600083611117565b6001600160a01b03821660009081526002602052604090205481811015610ffb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105c0565b6001600160a01b038316600090815260026020526040812083830390556004805484929061102a9084906117ce565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b61107d611249565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e133390565b600061081c838361128f565b6000610456825490565b600081815260018301602052604081205461110f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610456565b506000610456565b61054f8383836112b9565b61112c8282610823565b6105d357611144816001600160a01b0316601461131f565b61114f83602061131f565b6040516020016111609291906117e5565b60408051601f198184030181529082905262461bcd60e51b82526105c091600401611604565b6111908282610823565b156105d3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061081c836001600160a01b0384166114bb565b60075460ff1661069d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c0565b60075460ff161561069d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c0565b60008260000182815481106112a6576112a661185a565b9060005260206000200154905092915050565b60075460ff161561054f5760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016105c0565b6060600061132e836002611870565b6113399060026117b6565b67ffffffffffffffff8111156113515761135161188f565b6040519080825280601f01601f19166020018201604052801561137b576020820181803683370190505b509050600360fc1b816000815181106113965761139661185a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106113c5576113c561185a565b60200101906001600160f81b031916908160001a90535060006113e9846002611870565b6113f49060016117b6565b90505b600181111561146c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114285761142861185a565b1a60f81b82828151811061143e5761143e61185a565b60200101906001600160f81b031916908160001a90535060049490941c93611465816118a5565b90506113f7565b50831561081c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c0565b600081815260018301602052604081205480156115a45760006114df6001836117ce565b85549091506000906114f3906001906117ce565b90508181146115585760008660000182815481106115135761151361185a565b90600052602060002001549050808760000184815481106115365761153661185a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611569576115696118bc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610456565b6000915050610456565b6000602082840312156115c057600080fd5b81356001600160e01b03198116811461081c57600080fd5b60005b838110156115f35781810151838201526020016115db565b83811115610bb15750506000910152565b60208152600082518060208401526116238160408501602087016115d8565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461164e57600080fd5b919050565b6000806040838503121561166657600080fd5b61166f83611637565b946020939093013593505050565b60008060006060848603121561169257600080fd5b61169b84611637565b92506116a960208501611637565b9150604084013590509250925092565b6000602082840312156116cb57600080fd5b5035919050565b600080604083850312156116e557600080fd5b823591506116f560208401611637565b90509250929050565b60006020828403121561171057600080fd5b61081c82611637565b6000806040838503121561172c57600080fd5b50508035926020909101359150565b6000806040838503121561174e57600080fd5b61175783611637565b91506116f560208401611637565b600181811c9082168061177957607f821691505b6020821081141561179a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156117c9576117c96117a0565b500190565b6000828210156117e0576117e06117a0565b500390565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161181d8160178501602088016115d8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161184e8160288401602088016115d8565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561188a5761188a6117a0565b500290565b634e487b7160e01b600052604160045260246000fd5b6000816118b4576118b46117a0565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220796720e2d1ad7279827ef7428fbb1f6767dc4646b60dbafe7da98931b4a31b5364736f6c6343000809003365d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220dd8e89d2a802c79226dd904580090fc02674a751247ffd92ab43fbbd4c39dcbc64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001455760003560e01c80638b8e530911620000bb578063cbe230c3116200007a578063cbe230c31462000391578063db69a46214620003a8578063f2fde38b14620003bc578063f388158914620003d3578063f700839e14620003dd57600080fd5b80638b8e530914620003075780638d9cc7ed14620003195780638da5cb5b1462000330578063ab9a81a5146200033a578063b290508e146200037a57600080fd5b806340c71f0f116200010857806340c71f0f14620002165780635e5f2e2614620002465780635f635ce1146200025d578063715018a614620002e65780637afb4c0a14620002f057600080fd5b80630df0bfc6146200014a578063171e44ea146200019e57806322f3c33c14620001b75780632575d7ca14620001ce57806328eca2cf14620001e5575b600080fd5b620001896200015b3660046200167c565b6001600160a01b039182166000908152600e6020908152604080832093909416825291909152205460ff1690565b60405190151581526020015b60405180910390f35b620001b5620001af366004620016ba565b62000422565b005b620001b5620001c8366004620016da565b620004e8565b620001b5620001df366004620016ba565b620008da565b62000189620001f63660046200167c565b600e60209081526000928352604080842090915290825290205460ff1681565b6200022d620002273660046200176c565b62000af5565b6040516001600160a01b03909116815260200162000195565b6200022d62000257366004620017fe565b62000d3d565b620002b06200026e366004620016ba565b60056020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154905087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00162000195565b620001b562000d68565b620001b562000301366004620016da565b62000d80565b6002546001600160a01b03166200022d565b620001b56200032a36600462001827565b62000e9d565b6200022d62000fd5565b620001896200034b366004620018b5565b6001600160a01b0391909116600090815260056020908152604080832093835260079093019052205460ff1690565b620001896200038b366004620016ba565b62000fef565b62000189620003a2366004620016ba565b6200111b565b6003546200022d906001600160a01b031681565b620001b5620003cd366004620016ba565b6200118d565b620001b56200120c565b600454600654600754600854600954600a54600b54600c5467ffffffffffffffff811690600160401b900460ff166040516200019599989796959493929190620018e4565b6200042c6200128c565b62000437816200111b565b15620004965760405162461bcd60e51b8152602060048201526024808201527f5468697320746f6b656e20686173206265656e20616c6c6f77656420616c726560448201526330b23c9760e11b60648201526084015b60405180910390fd5b600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314620005155760405162461bcd60e51b81526004016200048d906200192f565b600260005414156200053b5760405162461bcd60e51b81526004016200048d9062001970565b600260009081556001600160a01b0384168152600560209081526040808320848452600781019092529091205460ff1615620005c55760405162461bcd60e51b815260206004820152602260248201527f506572696f64207265776172647320616c726561647920646973747269627574604482015261195960f21b60648201526084016200048d565b60008281526007820160205260408120805460ff191660011790556002820154825490918391620005f8908490620019bd565b909155505060058101546002546200061e916001600160a01b03909116908590620012ef565b620006456200062c62000fd5565b60038301546002546001600160a01b03169190620012ef565b6200074b846001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200068357600080fd5b505afa15801562000698573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006be9190620019d7565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620006f757600080fd5b505afa1580156200070c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007329190620019d7565b60048301546002546001600160a01b03169190620012ef565b600c54600160401b900460ff16156200086657600254604080518082018252600d81526c6275726e2875696e743235362960981b6020918201526006840154825160248082019290925283518082039092018252604401835290810180516001600160e01b0316630852cd8d60e31b17905290516000926001600160a01b031691620007d79162001a26565b6000604051808303816000865af19150503d806000811462000816576040519150601f19603f3d011682016040523d82523d6000602084013e6200081b565b606091505b5050905080620008645760405162461bcd60e51b8152602060048201526013602482015272189d5c9b881c1c9bd8d95cdcc819985a5b1959606a1b60448201526064016200048d565b505b60058101546003820154600483015460068401546040805194855260208501939093529183015260608201526001600160a01b0380851691908616907f826cb0a7342bbb8cfd359b578a84d13c8d382259a596846313632ea4f8a9e0df9060800160405180910390a3505060016000555050565b6003546001600160a01b03163314620009075760405162461bcd60e51b81526004016200048d906200192f565b600260005414156200092d5760405162461bcd60e51b81526004016200048d9062001970565b600260009081556001600160a01b0382168152600560205260409020805480620009925760405162461bcd60e51b81526020600482015260156024820152746c6f636b65642076616c756520697320656d70747960581b60448201526064016200048d565b6000826000018190555062000a29836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009da57600080fd5b505afa158015620009ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a159190620019d7565b6002546001600160a01b03169083620012ef565b826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a6357600080fd5b505afa15801562000a78573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9e9190620019d7565b6001600160a01b0316836001600160a01b03167f526b43222b64bfcfeed3563208adb6adf96643dbe2b032bf8c1db565f648066b8360405162000ae391815260200190565b60405180910390a35050600160005550565b60035460405163c4277a7b60e01b81523360048201526000916001600160a01b03169063c4277a7b9060240160206040518083038186803b15801562000b3a57600080fd5b505afa15801562000b4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b75919062001a44565b62000bbe5760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920666f72207265676973746572656420534c417360401b60448201526064016200048d565b6000868686868660405162000bd39062001658565b62000be395949392919062001a8d565b604051809103906000f08015801562000c00573d6000803e3d6000fd5b509050806001600160a01b0316632f2ff15d826001600160a01b031663d53913936040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4c57600080fd5b505afa15801562000c61573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c87919062001ace565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401600060405180830381600087803b15801562000cc757600080fd5b505af115801562000cdc573d6000803e3d6000fd5b50505050336001600160a01b0316816001600160a01b03167f775642c5d9d0b2d22469762e2d60401339c2c949c17073f300875b9d519542d58989898960405162000d2b949392919062001ae8565b60405180910390a39695505050505050565b600d818154811062000d4e57600080fd5b6000918252602090912001546001600160a01b0316905081565b62000d726200128c565b62000d7e600062001359565b565b6003546001600160a01b0316331462000dad5760405162461bcd60e51b81526004016200048d906200192f565b6002600054141562000dd35760405162461bcd60e51b81526004016200048d9062001970565b6002600090815560065462000dea90839062001b13565b60025490915062000e07906001600160a01b0316853084620013ab565b6001600160a01b03838116600081815260056020818152604092839020868155600181018890556006805460028301556007546003830155600854600483015560095493820193909355600a549281019290925591518581529093881692917fbed8b484d876a51d8bc97cdb1cf64b989bd09f01fa27c956ed58b2eebc7524d9910160405180910390a350506001600055505050565b62000ea76200128c565b60048990556006889055600787905560088690556009859055600a849055600b839055600c8054821515600160401b0268ffffffffffffffffff1990911667ffffffffffffffff851617179055838562000f02888a62001b35565b62000f0e919062001b35565b62000f1a919062001b35565b6006541462000f815760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e6720706172616d65746572732073686f756c64206d617463682060448201526b37b71039bab6b6b0ba34b7b760a11b60648201526084016200048d565b7f6f8c694dce70811f9682da311aef04650917bf4c3dd5d6b925c37ceb49074c6f89898989898989898960405162000fc299989796959493929190620018e4565b60405180910390a1505050505050505050565b600062000fea6001546001600160a01b031690565b905090565b60035460405163c4277a7b60e01b81523360048201526000916001600160a01b03169063c4277a7b9060240160206040518083038186803b1580156200103457600080fd5b505afa15801562001049573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200106f919062001a44565b620010b85760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920666f72207265676973746572656420534c417360401b60448201526064016200048d565b6001600160a01b0382166000908152600e6020908152604080832033845290915290205460ff1662001113576001600160a01b0382166000908152600e602090815260408083203384529091529020805460ff191660011790555b506001919050565b6000805b600d548110156200118457826001600160a01b0316600d82815481106200114a576200114a62001b50565b6000918252602090912001546001600160a01b031614156200116f5750600192915050565b806200117b8162001b66565b9150506200111f565b50600092915050565b620011976200128c565b6001600160a01b038116620011fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200048d565b620012098162001359565b50565b6003546001600160a01b031615620012785760405162461bcd60e51b815260206004820152602860248201527f534c41526567697374727920616464726573732068617320616c7265616479206044820152671899595b881cd95d60c21b60648201526084016200048d565b600380546001600160a01b03191633179055565b336200129762000fd5565b6001600160a01b03161462000d7e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200048d565b6040516001600160a01b0383166024820152604481018290526200135490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620013eb565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052620013e59085906323b872dd60e01b906084016200131c565b50505050565b600062001442826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620014c49092919063ffffffff16565b80519091501562001354578080602001905181019062001463919062001a44565b620013545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200048d565b6060620014d58484600085620014df565b90505b9392505050565b606082471015620015425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200048d565b6001600160a01b0385163b6200159b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200048d565b600080866001600160a01b03168587604051620015b9919062001a26565b60006040518083038185875af1925050503d8060008114620015f8576040519150601f19603f3d011682016040523d82523d6000602084013e620015fd565b606091505b50915091506200160f8282866200161a565b979650505050505050565b606083156200162b575081620014d8565b8251156200163c5782518084602001fd5b8160405162461bcd60e51b81526004016200048d919062001b84565b611e118062001bba83390190565b6001600160a01b03811681146200120957600080fd5b600080604083850312156200169057600080fd5b82356200169d8162001666565b91506020830135620016af8162001666565b809150509250929050565b600060208284031215620016cd57600080fd5b8135620014d88162001666565b600080600060608486031215620016f057600080fd5b8335620016fd8162001666565b925060208401356200170f8162001666565b929592945050506040919091013590565b60008083601f8401126200173357600080fd5b50813567ffffffffffffffff8111156200174c57600080fd5b6020830191508360208285010111156200176557600080fd5b9250929050565b6000806000806000606086880312156200178557600080fd5b853567ffffffffffffffff808211156200179e57600080fd5b620017ac89838a0162001720565b90975095506020880135915080821115620017c657600080fd5b50620017d58882890162001720565b909450925050604086013560ff81168114620017f057600080fd5b809150509295509295909350565b6000602082840312156200181157600080fd5b5035919050565b80151581146200120957600080fd5b60008060008060008060008060006101208a8c0312156200184757600080fd5b8935985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013567ffffffffffffffff811681146200189157600080fd5b91506101008a0135620018a48162001818565b809150509295985092959850929598565b60008060408385031215620018c957600080fd5b8235620018d68162001666565b946020939093013593505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015267ffffffffffffffff1660e083015215156101008201526101200190565b60208082526021908201527f43616e206f6e6c792062652063616c6c656420627920534c41526567697374726040820152607960f81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015620019d257620019d2620019a7565b500390565b600060208284031215620019ea57600080fd5b8151620014d88162001666565b60005b8381101562001a14578181015183820152602001620019fa565b83811115620013e55750506000910152565b6000825162001a3a818460208701620019f7565b9190910192915050565b60006020828403121562001a5757600080fd5b8151620014d88162001818565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062001aa360608301878962001a64565b828103602084015262001ab881868862001a64565b91505060ff831660408301529695505050505050565b60006020828403121562001ae157600080fd5b5051919050565b60408152600062001afe60408301868862001a64565b82810360208401526200160f81858762001a64565b600081600019048311821515161562001b305762001b30620019a7565b500290565b6000821982111562001b4b5762001b4b620019a7565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141562001b7d5762001b7d620019a7565b5060010190565b602081526000825180602084015262001ba5816040850160208701620019f7565b601f01601f1916919091016040019291505056fe60806040523480156200001157600080fd5b5060405162001e1138038062001e118339810160408190526200003491620003f7565b8282818181600590805190602001906200005092919062000284565b5080516200006690600690602084019062000284565b50506007805460ff1916905550620000806000336200011f565b6200009b60008051602062001df1833981519152336200011f565b620000b660008051602062001dd1833981519152336200011f565b50620000c690506000336200011f565b620000e160008051602062001df1833981519152336200011f565b620000fc60008051602062001dd1833981519152336200011f565b6007805460ff9092166101000261ff001990921691909117905550620004b99050565b6200012b82826200012f565b5050565b6200014682826200017260201b6200094b1760201c565b60008281526001602090815260409091206200016d918390620009cf62000212821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200012b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ce3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000229836001600160a01b03841662000232565b90505b92915050565b60008181526001830160205260408120546200027b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200022c565b5060006200022c565b82805462000292906200047c565b90600052602060002090601f016020900481019282620002b6576000855562000301565b82601f10620002d157805160ff191683800117855562000301565b8280016001018555821562000301579182015b8281111562000301578251825591602001919060010190620002e4565b506200030f92915062000313565b5090565b5b808211156200030f576000815560010162000314565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200035257600080fd5b81516001600160401b03808211156200036f576200036f6200032a565b604051601f8301601f19908116603f011681019082821181831017156200039a576200039a6200032a565b81604052838152602092508683858801011115620003b757600080fd5b600091505b83821015620003db5785820183015181830184015290820190620003bc565b83821115620003ed5760008385830101525b9695505050505050565b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b620004338783880162000340565b945060208601519150808211156200044a57600080fd5b50620004598682870162000340565b925050604084015160ff811681146200047157600080fd5b809150509250925092565b600181811c908216806200049157607f821691505b60208210811415620004b357634e487b7160e01b600052602260045260246000fd5b50919050565b61190880620004c96000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806370a08231116100f9578063a457c2d711610097578063d539139311610071578063d5391393146103bd578063d547741f146103e4578063dd62ed3e146103f7578063e63ab1e91461040a57600080fd5b8063a457c2d714610384578063a9059cbb14610397578063ca15c873146103aa57600080fd5b80639010d07c116100d35780639010d07c1461033657806391d148541461036157806395d89b4114610374578063a217fddf1461037c57600080fd5b806370a08231146102f257806379cc67901461031b5780638456cb591461032e57600080fd5b8063313ce567116101665780633f4ba83a116101405780633f4ba83a146102b957806340c10f19146102c157806342966c68146102d45780635c975abb146102e757600080fd5b8063313ce5671461027657806336568abe1461029357806339509351146102a657600080fd5b806318160ddd116101a257806318160ddd1461021957806323b872dd1461022b578063248a9ca31461023e5780632f2ff15d1461026157600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063095ea7b314610206575b600080fd5b6101dc6101d73660046115ae565b610431565b60405190151581526020015b60405180910390f35b6101f961045c565b6040516101e89190611604565b6101dc610214366004611653565b6104ee565b6004545b6040519081526020016101e8565b6101dc61023936600461167d565b610506565b61021d61024c3660046116b9565b60009081526020819052604090206001015490565b61027461026f3660046116d2565b61052a565b005b600754610100900460ff1660405160ff90911681526020016101e8565b6102746102a13660046116d2565b610554565b6101dc6102b4366004611653565b6105d7565b6102746105f9565b6102746102cf366004611653565b61069f565b6102746102e23660046116b9565b61073e565b60075460ff166101dc565b61021d6103003660046116fe565b6001600160a01b031660009081526002602052604090205490565b610274610329366004611653565b61074b565b610274610760565b610349610344366004611719565b610804565b6040516001600160a01b0390911681526020016101e8565b6101dc61036f3660046116d2565b610823565b6101f961084c565b61021d600081565b6101dc610392366004611653565b61085b565b6101dc6103a5366004611653565b6108d6565b61021d6103b83660046116b9565b6108e4565b61021d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102746103f23660046116d2565b6108fb565b61021d61040536600461173b565b610920565b61021d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006001600160e01b03198216635a05180f60e01b14806104565750610456826109e4565b92915050565b60606005805461046b90611765565b80601f016020809104026020016040519081016040528092919081815260200182805461049790611765565b80156104e45780601f106104b9576101008083540402835291602001916104e4565b820191906000526020600020905b8154815290600101906020018083116104c757829003601f168201915b5050505050905090565b6000336104fc818585610a19565b5060019392505050565b600033610514858285610b3d565b61051f858585610bb7565b506001949350505050565b60008281526020819052604090206001015461054581610d90565b61054f8383610d9a565b505050565b6001600160a01b03811633146105c95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105d38282610dbc565b5050565b6000336104fc8185856105ea8383610920565b6105f491906117b6565b610a19565b6106237f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610823565b6106955760405162461bcd60e51b815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e70617573650000000000000060648201526084016105c0565b61069d610dde565b565b6106c97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610823565b6107345760405162461bcd60e51b815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d7573742068616044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016105c0565b6105d38282610e30565b6107483382610f1b565b50565b610756823383610b3d565b6105d38282610f1b565b61078a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610823565b6107fc5760405162461bcd60e51b815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20706175736500000000000000000060648201526084016105c0565b61069d611075565b600082815260016020526040812061081c90836110b2565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606006805461046b90611765565b600033816108698286610920565b9050838110156108c95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105c0565b61051f8286868403610a19565b6000336104fc818585610bb7565b6000818152600160205260408120610456906110be565b60008281526020819052604090206001015461091681610d90565b61054f8383610dbc565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6109558282610823565b6105d3576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561098b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061081c836001600160a01b0384166110c8565b60006001600160e01b03198216637965db0b60e01b148061045657506301ffc9a760e01b6001600160e01b0319831614610456565b6001600160a01b038316610a7b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105c0565b6001600160a01b038216610adc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105c0565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610b498484610920565b90506000198114610bb15781811015610ba45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105c0565b610bb18484848403610a19565b50505050565b6001600160a01b038316610c1b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105c0565b6001600160a01b038216610c7d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105c0565b610c88838383611117565b6001600160a01b03831660009081526002602052604090205481811015610d005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105c0565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290610d379084906117b6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8391815260200190565b60405180910390a3610bb1565b6107488133611122565b610da4828261094b565b600082815260016020526040902061054f90826109cf565b610dc68282611186565b600082815260016020526040902061054f90826111eb565b610de6611200565b6007805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610e865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105c0565b610e9260008383611117565b8060046000828254610ea491906117b6565b90915550506001600160a01b03821660009081526002602052604081208054839290610ed19084906117b6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f7b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105c0565b610f8782600083611117565b6001600160a01b03821660009081526002602052604090205481811015610ffb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105c0565b6001600160a01b038316600090815260026020526040812083830390556004805484929061102a9084906117ce565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b61107d611249565b6007805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e133390565b600061081c838361128f565b6000610456825490565b600081815260018301602052604081205461110f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610456565b506000610456565b61054f8383836112b9565b61112c8282610823565b6105d357611144816001600160a01b0316601461131f565b61114f83602061131f565b6040516020016111609291906117e5565b60408051601f198184030181529082905262461bcd60e51b82526105c091600401611604565b6111908282610823565b156105d3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061081c836001600160a01b0384166114bb565b60075460ff1661069d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c0565b60075460ff161561069d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c0565b60008260000182815481106112a6576112a661185a565b9060005260206000200154905092915050565b60075460ff161561054f5760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016105c0565b6060600061132e836002611870565b6113399060026117b6565b67ffffffffffffffff8111156113515761135161188f565b6040519080825280601f01601f19166020018201604052801561137b576020820181803683370190505b509050600360fc1b816000815181106113965761139661185a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106113c5576113c561185a565b60200101906001600160f81b031916908160001a90535060006113e9846002611870565b6113f49060016117b6565b90505b600181111561146c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114285761142861185a565b1a60f81b82828151811061143e5761143e61185a565b60200101906001600160f81b031916908160001a90535060049490941c93611465816118a5565b90506113f7565b50831561081c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c0565b600081815260018301602052604081205480156115a45760006114df6001836117ce565b85549091506000906114f3906001906117ce565b90508181146115585760008660000182815481106115135761151361185a565b90600052602060002001549050808760000184815481106115365761153661185a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611569576115696118bc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610456565b6000915050610456565b6000602082840312156115c057600080fd5b81356001600160e01b03198116811461081c57600080fd5b60005b838110156115f35781810151838201526020016115db565b83811115610bb15750506000910152565b60208152600082518060208401526116238160408501602087016115d8565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461164e57600080fd5b919050565b6000806040838503121561166657600080fd5b61166f83611637565b946020939093013593505050565b60008060006060848603121561169257600080fd5b61169b84611637565b92506116a960208501611637565b9150604084013590509250925092565b6000602082840312156116cb57600080fd5b5035919050565b600080604083850312156116e557600080fd5b823591506116f560208401611637565b90509250929050565b60006020828403121561171057600080fd5b61081c82611637565b6000806040838503121561172c57600080fd5b50508035926020909101359150565b6000806040838503121561174e57600080fd5b61175783611637565b91506116f560208401611637565b600181811c9082168061177957607f821691505b6020821081141561179a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156117c9576117c96117a0565b500190565b6000828210156117e0576117e06117a0565b500390565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161181d8160178501602088016115d8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161184e8160288401602088016115d8565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561188a5761188a6117a0565b500290565b634e487b7160e01b600052604160045260246000fd5b6000816118b4576118b46117a0565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220796720e2d1ad7279827ef7428fbb1f6767dc4646b60dbafe7da98931b4a31b5364736f6c6343000809003365d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220dd8e89d2a802c79226dd904580090fc02674a751247ffd92ab43fbbd4c39dcbc64736f6c63430008090033",
  "devdoc": {
    "details": "StakeRegistry is a contract to register the staking activity of the platform, along with controlling certain admin privileged parameters",
    "events": {
      "DTokenCreated(address,address,string,string)": {
        "details": "event to log modifications on the staking parameters",
        "params": {
          "dTokenAddress": "1. -",
          "name": "3. -",
          "sla": "2. -",
          "symbol": "4. -"
        }
      },
      "LockedValueReturned(address,address,uint256)": {
        "details": "event to log modifications on the staking parameters",
        "params": {
          "amount": "3. -",
          "owner": "2. -",
          "sla": "1. -"
        }
      },
      "StakingParametersModified(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)": {
        "details": "event to log modifications on the staking parameters",
        "params": {
          "DSLAburnRate": "1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid",
          "dslaBurnedByVerification": "5. DSLA burned after every period verification",
          "dslaDepositByPeriod": "2. DSLA deposit by period to create SLA",
          "dslaPlatformReward": "3. DSLA rewarded to Stacktical team",
          "dslaUserReward": "4. DSLA rewarded to user calling the period verification"
        }
      },
      "ValueLocked(address,address,uint256)": {
        "details": "event to log modifications on the staking parameters",
        "params": {
          "amount": "3. -",
          "owner": "2. -",
          "sla": "1. -"
        }
      },
      "VerificationRewardDistributed(address,address,uint256,uint256,uint256,uint256)": {
        "details": "event to log a verifiation reward distributed",
        "params": {
          "burnedDSLA": "6. -",
          "messengerReward": "5. -",
          "platformReward": "4. -",
          "requester": "2. -",
          "sla": "1. The address of the created service level agreement contract",
          "userReward": "3. -"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DSLATokenAddress()": {
        "returns": {
          "_0": "address of DSLA token"
        }
      },
      "addAllowedTokens(address)": {
        "details": "only owner can call this function for non-registered tokens",
        "params": {
          "_tokenAddress": "1. address of the new allowed token"
        }
      },
      "constructor": {
        "params": {
          "_dslaTokenAddress": "1. DSLA Token"
        }
      },
      "createDToken(string,string,uint8)": {
        "details": "only registered SLA can call this function",
        "params": {
          "_decimals": "3. token decimals",
          "_name": "1. token name",
          "_symbol": "2. token symbol"
        }
      },
      "distributeVerificationRewards(address,address,uint256)": {
        "details": "only SLARegistry can call this function",
        "params": {
          "_periodId": "verified period id by verifier",
          "_sla": "address of sla",
          "_verificationRewardReceiver": "verifier who verified the periodId"
        }
      },
      "isAllowedToken(address)": {
        "params": {
          "_tokenAddress": "token address to check"
        },
        "returns": {
          "_0": "true if registered"
        }
      },
      "lockDSLAValue(address,address,uint256)": {
        "details": "only SLARegistry can call this function",
        "params": {
          "_periodIdsLength": "number of periods to lock",
          "_sla": "address of sla",
          "_slaOwner": "owner address of sla"
        }
      },
      "periodIsVerified(address,uint256)": {
        "params": {
          "_periodId": "period id",
          "_sla": "address of SLA"
        },
        "returns": {
          "_0": "verified or not"
        }
      },
      "registerStakedSla(address)": {
        "details": "only registered SLA can call this function",
        "params": {
          "_owner": "1. SLA contract to stake"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "returnLockedValue(address)": {
        "details": "only SLARegistry can call this function",
        "params": {
          "_sla": "address of SLA"
        }
      },
      "setSLARegistry()": {
        "details": "this function can only be called once"
      },
      "setStakingParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)": {
        "details": "only owner can call this function"
      },
      "slaWasStakedByUser(address,address)": {
        "details": "public view function that returns true if the _owner has staked on _sla",
        "params": {
          "_sla": "2. sla to check",
          "_user": "1. address to check"
        },
        "returns": {
          "_0": "bool, true if _sla was staked by _user"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_DSLAburnRate": {
        "details": "corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %"
      },
      "_burnDSLA": {
        "details": "burn DSLA after verification"
      },
      "_dslaBurnedByVerification": {
        "details": "DSLA burned after every period verification"
      },
      "_dslaDepositByPeriod": {
        "details": "DSLA deposit by period to create SLA"
      },
      "_dslaMessengerReward": {
        "details": "DSLA rewarded to the Messenger creator"
      },
      "_dslaPlatformReward": {
        "details": "DSLA rewarded to the foundation"
      },
      "_dslaUserReward": {
        "details": "DSLA rewarded to user calling the period verification"
      },
      "_maxLeverage": {
        "details": "max times of hedge leverage"
      },
      "_maxTokenLength": {
        "details": "max token length for allowedTokens array of Staking contracts"
      },
      "allowedTokens": {
        "details": "array with the allowed tokens addresses of the StakeRegistry"
      },
      "slaLockedValue": {
        "details": "(ownerAddress => slaAddress => LockedValue) stores the locked value by the staker"
      },
      "userStakedSlas": {
        "details": "(userAddress => (SLA address => registered)) with user staked SLAs to get tokenPool"
      }
    },
    "title": "StakeRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DSLATokenAddress()": {
        "notice": "external view function that returns DSLA token address"
      },
      "addAllowedTokens(address)": {
        "notice": "add a token to ve allowed for staking"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "createDToken(string,string,uint8)": {
        "notice": "function to create dTokens for staking"
      },
      "distributeVerificationRewards(address,address,uint256)": {
        "notice": "function to distribute verification rewards to verifier"
      },
      "getStakingParameters()": {
        "notice": "external view function that returns staking parameters"
      },
      "isAllowedToken(address)": {
        "notice": "function to check if the token is registered"
      },
      "lockDSLAValue(address,address,uint256)": {
        "notice": "function to lock DSLA"
      },
      "periodIsVerified(address,uint256)": {
        "notice": "external view function that checks the verification of period"
      },
      "registerStakedSla(address)": {
        "notice": "function to register the sending SLA contract as staked by _owner"
      },
      "returnLockedValue(address)": {
        "notice": "function to return locked tokens back to sla owner"
      },
      "setSLARegistry()": {
        "notice": "function to set the SLARegistry contract address"
      },
      "setStakingParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)": {
        "notice": "external function that sets staking parameters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8843,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8619,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5076,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_DSLATokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5079,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "slaRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISLARegistry)7467"
      },
      {
        "astId": 5083,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_DSLAburnRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5089,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "slaLockedValue",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(LockedValue)5074_storage)"
      },
      {
        "astId": 5093,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_dslaDepositByPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5097,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_dslaPlatformReward",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5101,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_dslaMessengerReward",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5105,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_dslaUserReward",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5109,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_dslaBurnedByVerification",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5113,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_maxTokenLength",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5117,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_maxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_uint64"
      },
      {
        "astId": 5121,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "_burnDSLA",
        "offset": 8,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5125,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5132,
        "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
        "label": "userStakedSlas",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISLARegistry)7467": {
        "encoding": "inplace",
        "label": "contract ISLARegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(LockedValue)5074_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakeRegistry.LockedValue)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedValue)5074_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(LockedValue)5074_storage": {
        "encoding": "inplace",
        "label": "struct StakeRegistry.LockedValue",
        "members": [
          {
            "astId": 5057,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "lockedValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5059,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "slaPeriodIdsLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5061,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "dslaDepositByPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5063,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "dslaPlatformReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5065,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "dslaMessengerReward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5067,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "dslaUserReward",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5069,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "dslaBurnedByVerification",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5073,
            "contract": "@dsla-protocol/core/contracts/StakeRegistry.sol:StakeRegistry",
            "label": "verifiedPeriods",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}