{
  "address": "0xE8eF95846EaEd3A4Bf1B5779C8A8240A7334ab82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messengerChainlinkOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messengerChainlinkToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "contract PeriodRegistry",
          "name": "_periodRegistry",
          "type": "address"
        },
        {
          "internalType": "contract StakeRegistry",
          "name": "_stakeRegistry",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_networkName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_lpName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lpSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_spName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_spSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "jobId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "JobIdModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "slaAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "chainlinkResponse",
          "type": "bytes32"
        }
      ],
      "name": "SLIReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestsCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "SLIRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_chainlinkResponse",
          "type": "uint256"
        }
      ],
      "name": "fulfillSLI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fulfillsCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "slaId",
          "type": "uint128"
        }
      ],
      "name": "lpSymbolSlaId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messengerPrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSLIRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "slaAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_slaAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_messengerOwnerApproval",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_callerAddress",
          "type": "address"
        }
      ],
      "name": "requestSLI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slaAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        }
      ],
      "name": "retryRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newJobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_feeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setChainlinkJobID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSLARegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slaRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "slaId",
          "type": "uint128"
        }
      ],
      "name": "spSymbolSlaId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6f16be4ba0a6f8c47b3d92bfc471ce6d304a004e08fdbfa003322707e5fd401",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0xE8eF95846EaEd3A4Bf1B5779C8A8240A7334ab82",
    "transactionIndex": 48,
    "gasUsed": "2319041",
    "logsBloom": "0x
    "blockHash": "0x5e5a2f69bbdeb9cb8d8d286ff4ab95e0f65606f291f38122e9e13dd995840db0",
    "transactionHash": "0xf6f16be4ba0a6f8c47b3d92bfc471ce6d304a004e08fdbfa003322707e5fd401",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 35192840,
        "transactionHash": "0xf6f16be4ba0a6f8c47b3d92bfc471ce6d304a004e08fdbfa003322707e5fd401",
        "address": "0xE8eF95846EaEd3A4Bf1B5779C8A8240A7334ab82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x5e5a2f69bbdeb9cb8d8d286ff4ab95e0f65606f291f38122e9e13dd995840db0"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 35192840,
        "transactionHash": "0xf6f16be4ba0a6f8c47b3d92bfc471ce6d304a004e08fdbfa003322707e5fd401",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6",
          "0x000000000000000000000000414b4b5a2a0e303b89360eda83598ab7702eae04"
        ],
        "data": "0x000000000000000000000000000000000000000000000000015f182571b63d4300000000000000000000000000000000000000000000000431d5497c61255e7f00000000000000000000000000000000000000000000004bdf80645a19f1326a00000000000000000000000000000000000000000000000430763156ef6f213c00000000000000000000000000000000000000000000004be0df7c7f8ba76fad",
        "logIndex": 145,
        "blockHash": "0x5e5a2f69bbdeb9cb8d8d286ff4ab95e0f65606f291f38122e9e13dd995840db0"
      }
    ],
    "blockNumber": 35192840,
    "cumulativeGasUsed": "8093281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF72AEF3E647778348640ab898E7F146f2b585350",
    "0xb0897686c545045afc77cf20ec7a532e3120e0f1",
    1,
    "0xd347dfD0A04FC13fCb175519Fad044E9d3277f10",
    "0xCe952191Fd641ec113bF56Fa6201Fc58bef5A752",
    "0x706f6c79676f6e76320000000000000000000000000000000000000000000000",
    "Staking Service Credit",
    "xDSLA-LP",
    "Staking Service Credit",
    "xDSLA"
  ],
  "solcInputHash": "b47b1da8947805f3b521fd14a441e1c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messengerChainlinkOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messengerChainlinkToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"contract PeriodRegistry\",\"name\":\"_periodRegistry\",\"type\":\"address\"},{\"internalType\":\"contract StakeRegistry\",\"name\":\"_stakeRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_networkName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_spName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_spSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"JobIdModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slaAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"chainlinkResponse\",\"type\":\"bytes32\"}],\"name\":\"SLIReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestsCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"SLIRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_chainlinkResponse\",\"type\":\"uint256\"}],\"name\":\"fulfillSLI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfillsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slaId\",\"type\":\"uint128\"}],\"name\":\"lpSymbolSlaId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messengerPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSLIRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"slaAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_messengerOwnerApproval\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_callerAddress\",\"type\":\"address\"}],\"name\":\"requestSLI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"}],\"name\":\"retryRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newJobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_feeMultiplier\",\"type\":\"uint256\"}],\"name\":\"setChainlinkJobID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSLARegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slaRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"slaId\",\"type\":\"uint128\"}],\"name\":\"spSymbolSlaId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fee()\":{\"details\":\"gets the fee amount of LINK token\"},\"fulfillsCounter()\":{\"details\":\"returns the fulfillsCounter\"},\"jobId()\":{\"details\":\"gets the chainlink job id\"},\"lpSymbolSlaId(uint128)\":{\"details\":\"returns the symbol of DSLA-LP token with slaId\"},\"messengerPrecision()\":{\"details\":\"gets the interfaces precision\"},\"oracle()\":{\"details\":\"gets the chainlink oracle contract address\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestsCounter()\":{\"details\":\"returns the requestsCounter\"},\"setSLARegistry()\":{\"details\":\"sets the SLARegistry contract address and can only be called once\"},\"slaRegistryAddress()\":{\"details\":\"gets the slaRegistryAddress\"},\"spSymbolSlaId(uint128)\":{\"details\":\"returns the symbol of DSLA-SP token with slaId\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"lpName\":{\"details\":\"returns the name of DSLA-LP token\"},\"lpSymbol\":{\"details\":\"returns the symbol of DSLA-LP token\"},\"spName\":{\"details\":\"returns the name of DSLA-SP token\"},\"spSymbol\":{\"details\":\"returns the symbol of DSLA-SP token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messengers/staking-parametric/StakingParametricOracle.sol\":\"StakingParametricOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@dsla-protocol/core/contracts/PeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\n\\n/**\\n * @title PeriodRegistry\\n * @notice PeriodRegistry is a contract for management of period definitions\\n */\\ncontract PeriodRegistry is IPeriodRegistry, Ownable {\\n    /// @notice struct to store the definition of a period\\n    struct PeriodDefinition {\\n        bool initialized;\\n        uint256[] starts;\\n        uint256[] ends;\\n    }\\n\\n    /// @notice (periodType=>PeriodDefinition) period definitions by period type\\n    /// @dev period types are hourly / weekly / biWeekly / monthly / yearly\\n    mapping(PeriodType => PeriodDefinition) public periodDefinitions;\\n\\n    /**\\n     * @notice event to log that a period is initialized\\n     * @param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     * @param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodInitialized(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @dev event to log that a period is modified\\n     * @param periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     * @param periodsAdded 2. amount of periods added\\n     */\\n    event PeriodModified(PeriodType periodType, uint256 periodsAdded);\\n\\n    /**\\n     * @notice External function for creating canonical service level agreements\\n     * @param _periodType 1. period type i.e. Hourly, Daily, Weekly, BiWeekly, Monthly, Yearly\\n     * @param _periodStarts 2. array of the starts of the period\\n     * @param _periodEnds 3. array of the ends of the period\\n     */\\n    function initializePeriod(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) external onlyOwner {\\n        _addPeriods(false, _periodType, _periodStarts, _periodEnds);\\n        emit PeriodInitialized(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @notice External function to add a new period definition\\n     * @dev only owner can call this function\\n     * @param _periodType type of period to add\\n     * @param _periodStarts array of the period starting timestamps to add\\n     * @param _periodEnds 3. array of the period ending timestamps to add\\n     */\\n    function addPeriodsToPeriodType(\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) external onlyOwner {\\n        _addPeriods(true, _periodType, _periodStarts, _periodEnds);\\n        emit PeriodModified(_periodType, _periodStarts.length);\\n    }\\n\\n    /**\\n     * @notice Internal function that add or update a period definition\\n     * @param _periodType type of period\\n     * @param _periodStarts array of the period starting timestamps\\n     * @param _periodEnds array of the period ending timestamps\\n     */\\n    function _addPeriods(\\n        bool _initialized,\\n        PeriodType _periodType,\\n        uint256[] memory _periodStarts,\\n        uint256[] memory _periodEnds\\n    ) internal {\\n        require(_periodStarts.length > 0, \\\"Period length can't be 0\\\");\\n        require(\\n            _periodStarts.length == _periodEnds.length,\\n            'Period length in start and end arrays should match'\\n        );\\n        PeriodDefinition storage periodDefinition = periodDefinitions[\\n            _periodType\\n        ];\\n        if (_initialized)\\n            require(\\n                periodDefinition.initialized,\\n                'Period was not initialized yet'\\n            );\\n        else\\n            require(\\n                !periodDefinition.initialized,\\n                'Period type already initialized'\\n            );\\n\\n        for (uint256 index = 0; index < _periodStarts.length; index++) {\\n            require(\\n                _periodStarts[index] < _periodEnds[index],\\n                'Start should be before end'\\n            );\\n            if (index < _periodStarts.length - 1) {\\n                require(\\n                    _periodStarts[index + 1] - _periodEnds[index] == 1,\\n                    'Start of a period should be 1 second after the end of the previous period'\\n                );\\n            }\\n            periodDefinition.starts.push(_periodStarts[index]);\\n            periodDefinition.ends.push(_periodEnds[index]);\\n        }\\n        periodDefinition.initialized = true;\\n    }\\n\\n    /**\\n     * @notice public function to get the start and end of a period\\n     * @param _periodType type of period to check\\n     * @param _periodId id of period to check\\n     * @return start starting timestamp\\n     * @return end ending timestamp\\n     */\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (uint256 start, uint256 end)\\n    {\\n        require(\\n            _periodId < periodDefinitions[_periodType].starts.length,\\n            'Invalid period id'\\n        );\\n        start = periodDefinitions[_periodType].starts[_periodId];\\n        end = periodDefinitions[_periodType].ends[_periodId];\\n    }\\n\\n    /**\\n     * @notice public function to check if the period definition is initialized by period type\\n     * @param _periodType type of period to check\\n     * @return initialized if initialized or not\\n     */\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        override\\n        returns (bool initialized)\\n    {\\n        initialized = periodDefinitions[_periodType].initialized;\\n    }\\n\\n    /**\\n     * @notice public function to check if a period id is valid i.e. it belongs to the added id array\\n     * @param _periodType type of period to check\\n     * @param _periodId id of period to check\\n     * @return valid if valid or invalid\\n     */\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        public\\n        view\\n        override\\n        returns (bool valid)\\n    {\\n        valid = periodDefinitions[_periodType].starts.length - 1 >= _periodId;\\n    }\\n\\n    /**\\n     * @notice public function to check if a period has finished\\n     * @param _periodType type of period to check\\n     * @param _periodId id of period to check\\n     * @return finished if finished or not\\n     */\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool finished)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            'Period data is not valid'\\n        );\\n        finished =\\n            periodDefinitions[_periodType].ends[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @notice public function to check if a period has started\\n     * @param _periodType type of period to check\\n     * @param _periodId id of period to check\\n     * @return started if started or not\\n     */\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool started)\\n    {\\n        require(\\n            isValidPeriod(_periodType, _periodId),\\n            'Period data is not valid'\\n        );\\n        started =\\n            periodDefinitions[_periodType].starts[_periodId] < block.timestamp;\\n    }\\n\\n    /**\\n     * @notice public function to get the definitions of period for all period types\\n     * @return array of period definitions\\n     */\\n    function getPeriodDefinitions()\\n        public\\n        view\\n        returns (PeriodDefinition[] memory)\\n    {\\n        // 6 period types\\n        PeriodDefinition[] memory periodDefinition = new PeriodDefinition[](6);\\n        periodDefinition[0] = periodDefinitions[PeriodType.Hourly];\\n        periodDefinition[1] = periodDefinitions[PeriodType.Daily];\\n        periodDefinition[2] = periodDefinitions[PeriodType.Weekly];\\n        periodDefinition[3] = periodDefinitions[PeriodType.BiWeekly];\\n        periodDefinition[4] = periodDefinitions[PeriodType.Monthly];\\n        periodDefinition[5] = periodDefinitions[PeriodType.Yearly];\\n        return periodDefinition;\\n    }\\n}\\n\",\"keccak256\":\"0x9901538e0376ce698ac6bf6be72fc776e3d91a7be4b38502141ecce5be1ed7a2\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/SLA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/ISLORegistry.sol';\\nimport './Staking.sol';\\n\\n/**\\n @title Service Level Agreement Contract\\n */\\ncontract SLA is Staking {\\n    enum Status {\\n        NotVerified,\\n        Respected,\\n        NotRespected\\n    }\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    string public ipfsHash;\\n    ISLARegistry private _slaRegistry;\\n    ISLORegistry private immutable _sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    IPeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    uint256[] public severity;\\n    uint256[] public penalty;\\n\\n    bool public terminateContract = false;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    /// @notice An event that is emitted when creating a new SLI\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    /// @notice An event that is emitted when staking in User or Provider Pool\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount,\\n        Position position\\n    );\\n    /// @notice An event that is emitted when withdrawing from Provider Pool\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when withdrawing from User Pool\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when toggles termination\\n    event ToggleTermination(bool termination);\\n\\n    /// @dev Modifier ensuring that certain function can only be called by Messenger\\n    modifier onlyMessenger() {\\n        require(msg.sender == messengerAddress, 'not messenger');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        IPeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        uint256[] memory _severity,\\n        uint256[] memory _penalty,\\n        uint64 _leverage\\n    )\\n        Staking(\\n            ISLARegistry(msg.sender),\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner,\\n            _messengerAddress\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        _slaRegistry = ISLARegistry(msg.sender);\\n        _sloRegistry = ISLORegistry(_slaRegistry.sloRegistry());\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        severity = _severity;\\n        penalty = _penalty;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    /**\\n     * @notice External function that registers new SLI\\n     * @param _sli sli value to register\\n     * @param _periodId period id of new sli\\n     */\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        require(_periodId == nextVerifiablePeriod, 'invalid period id');\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n\\n        uint256 deviation = _sloRegistry.getDeviation(\\n            _sli,\\n            address(this),\\n            severity,\\n            penalty\\n        );\\n\\n        if (_sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            _setProviderReward(_periodId, deviation);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUserReward(_periodId, deviation);\\n        }\\n    }\\n\\n    /**\\n     @notice External view function to see if a period id is allowed or not\\n     @param _periodId period id to check\\n     @return bool allowed or not\\n     */\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        return _periodId >= initialPeriodId && _periodId <= finalPeriodId;\\n    }\\n\\n    /**\\n     * @notice Public view function to check if the contract is finished\\n     * @dev finish condition = should pass last verified period and final period should not be verified.\\n     * @return Bool whether finished or not\\n     */\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n        return ((block.timestamp >= endOfLastValidPeriod &&\\n            periodSLIs[finalPeriodId].status != Status.NotVerified) ||\\n            terminateContract);\\n    }\\n\\n    /**\\n     * @notice External function to stake tokens in User or Provider Pools\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     * @param _position User or Provider pool\\n     */\\n    function stakeTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        Position _position\\n    ) external {\\n        require(!contractFinished(), 'This SLA has finished.');\\n\\n        require(_amount > 0, 'Stake must be greater than 0.');\\n\\n        _stake(_tokenAddress, nextVerifiablePeriod, _amount, _position);\\n\\n        emit Stake(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount,\\n            _position\\n        );\\n\\n        IStakeRegistry(_slaRegistry.stakeRegistry()).registerStakedSla(\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from Provider Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawProviderTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from User Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawUserTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    function toggleTermination() external onlyOwner {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n\\n        require(\\n            block.timestamp >= endOfLastValidPeriod,\\n            'This SLA has not finished.'\\n        );\\n\\n        terminateContract = !terminateContract;\\n\\n        emit ToggleTermination(terminateContract);\\n    }\\n}\\n\",\"keccak256\":\"0x1dd3de12f41a12456884c2787e73de642919a0ea34a160dede3bfbc570ccfda1\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/StakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './SLA.sol';\\nimport './dToken.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\n\\n/**\\n * @title StakeRegistry\\n * @dev StakeRegistry is a contract to register the staking activity of the platform, along\\n with controlling certain admin privileged parameters\\n */\\ncontract StakeRegistry is IStakeRegistry, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct LockedValue {\\n        uint256 lockedValue;\\n        uint256 slaPeriodIdsLength;\\n        uint256 dslaDepositByPeriod;\\n        uint256 dslaPlatformReward;\\n        uint256 dslaMessengerReward;\\n        uint256 dslaUserReward;\\n        uint256 dslaBurnedByVerification;\\n        mapping(uint256 => bool) verifiedPeriods;\\n    }\\n\\n    address private _DSLATokenAddress;\\n    ISLARegistry public slaRegistry;\\n\\n    //______ onlyOwner modifiable parameters ______\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = DSLAburnRate/1000 %\\n    uint256 private _DSLAburnRate = 3;\\n    /// @dev (ownerAddress => slaAddress => LockedValue) stores the locked value by the staker\\n    mapping(address => LockedValue) public slaLockedValue;\\n    /// @dev DSLA deposit by period to create SLA\\n    uint256 private _dslaDepositByPeriod = 1000 ether;\\n    /// @dev DSLA rewarded to the foundation\\n    uint256 private _dslaPlatformReward = 250 ether;\\n    /// @dev DSLA rewarded to the Messenger creator\\n    uint256 private _dslaMessengerReward = 250 ether;\\n    /// @dev DSLA rewarded to user calling the period verification\\n    uint256 private _dslaUserReward = 250 ether;\\n    /// @dev DSLA burned after every period verification\\n    uint256 private _dslaBurnedByVerification = 250 ether;\\n    /// @dev max token length for allowedTokens array of Staking contracts\\n    uint256 private _maxTokenLength = 1;\\n    /// @dev max times of hedge leverage\\n    uint64 private _maxLeverage = 100;\\n    /// @dev burn DSLA after verification\\n    bool private _burnDSLA = true;\\n\\n    /// @dev array with the allowed tokens addresses of the StakeRegistry\\n    address[] public allowedTokens;\\n\\n    /// @dev (userAddress => (SLA address => registered)) with user staked SLAs to get tokenPool\\n    mapping(address => mapping(address => bool)) public userStakedSlas;\\n\\n    /**\\n     * @dev event to log a verifiation reward distributed\\n     * @param sla 1. The address of the created service level agreement contract\\n     * @param requester 2. -\\n     * @param userReward 3. -\\n     * @param platformReward 4. -\\n     * @param messengerReward 5. -\\n     * @param burnedDSLA 6. -\\n     */\\n    event VerificationRewardDistributed(\\n        address indexed sla,\\n        address indexed requester,\\n        uint256 userReward,\\n        uint256 platformReward,\\n        uint256 messengerReward,\\n        uint256 burnedDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param DSLAburnRate 1. (DSLAburnRate/1000)% of DSLA to be burned after a reward/compensation is paid\\n     * @param dslaDepositByPeriod 2. DSLA deposit by period to create SLA\\n     * @param dslaPlatformReward 3. DSLA rewarded to Stacktical team\\n     * @param dslaUserReward 4. DSLA rewarded to user calling the period verification\\n     * @param dslaBurnedByVerification 5. DSLA burned after every period verification\\n     */\\n    event StakingParametersModified(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param sla 1. -\\n     * @param owner 2. -\\n     * @param amount 3. -\\n     */\\n\\n    event LockedValueReturned(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param dTokenAddress 1. -\\n     * @param sla 2. -\\n     * @param name 3. -\\n     * @param symbol 4. -\\n     */\\n    event DTokenCreated(\\n        address indexed dTokenAddress,\\n        address indexed sla,\\n        string name,\\n        string symbol\\n    );\\n\\n    /**\\n     * @dev event to log modifications on the staking parameters\\n     * @param sla 1. -\\n     * @param owner 2. -\\n     * @param amount 3. -\\n     */\\n    event ValueLocked(\\n        address indexed sla,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /// @dev Throws if called by any address other than the SLARegistry contract or Chainlink Oracle.\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == address(slaRegistry),\\n            'Can only be called by SLARegistry'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _dslaTokenAddress 1. DSLA Token\\n     */\\n    constructor(address _dslaTokenAddress) {\\n        require(\\n            _dslaTokenAddress != address(0x0),\\n            'invalid DSLA token address'\\n        );\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward +\\n                    _dslaMessengerReward +\\n                    _dslaUserReward +\\n                    _dslaBurnedByVerification,\\n            'Staking parameters should match on summation'\\n        );\\n        _DSLATokenAddress = _dslaTokenAddress;\\n        allowedTokens.push(_dslaTokenAddress);\\n    }\\n\\n    /**\\n     * @notice function to set the SLARegistry contract address\\n     * @dev this function can only be called once\\n     */\\n    function setSLARegistry() external override {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        slaRegistry = ISLARegistry(msg.sender);\\n    }\\n\\n    /**\\n     * @notice add a token to ve allowed for staking\\n     * @dev only owner can call this function for non-registered tokens\\n     * @param _tokenAddress 1. address of the new allowed token\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        require(\\n            !isAllowedToken(_tokenAddress),\\n            'This token has been allowed already.'\\n        );\\n        allowedTokens.push(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice function to check if the token is registered\\n     * @param _tokenAddress token address to check\\n     * @return true if registered\\n     */\\n    function isAllowedToken(address _tokenAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev public view function that returns true if the _owner has staked on _sla\\n     * @param _user 1. address to check\\n     * @param _sla 2. sla to check\\n     * @return bool, true if _sla was staked by _user\\n     */\\n\\n    function slaWasStakedByUser(address _user, address _sla)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return userStakedSlas[_user][_sla];\\n    }\\n\\n    /**\\n     * @notice function to register the sending SLA contract as staked by _owner\\n     * @dev only registered SLA can call this function\\n     * @param _owner 1. SLA contract to stake\\n     */\\n    function registerStakedSla(address _owner)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        if (!slaWasStakedByUser(_owner, msg.sender)) {\\n            userStakedSlas[_owner][msg.sender] = true;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice function to create dTokens for staking\\n     * @dev only registered SLA can call this function\\n     * @param _name 1. token name\\n     * @param _symbol 2. token symbol\\n     * @param _decimals 3. token decimals\\n     */\\n    function createDToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external override returns (address) {\\n        require(\\n            slaRegistry.isRegisteredSLA(msg.sender),\\n            'Only for registered SLAs'\\n        );\\n        dToken newDToken = new dToken(_name, _symbol, _decimals);\\n        newDToken.grantRole(newDToken.MINTER_ROLE(), msg.sender);\\n        emit DTokenCreated(address(newDToken), msg.sender, _name, _symbol);\\n        return address(newDToken);\\n    }\\n\\n    /**\\n     * @notice function to lock DSLA\\n     * @dev only SLARegistry can call this function\\n     * @param _slaOwner owner address of sla\\n     * @param _sla address of sla\\n     * @param _periodIdsLength number of periods to lock\\n     */\\n    function lockDSLAValue(\\n        address _slaOwner,\\n        address _sla,\\n        uint256 _periodIdsLength\\n    ) external override onlySLARegistry nonReentrant {\\n        uint256 lockedValue = _dslaDepositByPeriod * _periodIdsLength;\\n        IERC20(_DSLATokenAddress).safeTransferFrom(\\n            _slaOwner,\\n            address(this),\\n            lockedValue\\n        );\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        _lockedValue.lockedValue = lockedValue;\\n        _lockedValue.slaPeriodIdsLength = _periodIdsLength;\\n        _lockedValue.dslaDepositByPeriod = _dslaDepositByPeriod;\\n        _lockedValue.dslaPlatformReward = _dslaPlatformReward;\\n        _lockedValue.dslaMessengerReward = _dslaMessengerReward;\\n        _lockedValue.dslaUserReward = _dslaUserReward;\\n        _lockedValue.dslaBurnedByVerification = _dslaBurnedByVerification;\\n        emit ValueLocked(_sla, _slaOwner, lockedValue);\\n    }\\n\\n    /**\\n     * @notice function to distribute verification rewards to verifier\\n     * @dev only SLARegistry can call this function\\n     * @param _sla address of sla\\n     * @param _verificationRewardReceiver verifier who verified the periodId\\n     * @param _periodId verified period id by verifier\\n     */\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external override onlySLARegistry nonReentrant {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        require(\\n            !_lockedValue.verifiedPeriods[_periodId],\\n            'Period rewards already distributed'\\n        );\\n        _lockedValue.verifiedPeriods[_periodId] = true;\\n        _lockedValue.lockedValue -= _lockedValue.dslaDepositByPeriod;\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward\\n        );\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            owner(),\\n            _lockedValue.dslaPlatformReward\\n        );\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            IMessenger(SLA(_sla).messengerAddress()).owner(),\\n            _lockedValue.dslaMessengerReward\\n        );\\n        if (_burnDSLA) {\\n            (bool success, ) = _DSLATokenAddress.call(\\n                abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes('burn(uint256)'))),\\n                    _lockedValue.dslaBurnedByVerification\\n                )\\n            );\\n            require(success, 'burn process failed');\\n        }\\n        emit VerificationRewardDistributed(\\n            _sla,\\n            _verificationRewardReceiver,\\n            _lockedValue.dslaUserReward,\\n            _lockedValue.dslaPlatformReward,\\n            _lockedValue.dslaMessengerReward,\\n            _lockedValue.dslaBurnedByVerification\\n        );\\n    }\\n\\n    /**\\n     * @notice function to return locked tokens back to sla owner\\n     * @dev only SLARegistry can call this function\\n     * @param _sla address of SLA\\n     */\\n    function returnLockedValue(address _sla)\\n        external\\n        override\\n        onlySLARegistry\\n        nonReentrant\\n    {\\n        LockedValue storage _lockedValue = slaLockedValue[_sla];\\n        uint256 remainingBalance = _lockedValue.lockedValue;\\n        require(remainingBalance > 0, 'locked value is empty');\\n        _lockedValue.lockedValue = 0;\\n        IERC20(_DSLATokenAddress).safeTransfer(\\n            SLA(_sla).owner(),\\n            remainingBalance\\n        );\\n        emit LockedValueReturned(_sla, SLA(_sla).owner(), remainingBalance);\\n    }\\n\\n    //_______ OnlyOwner functions _______\\n    /**\\n     * @notice external function that sets staking parameters\\n     * @dev only owner can call this function\\n     */\\n    function setStakingParameters(\\n        uint256 DSLAburnRate,\\n        uint256 dslaDepositByPeriod,\\n        uint256 dslaPlatformReward,\\n        uint256 dslaMessengerReward,\\n        uint256 dslaUserReward,\\n        uint256 dslaBurnedByVerification,\\n        uint256 maxTokenLength,\\n        uint64 maxLeverage,\\n        bool burnDSLA\\n    ) external onlyOwner {\\n        _DSLAburnRate = DSLAburnRate;\\n        _dslaDepositByPeriod = dslaDepositByPeriod;\\n        _dslaPlatformReward = dslaPlatformReward;\\n        _dslaMessengerReward = dslaMessengerReward;\\n        _dslaUserReward = dslaUserReward;\\n        _dslaBurnedByVerification = dslaBurnedByVerification;\\n        _maxTokenLength = maxTokenLength;\\n        _maxLeverage = maxLeverage;\\n        _burnDSLA = burnDSLA;\\n        require(\\n            _dslaDepositByPeriod ==\\n                _dslaPlatformReward +\\n                    _dslaMessengerReward +\\n                    _dslaUserReward +\\n                    _dslaBurnedByVerification,\\n            'Staking parameters should match on summation'\\n        );\\n        emit StakingParametersModified(\\n            DSLAburnRate,\\n            dslaDepositByPeriod,\\n            dslaPlatformReward,\\n            dslaMessengerReward,\\n            dslaUserReward,\\n            dslaBurnedByVerification,\\n            maxTokenLength,\\n            maxLeverage,\\n            burnDSLA\\n        );\\n    }\\n\\n    /**\\n     * @notice external view function that returns staking parameters\\n     */\\n    function getStakingParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        )\\n    {\\n        DSLAburnRate = _DSLAburnRate;\\n        dslaDepositByPeriod = _dslaDepositByPeriod;\\n        dslaPlatformReward = _dslaPlatformReward;\\n        dslaMessengerReward = _dslaMessengerReward;\\n        dslaUserReward = _dslaUserReward;\\n        dslaBurnedByVerification = _dslaBurnedByVerification;\\n        maxTokenLength = _maxTokenLength;\\n        maxLeverage = _maxLeverage;\\n        burnDSLA = _burnDSLA;\\n    }\\n\\n    /**\\n     * @notice external view function that checks the verification of period\\n     * @param _sla address of SLA\\n     * @param _periodId period id\\n     * @return verified or not\\n     */\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return slaLockedValue[_sla].verifiedPeriods[_periodId];\\n    }\\n\\n    /**\\n     * @notice external view function that returns DSLA token address\\n     * @return address of DSLA token\\n     */\\n    function DSLATokenAddress() external view override returns (address) {\\n        return _DSLATokenAddress;\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakeRegistry, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n}\\n\",\"keccak256\":\"0xce78ba6fd9549e5427a3435524f69e11a45c1c99e7f1fd781356c079453fa502\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/IERC20Query.sol';\\nimport './dToken.sol';\\n\\n/**\\n * @title Staking\\n * @notice Staking of user and provider pool rewards\\n */\\ncontract Staking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Position of staking\\n    /// @dev OK => Provider Pool (LONG), KO => User Pool (SHORT)\\n    enum Position {\\n        OK,\\n        KO\\n    }\\n\\n    /// @dev StakeRegistry contract\\n    IStakeRegistry private _stakeRegistry;\\n\\n    /// @dev SLARegistry contract\\n    IPeriodRegistry internal immutable _periodRegistry;\\n\\n    /// @dev DSLA token address to burn fees\\n    address private immutable _dslaTokenAddress;\\n    /// @dev messenger address\\n    address public immutable messengerAddress;\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providersPool;\\n\\n    /// @dev (userAddress=>uint256) provider staking activity\\n    mapping(address => uint256) public lastProviderStake;\\n\\n    /// @dev (tokenAddress=>uint256) user staking\\n    mapping(address => uint256) public usersPool;\\n\\n    /// @dev (userAddress=>uint256) user staking activity\\n    mapping(address => uint256) public lastUserStake;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => dToken) public duTokenRegistry;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => dToken) public dpTokenRegistry;\\n\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n\\n    /// @dev number of stakers\\n    uint256 public stakersNum;\\n\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    /// @dev claiming fees when a user claim tokens, base 10000\\n    uint16 private constant ownerRewardsRate = 30; // 0.3%, base 10000\\n    uint16 private constant protocolRewardsRate = 15; // 0.15%, base 10000\\n    uint16 private constant rewardsCapRate = 2500; // 25%, base 10000\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token), 'This token is not allowed.');\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelistedContract) {\\n            require(whitelist[msg.sender], 'not whitelisted');\\n        }\\n        _;\\n    }\\n\\n    /// @notice An event that emitted when generating provider rewards\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    /// @notice An event that emitted when generating user rewards\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 userStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    /// @notice An event that emitted when owner adds new dTokens\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param slaRegistry_ SLARegistry address\\n     * @param whitelistedContract_ Declare if contract is whitelisted\\n     * @param slaID_ ID of SLA\\n     * @param leverage_ Leverage of reward\\n     * @param contractOwner_ SLA Owner address\\n     * @param messengerAddress_ Messenger Address\\n     */\\n    constructor(\\n        ISLARegistry slaRegistry_,\\n        bool whitelistedContract_,\\n        uint128 slaID_,\\n        uint64 leverage_,\\n        address contractOwner_,\\n        address messengerAddress_\\n    ) {\\n        require(contractOwner_ != address(0x0), 'invalid owner address');\\n        require(messengerAddress_ != address(0x0), 'invalid messenger address');\\n        _stakeRegistry = IStakeRegistry(slaRegistry_.stakeRegistry());\\n        _periodRegistry = IPeriodRegistry(slaRegistry_.periodRegistry());\\n        whitelistedContract = whitelistedContract_;\\n        (\\n            uint256 _DSLAburnRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint64 _maxLeverage,\\n\\n        ) = _stakeRegistry.getStakingParameters();\\n        _dslaTokenAddress = _stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[contractOwner_] = true;\\n        slaID = slaID_;\\n        require(\\n            leverage_ <= _maxLeverage && leverage_ >= 1,\\n            'incorrect leverage'\\n        );\\n        leverage = leverage_;\\n        messengerAddress = messengerAddress_;\\n    }\\n\\n    /**\\n     * @notice Add multiple addresses to whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to whitelist\\n     */\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (!whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove multiple addresses from whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to remove\\n     */\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to allowedTokens list\\n     * @dev It creates dpToken(Provider) and duToken(User) that represents the position.\\n            only owner can call this function\\n     * @param _tokenAddress Token address to allow\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, , ) = _stakeRegistry\\n            .getStakingParameters();\\n\\n        require(\\n            !isAllowedToken(_tokenAddress),\\n            'This token has been allowed already.'\\n        );\\n\\n        require(\\n            _stakeRegistry.isAllowedToken(_tokenAddress),\\n            'This token is not allowed.'\\n        );\\n        allowedTokens.push(_tokenAddress);\\n\\n        require(maxTokenLength >= allowedTokens.length, 'max token length');\\n\\n        string memory duTokenName = IMessenger(messengerAddress).spName();\\n        string memory duTokenSymbol = IMessenger(messengerAddress)\\n            .spSymbolSlaId(slaID);\\n        string memory dpTokenName = IMessenger(messengerAddress).lpName();\\n        string memory dpTokenSymbol = IMessenger(messengerAddress)\\n            .lpSymbolSlaId(slaID);\\n\\n        uint8 decimals = IERC20Query(_tokenAddress).decimals();\\n\\n        dToken duToken = dToken(\\n            _stakeRegistry.createDToken(duTokenName, duTokenSymbol, decimals)\\n        );\\n\\n        dToken dpToken = dToken(\\n            _stakeRegistry.createDToken(dpTokenName, dpTokenSymbol, decimals)\\n        );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenSymbol,\\n            address(duToken),\\n            duTokenName,\\n            duTokenSymbol\\n        );\\n    }\\n\\n    /**\\n     * @notice Stake allowed assets in User or Provider pools until next period\\n     * @param _tokenAddress Address of token to stake\\n     * @param _nextVerifiablePeriod Next verifiable PeriodId\\n     * @param _amount Amount of tokens to stake\\n     * @param _position Staking position, OK or KO\\n     */\\n    function _stake(\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        uint256 _amount,\\n        Position _position\\n    ) internal onlyAllowedToken(_tokenAddress) onlyWhitelisted nonReentrant {\\n        IERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // DSLA-SP proofs of SLA Position\\n        if (_position == Position.KO) {\\n            require(\\n                (usersPool[_tokenAddress] + _amount) * leverage <=\\n                    providersPool[_tokenAddress],\\n                'Stake exceeds leveraged cap.'\\n            );\\n\\n            dToken duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // If there are no minted tokens, then mint them 1:1\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                duToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / usersPool[_tokenAddress]\\n                );\\n            }\\n            usersPool[_tokenAddress] += _amount;\\n            lastUserStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        // DSLA-LP proofs of SLA Position\\n        if (_position == Position.OK) {\\n            dToken dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                dpToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / providersPool[_tokenAddress]\\n                );\\n            }\\n            providersPool[_tokenAddress] += _amount;\\n            lastProviderStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        if (!registeredStakers[msg.sender]) {\\n            registeredStakers[msg.sender] = true;\\n            stakersNum++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of provider pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setProviderReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 reward = (providersPool[tokenAddress] * _rewardPercentage) /\\n                (leverage * _precision);\\n\\n            // Reward must be less than 25% of usersPool to ensure payout at all time\\n            if (\\n                reward > (usersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                reward =\\n                    (usersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            usersPool[tokenAddress] -= reward;\\n            providersPool[tokenAddress] += reward;\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of user pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setUserReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 compensation = (usersPool[tokenAddress] *\\n                leverage *\\n                _rewardPercentage) / _precision;\\n\\n            // Compensation must be less than 25% of providersPool to ensure payout at all time\\n            if (\\n                compensation >\\n                (providersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                compensation =\\n                    (providersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            providersPool[tokenAddress] -= compensation;\\n            usersPool[tokenAddress] += compensation;\\n\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersPool[tokenAddress],\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from Provider Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastProviderStake[msg.sender] < _nextVerifiablePeriod,\\n                'Provider lock-up until the next verification.'\\n            );\\n\\n            // Allow provider withdrawal as long as the provider pool exceeds the leveraged user pool\\n            require(\\n                providersPool[_tokenAddress] - _amount >=\\n                    usersPool[_tokenAddress] * leverage,\\n                'Withdrawal exceeds leveraged cap.'\\n            );\\n        }\\n\\n        dToken dpToken = dpTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the Provider Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        dpToken.burnFrom(\\n            msg.sender,\\n            (_amount * dpToken.totalSupply()) / providersPool[_tokenAddress]\\n        );\\n        providersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from User Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawUserTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastUserStake[msg.sender] < _nextVerifiablePeriod,\\n                'User lock-up until the next verification.'\\n            );\\n        }\\n\\n        dToken duToken = duTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the User Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        duToken.burnFrom(\\n            msg.sender,\\n            (_amount * duToken.totalSupply()) / usersPool[_tokenAddress]\\n        );\\n        usersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Distribute rewards to owner and protocol when user claims\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @return outstandingAmount\\n     */\\n    function _distributeClaimingRewards(uint256 _amount, address _tokenAddress)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 slaOwnerRewards = (_amount * ownerRewardsRate) / 10000;\\n        uint256 protocolRewards = (_amount * protocolRewardsRate) / 10000;\\n        IERC20(_tokenAddress).safeTransfer(owner(), slaOwnerRewards);\\n        IERC20(_tokenAddress).safeTransfer(\\n            _stakeRegistry.owner(),\\n            protocolRewards\\n        );\\n        return _amount - slaOwnerRewards - protocolRewards;\\n    }\\n\\n    /**\\n     * @notice Get number of allowed tokens\\n     * @return Number of allowed tokens\\n     */\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    /**\\n     * @notice External view function that returns the number of stakers\\n     * @return Number of stakers\\n     */\\n    function getStakersLength() external view returns (uint256) {\\n        return stakersNum;\\n    }\\n\\n    /**\\n     * @notice Check if the token is allowed or not\\n     * @param _tokenAddress Token address to check allowance\\n     * @return isAllowed\\n     */\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe37dbff42cb0cf45f102ce0f1026d84e20736ce3db22bbf443722d5a9cbfc612\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/dToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\n\\ncontract dToken is ERC20PresetMinterPauser {\\n    uint8 _decimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals_\\n    ) ERC20PresetMinterPauser(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x8c905b915de337f5fd07e2929f5c20f958a123242f1945c6731181a763e5c5e0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IERC20Query.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IERC20Query {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x0e1abfa7f467437e9a5f1c97a512b8314689cb2fda6f0d8bf9fe102958d42acb\",\"license\":\"GPL-2.0-or-later\"},\"@dsla-protocol/core/contracts/interfaces/IMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when created a new chainlink request\\n     * @param caller 1. Requester's address\\n     * @param requestsCounter 2. total count of requests\\n     * @param requestId 3. id of the Chainlink request\\n     */\\n    event SLIRequested(\\n        address indexed caller,\\n        uint256 requestsCounter,\\n        bytes32 requestId\\n    );\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. period id\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev event emitted when updating Chainlink Job ID\\n     * @param owner 1. Oracle Owner\\n     * @param jobId 2. Updated job id\\n     * @param fee 3. Chainlink request fee\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param answer response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 answer) external virtual;\\n\\n    /**\\n     * @dev gets the interfaces precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the name of DSLA-LP token\\n     */\\n    function lpName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token\\n     */\\n    function lpSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token with slaId\\n     */\\n    function lpSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    /**\\n     * @dev returns the name of DSLA-SP token\\n     */\\n    function spName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token\\n     */\\n    function spSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token with slaId\\n     */\\n    function spSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        virtual;\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        virtual;\\n}\\n\",\"keccak256\":\"0x363b4c32a70e465f35a939daa788a719cb2ac755764d76fd34222849ea22fbb0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IPeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IPeriodRegistry {\\n    enum PeriodType {\\n        Hourly,\\n        Daily,\\n        Weekly,\\n        BiWeekly,\\n        Monthly,\\n        Yearly\\n    }\\n\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xa3b4321be33c6a0f8dd7d1cebc53fb9755fb970e4b0e6048ec03cc84aa09a55d\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLARegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLARegistry {\\n    function sloRegistry() external view returns (address);\\n\\n    function periodRegistry() external view returns (address);\\n\\n    function messengerRegistry() external view returns (address);\\n\\n    function stakeRegistry() external view returns (address);\\n\\n    function isRegisteredSLA(address _slaAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44bc345be784ff06c5a74d93a519a479c12eab73235016ebeaa7318026f749b8\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLORegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLORegistry {\\n    function getDeviation(\\n        uint256 _sli,\\n        address _slaAddress,\\n        uint256[] calldata _severity,\\n        uint256[] calldata _penalty\\n    ) external view returns (uint256);\\n\\n    function isRespected(uint256 _value, address _slaAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x67e3451bac1e5e7b8271d4299f5c81f0bd119b82a8177635b5ce5bb9db154cb7\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IStakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IStakeRegistry {\\n    function registerStakedSla(address _owner) external returns (bool);\\n\\n    function setSLARegistry() external;\\n\\n    function lockDSLAValue(\\n        address slaOwner_,\\n        address sla_,\\n        uint256 periodIdsLength_\\n    ) external;\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        );\\n\\n    function DSLATokenAddress() external view returns (address);\\n\\n    function isAllowedToken(address tokenAddress_) external view returns (bool);\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function returnLockedValue(address sla_) external;\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external;\\n\\n    function createDToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 decimals\\n    ) external returns (address);\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa0828e4f42d721cb759a2400ca5ff5f132e0a2c92e9b99b1ddcd4d4cfeb23d4c\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nlibrary StringUtils {\\n    function addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 _bytes = bytes32(uint256(uint160(_address)));\\n        bytes memory HEX = '0123456789abcdef';\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function bytes32ToStr(bytes32 _bytes32)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function bytesToUint(bytes memory b)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (uint8(b[i]) >= 48 && uint8(b[i]) <= 57) {\\n                result = result * 10 + (uint8(b[i]) - 48);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function uintToStr(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function stringFloatToUnit(bytes memory value)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        uint256 i;\\n        uint256 counterBeforeDot;\\n        uint256 counterAfterDot;\\n        result = 0;\\n        uint256 totNum = value.length;\\n        totNum--;\\n        bool hasDot = false;\\n\\n        for (i = 0; i < value.length; i++) {\\n            uint8 c = uint8(value[i]);\\n\\n            if (c >= 48 && c <= 57) {\\n                result = result * 10 + (c - 48);\\n                counterBeforeDot++;\\n                totNum--;\\n            }\\n\\n            if (c == 46) {\\n                hasDot = true;\\n                break;\\n            }\\n        }\\n\\n        if (hasDot) {\\n            for (uint256 j = 0; j < 18; j++) {\\n                uint8 m = uint8(value[counterBeforeDot + 1 + j]);\\n                if (m >= 48 && m <= 57) {\\n                    result = result * 10 + (m - 48);\\n                    counterAfterDot++;\\n                    totNum--;\\n                }\\n\\n                if (totNum == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n        if (counterAfterDot <= 18) {\\n            uint256 addNum = 18 - counterAfterDot;\\n            result = result * 10**addNum;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd6d52936016200f6809902f611b8fa6d348db88c6d9ff07860cb6b2c5fc2c8\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/messengers/staking-parametric/StakingParametricOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\n\\nimport '@dsla-protocol/core/contracts/interfaces/IMessenger.sol';\\nimport '@dsla-protocol/core/contracts/SLA.sol';\\nimport '@dsla-protocol/core/contracts/PeriodRegistry.sol';\\nimport '@dsla-protocol/core/contracts/libraries/StringUtils.sol';\\nimport '@dsla-protocol/core/contracts/StakeRegistry.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\ncontract StakingParametricOracle is\\n    ChainlinkClient,\\n    IMessenger,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for ERC20;\\n    using Chainlink for Chainlink.Request;\\n\\n    mapping(bytes32 => SLIRequest) public requestIdToSLIRequest;\\n    bytes32[] public requests;\\n    address private _slaRegistryAddress;\\n    address private immutable _oracle;\\n    bytes32 private _jobId;\\n    uint256 private constant _baseFee = 0.1 ether;\\n    uint256 private _fee;\\n    uint256 private constant _messengerPrecision = 10**3;\\n\\n    uint256 private _requestsCounter;\\n    uint256 private _fulfillsCounter;\\n    PeriodRegistry private periodRegistry;\\n    StakeRegistry private stakeRegistry;\\n    bool private retry = false;\\n    bytes32 public networkName;\\n\\n    string public override lpName;\\n    string public override lpSymbol;\\n\\n    string public override spName;\\n    string public override spSymbol;\\n\\n    constructor(\\n        address _messengerChainlinkOracle,\\n        address _messengerChainlinkToken,\\n        uint256 _feeMultiplier,\\n        PeriodRegistry _periodRegistry,\\n        StakeRegistry _stakeRegistry,\\n        bytes32 _networkName,\\n        string memory _lpName,\\n        string memory _lpSymbol,\\n        string memory _spName,\\n        string memory _spSymbol\\n    ) {\\n        setChainlinkToken(_messengerChainlinkToken);\\n        _oracle = _messengerChainlinkOracle;\\n        _fee = _feeMultiplier * _baseFee;\\n        periodRegistry = _periodRegistry;\\n        stakeRegistry = _stakeRegistry;\\n        networkName = _networkName;\\n        lpName = _lpName;\\n        lpSymbol = _lpSymbol;\\n        spName = _spName;\\n        spSymbol = _spSymbol;\\n    }\\n\\n    modifier onlySLARegistry() {\\n        if (!retry) {\\n            require(\\n                msg.sender == _slaRegistryAddress,\\n                'Can only be called by SLARegistry'\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier retryLock() {\\n        retry = true;\\n        _;\\n        retry = false;\\n    }\\n\\n    function setSLARegistry() public override {\\n        require(\\n            _slaRegistryAddress == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n\\n        _slaRegistryAddress = msg.sender;\\n    }\\n\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _messengerOwnerApproval,\\n        address _callerAddress\\n    ) public override onlySLARegistry nonReentrant {\\n        require(_jobId != 0, '_jobI empty');\\n        SLA sla = SLA(_slaAddress);\\n        if (_messengerOwnerApproval) {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                owner(),\\n                address(this),\\n                _fee\\n            );\\n        } else {\\n            ERC20(chainlinkTokenAddress()).safeTransferFrom(\\n                _callerAddress,\\n                address(this),\\n                _fee\\n            );\\n        }\\n        Chainlink.Request memory request = buildChainlinkRequest(\\n            _jobId,\\n            address(this),\\n            this.fulfillSLI.selector\\n        );\\n        (\\n            uint256 sla_monitoring_start,\\n            uint256 sla_monitoring_end\\n        ) = periodRegistry.getPeriodStartAndEnd(sla.periodType(), _periodId);\\n        request.add(\\n            'sla_monitoring_start',\\n            StringUtils.uintToStr(sla_monitoring_start)\\n        );\\n        request.add(\\n            'sla_monitoring_end',\\n            StringUtils.uintToStr(sla_monitoring_end)\\n        );\\n        request.add('sla_address', StringUtils.addressToString(_slaAddress));\\n        request.add('network_name', StringUtils.bytes32ToStr(networkName));\\n\\n        // Sends the request with 0.1 LINK to the oracle contract\\n        bytes32 requestId = sendChainlinkRequestTo(_oracle, request, _fee);\\n\\n        requests.push(requestId);\\n\\n        requestIdToSLIRequest[requestId] = SLIRequest({\\n            slaAddress: _slaAddress,\\n            periodId: _periodId\\n        });\\n\\n        _requestsCounter += 1;\\n        emit SLIRequested(_callerAddress, _requestsCounter, requestId);\\n    }\\n\\n    function fulfillSLI(bytes32 _requestId, uint256 _chainlinkResponse)\\n        external\\n        override\\n        nonReentrant\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        SLIRequest memory request = requestIdToSLIRequest[_requestId];\\n        emit SLIReceived(\\n            request.slaAddress,\\n            request.periodId,\\n            _requestId,\\n            bytes32(_chainlinkResponse)\\n        );\\n        _fulfillsCounter += 1;\\n        SLA(request.slaAddress).registerSLI(\\n            _chainlinkResponse,\\n            request.periodId\\n        );\\n    }\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        override\\n        retryLock\\n    {\\n        require(\\n            stakeRegistry.periodIsVerified(_slaAddress, _periodId),\\n            'StakeRegistry: not verified'\\n        );\\n        SLA sla = SLA(_slaAddress);\\n        (, , SLA.Status status) = sla.periodSLIs(_periodId);\\n        require(status == SLA.Status.NotVerified, 'SLA: verified');\\n        requestSLI(_periodId, _slaAddress, false, msg.sender);\\n    }\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _jobId = _newJobId;\\n        _fee = _feeMultiplier * _baseFee;\\n        emit JobIdModified(msg.sender, _newJobId, _fee);\\n    }\\n\\n    function slaRegistryAddress() external view override returns (address) {\\n        return _slaRegistryAddress;\\n    }\\n\\n    function messengerPrecision() external pure override returns (uint256) {\\n        return _messengerPrecision;\\n    }\\n\\n    function oracle() external view override returns (address) {\\n        return _oracle;\\n    }\\n\\n    function jobId() external view override returns (bytes32) {\\n        return _jobId;\\n    }\\n\\n    function fee() external view override returns (uint256) {\\n        return _fee;\\n    }\\n\\n    function requestsCounter() external view override returns (uint256) {\\n        return _requestsCounter;\\n    }\\n\\n    function fulfillsCounter() external view override returns (uint256) {\\n        return _fulfillsCounter;\\n    }\\n\\n    function lpSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(lpSymbol, '-', Strings.toString(slaId)));\\n    }\\n\\n    function spSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(spSymbol, '-', Strings.toString(slaId)));\\n    }\\n}\\n\",\"keccak256\":\"0xadc1f00037d039f4228fb296b352c8897a2747cb89ca938f7e577d8a868728a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016004556010805460ff60a01b191690553480156200002357600080fd5b506040516200286b3803806200286b833981016040819052620000469162000314565b620000513362000132565b6001600755600280546001600160a01b0319166001600160a01b038b161790556001600160a01b038a166080526200009267016345785d8a0000896200042e565b600c55600f80546001600160a01b03808a166001600160a01b031992831617909255601080549289169290911691909117905560118590558351620000df90601290602087019062000184565b508251620000f590601390602086019062000184565b5081516200010b90601490602085019062000184565b5080516200012190601590602084019062000184565b505050505050505050505062000499565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000192906200045c565b90600052602060002090601f016020900481019282620001b6576000855562000201565b82601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b5b808211156200020f576000815560010162000214565b80516001600160a01b03811681146200024257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026f57600080fd5b81516001600160401b03808211156200028c576200028c62000247565b604051601f8301601f19908116603f01168101908282118183101715620002b757620002b762000247565b81604052838152602092508683858801011115620002d457600080fd5b600091505b83821015620002f85785820183015181830184015290820190620002d9565b838211156200030a5760008385830101525b9695505050505050565b6000806000806000806000806000806101408b8d0312156200033557600080fd5b620003408b6200022a565b99506200035060208c016200022a565b985060408b015197506200036760608c016200022a565b96506200037760808c016200022a565b60a08c015160c08d015191975095506001600160401b03808211156200039c57600080fd5b620003aa8e838f016200025d565b955060e08d0151915080821115620003c157600080fd5b620003cf8e838f016200025d565b94506101008d0151915080821115620003e757600080fd5b620003f58e838f016200025d565b93506101208d01519150808211156200040d57600080fd5b506200041c8d828e016200025d565b9150509295989b9194979a5092959850565b60008160001904831182151516156200045757634e487b7160e01b600052601160045260246000fd5b500290565b600181811c908216806200047157607f821691505b602082108114156200049357634e487b7160e01b600052602260045260246000fd5b50919050565b6080516123af620004bc600039600081816101f5015261081d01526123af6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806397a82192116100c3578063cb8d3fcf1161007c578063cb8d3fcf146102d5578063ccb1637c146102e8578063ddca3f43146102f0578063e450f061146102f8578063f2fde38b1461030b578063f38815891461031e57600080fd5b806397a8219214610245578063a50c542514610258578063ae401eb914610260578063bc0bfc00146102b2578063c2939d97146102c5578063c9b0cb22146102cd57600080fd5b8063715018a611610115578063715018a6146101e357806376ff294b146101eb5780637dc0d1d0146101f357806381d12c58146102195780638b6bd7361461022c5780638da5cb5b1461023457600080fd5b8063107bf28c1461015d57806311971c4614610179578063292733bf1461019957806346cd6801146101ae578063663c2269146101b65780636e71890d146101be575b600080fd5b61016660115481565b6040519081526020015b60405180910390f35b61018c610187366004611d5f565b610326565b6040516101709190611de0565b6101ac6101a7366004611df3565b610363565b005b61018c6103cc565b600d54610166565b600a546001600160a01b03165b6040516001600160a01b039091168152602001610170565b6101ac61045a565b61018c61046e565b7f00000000000000000000000000000000000000000000000000000000000000006101cb565b610166610227366004611e15565b61047b565b61018c61049c565b6006546001600160a01b03166101cb565b6101ac610253366004611e58565b6104a9565b600e54610166565b61029361026e366004611e15565b600860205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610170565b6101ac6102c0366004611df3565b61092d565b600b54610166565b6103e8610166565b61018c6102e3366004611d5f565b610b3a565b61018c610b50565b600c54610166565b6101ac610306366004611ea7565b610b5d565b6101ac610319366004611ed1565b610d38565b6101ac610db1565b6060601561033c836001600160801b0316610e2f565b60405160200161034d929190611f3d565b6040516020818303038152906040529050919050565b61036b610f35565b600b82905561038267016345785d8a000082612001565b600c81905560405133917f8e7e22d2820965fa1a8fa3ad76db76127e2f1baaf65f50c4e267f28b2254f7cb916103c091868252602082015260400190565b60405180910390a25050565b601280546103d990611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461040590611eec565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b505050505081565b610462610f35565b61046c6000610f8f565b565b601480546103d990611eec565b6009818154811061048b57600080fd5b600091825260209091200154905081565b601580546103d990611eec565b601054600160a01b900460ff1661052357600a546001600160a01b031633146105235760405162461bcd60e51b815260206004820152602160248201527f43616e206f6e6c792062652063616c6c656420627920534c41526567697374726044820152607960f81b60648201526084015b60405180910390fd5b600260075414156105765760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161051a565b6002600755600b546105b85760405162461bcd60e51b815260206004820152600b60248201526a5f6a6f624920656d70747960a81b604482015260640161051a565b828215610600576105fb6105d46006546001600160a01b031690565b30600c546105ea6002546001600160a01b031690565b6001600160a01b0316929190610fe1565b61061a565b61061a8230600c546105ea6002546001600160a01b031690565b6000610630600b543063bc0bfc0060e01b611041565b9050600080600f60009054906101000a90046001600160a01b03166001600160a01b031663ffa61235856001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190612020565b8a6040518363ffffffff1660e01b81526004016106e8929190612057565b604080518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107379190612083565b9150915061077c604051806040016040528060148152602001731cdb1857db5bdb9a5d1bdc9a5b99d7dcdd185c9d60621b81525061077484611068565b859190611166565b6107b3604051806040016040528060128152602001711cdb1857db5bdb9a5d1bdc9a5b99d7d95b9960721b81525061077483611068565b6107e36040518060400160405280600b81526020016a736c615f6164647265737360a81b81525061077489611189565b6108166040518060400160405280600c81526020016b6e6574776f726b5f6e616d6560a01b815250610774601154611374565b60006108457f000000000000000000000000000000000000000000000000000000000000000085600c546114a4565b6009805460018082019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018290556040805180820182526001600160a01b038c8116825260208083018f815260008781526008909252938120925183546001600160a01b0319169216919091178255915190830155600d805493945091926108d19084906120a7565b9091555050600d5460408051918252602082018390526001600160a01b038816917feab5eb77e722078f3fab7eb6a77c74f7001181e1e3a74d51b7b5747ee1b31cb9910160405180910390a25050600160075550505050505050565b600260075414156109805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161051a565b600260075560008281526005602052604090205482906001600160a01b031633146109fe5760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b606482015260840161051a565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152600860209081526040918290208251808401845281546001600160a01b031680825260019092015481840181905284519081529283018690529286927f56514ef6e1ffd0f970ebf32dc181e476384e6e53a8351719040b4030318a933b910160405180910390a36001600e6000828254610ac091906120a7565b909155505080516020820151604051636bd2e21160e11b81526004810186905260248101919091526001600160a01b039091169063d7a5c42290604401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b50506001600755505050505050565b6060601361033c836001600160801b0316610e2f565b601380546103d990611eec565b60108054600160a01b60ff60a01b1982161790915560405163ab9a81a560e01b81526001600160a01b038481166004830152602482018490529091169063ab9a81a59060440160206040518083038186803b158015610bbb57600080fd5b505afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf391906120bf565b610c3f5760405162461bcd60e51b815260206004820152601b60248201527f5374616b6552656769737472793a206e6f742076657269666965640000000000604482015260640161051a565b6040516320c876ef60e11b81526004810182905282906000906001600160a01b03831690634190edde9060240160606040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc91906120dc565b925060009150610cc99050565b816002811115610cdb57610cdb612041565b14610d185760405162461bcd60e51b815260206004820152600d60248201526c14d3104e881d995c9a599a5959609a1b604482015260640161051a565b610d2583856000336104a9565b50506010805460ff60a01b191690555050565b610d40610f35565b6001600160a01b038116610da55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051a565b610dae81610f8f565b50565b600a546001600160a01b031615610e1b5760405162461bcd60e51b815260206004820152602860248201527f534c41526567697374727920616464726573732068617320616c7265616479206044820152671899595b881cd95d60c21b606482015260840161051a565b600a80546001600160a01b03191633179055565b606081610e535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e7d5780610e6781612119565b9150610e769050600a8361214a565b9150610e57565b60008167ffffffffffffffff811115610e9857610e9861215e565b6040519080825280601f01601f191660200182016040528015610ec2576020820181803683370190505b5090505b8415610f2d57610ed7600183612174565b9150610ee4600a8661218b565b610eef9060306120a7565b60f81b818381518110610f0457610f0461219f565b60200101906001600160f81b031916908160001a905350610f26600a8661214a565b9450610ec6565b949350505050565b6006546001600160a01b0316331461046c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051a565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261103b908590611537565b50505050565b611049611d24565b611051611d24565b61105d81868686611609565b9150505b9392505050565b60608161108c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110b657806110a081612119565b91506110af9050600a8361214a565b9150611090565b60008167ffffffffffffffff8111156110d1576110d161215e565b6040519080825280601f01601f1916602001820160405280156110fb576020820181803683370190505b5090505b8415610f2d57611110600183612174565b915061111d600a8661218b565b6111289060306120a7565b60f81b81838151811061113d5761113d61219f565b60200101906001600160f81b031916908160001a90535061115f600a8661214a565b94506110ff565b60808301516111759083611646565b60808301516111849082611646565b505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b0385169291600091602082018180368337019050509050600360fc1b816000815181106111f4576111f461219f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112235761122361219f565b60200101906001600160f81b031916908160001a90535060005b601481101561136b578260048561125584600c6120a7565b602081106112655761126561219f565b1a60f81b6001600160f81b031916901c60f81c60ff168151811061128b5761128b61219f565b01602001516001600160f81b031916826112a6836002612001565b6112b19060026120a7565b815181106112c1576112c161219f565b60200101906001600160f81b031916908160001a90535082846112e583600c6120a7565b602081106112f5576112f561219f565b825191901a600f1690811061130c5761130c61219f565b01602001516001600160f81b03191682611327836002612001565b6113329060036120a7565b815181106113425761134261219f565b60200101906001600160f81b031916908160001a9053508061136381612119565b91505061123d565b50949350505050565b606060005b60208160ff161080156113ad5750828160ff166020811061139c5761139c61219f565b1a60f81b6001600160f81b03191615155b156113c457806113bc816121b5565b915050611379565b60008160ff1667ffffffffffffffff8111156113e2576113e261215e565b6040519080825280601f01601f19166020018201604052801561140c576020820181803683370190505b509050600091505b60208260ff161080156114485750838260ff16602081106114375761143761219f565b1a60f81b6001600160f81b03191615155b1561106157838260ff16602081106114625761146261219f565b1a60f81b818360ff168151811061147b5761147b61219f565b60200101906001600160f81b031916908160001a9053508161149c816121b5565b925050611414565b6004546000906114b58160016120a7565b600455835160408086015160808701515191516000936320214ca360e11b936114ed9386938493923092918a916001916024016121d5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061152d8683868461165d565b9695505050505050565b600061158c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117ca9092919063ffffffff16565b80519091501561118457808060200190518101906115aa91906120bf565b6111845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051a565b611611611d24565b61162185608001516101006117d9565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6116538260038351611844565b6111848282611953565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906117209088908790879060040161223d565b602060405180830381600087803b15801561173a57600080fd5b505af115801561174e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177291906120bf565b610f2d5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b606482015260840161051a565b6060610f2d848460008561197a565b6040805180820190915260608152600060208201526117f960208361218b565b156118215761180960208361218b565b611814906020612174565b61181e90836120a7565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b60178167ffffffffffffffff16116118695761103b8360e0600585901b168317611aab565b60ff8167ffffffffffffffff16116118a757611890836018611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166001611ad0565b61ffff8167ffffffffffffffff16116118e6576118cf836019611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166002611ad0565b63ffffffff8167ffffffffffffffff16116119275761191083601a611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166004611ad0565b61193c83601b611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166008611ad0565b60408051808201909152606081526000602082015261106183846000015151848551611af6565b6060824710156119db5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051a565b6001600160a01b0385163b611a325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051a565b600080866001600160a01b03168587604051611a4e919061226d565b60006040518083038185875af1925050503d8060008114611a8b576040519150601f19603f3d011682016040523d82523d6000602084013e611a90565b606091505b5091509150611aa0828286611be0565b979650505050505050565b6040805180820190915260608152600060208201526110618384600001515184611c19565b604080518082019091526060815260006020820152610f2d848560000151518585611c75565b6040805180820190915260608152600060208201528251821115611b1957600080fd5b6020850151611b2883866120a7565b1115611b5b57611b5b85611b4b87602001518786611b4691906120a7565b611cf6565b611b56906002612001565b611d0d565b600080865180518760208301019350808887011115611b7a5787860182525b505050602084015b60208410611bba5780518252611b996020836120a7565b9150611ba66020826120a7565b9050611bb3602085612174565b9350611b82565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60608315611bef575081611061565b825115611bff5782518084602001fd5b8160405162461bcd60e51b815260040161051a9190611de0565b60408051808201909152606081526000602082015283602001518310611c4e57611c4e8485602001516002611b569190612001565b835180516020858301018481535080851415611c6b576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151611c9985846120a7565b1115611cad57611cad85611b4b86856120a7565b60006001611cbd8461010061236d565b611cc79190612174565b9050855183868201018583198251161781525080518487011115611ceb5783860181525b509495945050505050565b600081831115611d0757508161183e565b50919050565b8151611d1983836117d9565b5061103b8382611953565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b600060208284031215611d7157600080fd5b81356001600160801b038116811461106157600080fd5b60005b83811015611da3578181015183820152602001611d8b565b8381111561103b5750506000910152565b60008151808452611dcc816020860160208601611d88565b601f01601f19169290920160200192915050565b6020815260006110616020830184611db4565b60008060408385031215611e0657600080fd5b50508035926020909101359150565b600060208284031215611e2757600080fd5b5035919050565b80356001600160a01b0381168114611e4557600080fd5b919050565b8015158114610dae57600080fd5b60008060008060808587031215611e6e57600080fd5b84359350611e7e60208601611e2e565b92506040850135611e8e81611e4a565b9150611e9c60608601611e2e565b905092959194509250565b60008060408385031215611eba57600080fd5b611ec383611e2e565b946020939093013593505050565b600060208284031215611ee357600080fd5b61106182611e2e565b600181811c90821680611f0057607f821691505b60208210811415611d0757634e487b7160e01b600052602260045260246000fd5b60008151611f33818560208601611d88565b9290920192915050565b600080845481600182811c915080831680611f5957607f831692505b6020808410821415611f7957634e487b7160e01b86526022600452602486fd5b818015611f8d5760018114611f9e57611fcb565b60ff19861689528489019650611fcb565b60008b81526020902060005b86811015611fc35781548b820152908501908301611faa565b505084890196505b50505050505061105d611fe582602d60f81b815260010190565b85611f21565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561201b5761201b611feb565b500290565b60006020828403121561203257600080fd5b81516006811061106157600080fd5b634e487b7160e01b600052602160045260246000fd5b604081016006841061207957634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6000806040838503121561209657600080fd5b505080516020909101519092909150565b600082198211156120ba576120ba611feb565b500190565b6000602082840312156120d157600080fd5b815161106181611e4a565b6000806000606084860312156120f157600080fd5b835192506020840151915060408401516003811061210e57600080fd5b809150509250925092565b600060001982141561212d5761212d611feb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261215957612159612134565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561218657612186611feb565b500390565b60008261219a5761219a612134565b500690565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8114156121cc576121cc611feb565b60010192915050565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061222e83820185611db4565b9b9a5050505050505050505050565b60018060a01b03841681528260208201526060604082015260006122646060830184611db4565b95945050505050565b6000825161227f818460208701611d88565b9190910192915050565b600181815b808511156122c45781600019048211156122aa576122aa611feb565b808516156122b757918102915b93841c939080029061228e565b509250929050565b6000826122db5750600161183e565b816122e85750600061183e565b81600181146122fe576002811461230857612324565b600191505061183e565b60ff84111561231957612319611feb565b50506001821b61183e565b5060208310610133831016604e8410600b8410161715612347575081810a61183e565b6123518383612289565b806000190482111561236557612365611feb565b029392505050565b600061106183836122cc56fea2646970667358221220140190d18645814b5ea77dcb05482ff1412ea7b9a479cbf637ad317faf64888564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806397a82192116100c3578063cb8d3fcf1161007c578063cb8d3fcf146102d5578063ccb1637c146102e8578063ddca3f43146102f0578063e450f061146102f8578063f2fde38b1461030b578063f38815891461031e57600080fd5b806397a8219214610245578063a50c542514610258578063ae401eb914610260578063bc0bfc00146102b2578063c2939d97146102c5578063c9b0cb22146102cd57600080fd5b8063715018a611610115578063715018a6146101e357806376ff294b146101eb5780637dc0d1d0146101f357806381d12c58146102195780638b6bd7361461022c5780638da5cb5b1461023457600080fd5b8063107bf28c1461015d57806311971c4614610179578063292733bf1461019957806346cd6801146101ae578063663c2269146101b65780636e71890d146101be575b600080fd5b61016660115481565b6040519081526020015b60405180910390f35b61018c610187366004611d5f565b610326565b6040516101709190611de0565b6101ac6101a7366004611df3565b610363565b005b61018c6103cc565b600d54610166565b600a546001600160a01b03165b6040516001600160a01b039091168152602001610170565b6101ac61045a565b61018c61046e565b7f00000000000000000000000000000000000000000000000000000000000000006101cb565b610166610227366004611e15565b61047b565b61018c61049c565b6006546001600160a01b03166101cb565b6101ac610253366004611e58565b6104a9565b600e54610166565b61029361026e366004611e15565b600860205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610170565b6101ac6102c0366004611df3565b61092d565b600b54610166565b6103e8610166565b61018c6102e3366004611d5f565b610b3a565b61018c610b50565b600c54610166565b6101ac610306366004611ea7565b610b5d565b6101ac610319366004611ed1565b610d38565b6101ac610db1565b6060601561033c836001600160801b0316610e2f565b60405160200161034d929190611f3d565b6040516020818303038152906040529050919050565b61036b610f35565b600b82905561038267016345785d8a000082612001565b600c81905560405133917f8e7e22d2820965fa1a8fa3ad76db76127e2f1baaf65f50c4e267f28b2254f7cb916103c091868252602082015260400190565b60405180910390a25050565b601280546103d990611eec565b80601f016020809104026020016040519081016040528092919081815260200182805461040590611eec565b80156104525780601f1061042757610100808354040283529160200191610452565b820191906000526020600020905b81548152906001019060200180831161043557829003601f168201915b505050505081565b610462610f35565b61046c6000610f8f565b565b601480546103d990611eec565b6009818154811061048b57600080fd5b600091825260209091200154905081565b601580546103d990611eec565b601054600160a01b900460ff1661052357600a546001600160a01b031633146105235760405162461bcd60e51b815260206004820152602160248201527f43616e206f6e6c792062652063616c6c656420627920534c41526567697374726044820152607960f81b60648201526084015b60405180910390fd5b600260075414156105765760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161051a565b6002600755600b546105b85760405162461bcd60e51b815260206004820152600b60248201526a5f6a6f624920656d70747960a81b604482015260640161051a565b828215610600576105fb6105d46006546001600160a01b031690565b30600c546105ea6002546001600160a01b031690565b6001600160a01b0316929190610fe1565b61061a565b61061a8230600c546105ea6002546001600160a01b031690565b6000610630600b543063bc0bfc0060e01b611041565b9050600080600f60009054906101000a90046001600160a01b03166001600160a01b031663ffa61235856001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190612020565b8a6040518363ffffffff1660e01b81526004016106e8929190612057565b604080518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107379190612083565b9150915061077c604051806040016040528060148152602001731cdb1857db5bdb9a5d1bdc9a5b99d7dcdd185c9d60621b81525061077484611068565b859190611166565b6107b3604051806040016040528060128152602001711cdb1857db5bdb9a5d1bdc9a5b99d7d95b9960721b81525061077483611068565b6107e36040518060400160405280600b81526020016a736c615f6164647265737360a81b81525061077489611189565b6108166040518060400160405280600c81526020016b6e6574776f726b5f6e616d6560a01b815250610774601154611374565b60006108457f000000000000000000000000000000000000000000000000000000000000000085600c546114a4565b6009805460018082019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018290556040805180820182526001600160a01b038c8116825260208083018f815260008781526008909252938120925183546001600160a01b0319169216919091178255915190830155600d805493945091926108d19084906120a7565b9091555050600d5460408051918252602082018390526001600160a01b038816917feab5eb77e722078f3fab7eb6a77c74f7001181e1e3a74d51b7b5747ee1b31cb9910160405180910390a25050600160075550505050505050565b600260075414156109805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161051a565b600260075560008281526005602052604090205482906001600160a01b031633146109fe5760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b606482015260840161051a565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152600860209081526040918290208251808401845281546001600160a01b031680825260019092015481840181905284519081529283018690529286927f56514ef6e1ffd0f970ebf32dc181e476384e6e53a8351719040b4030318a933b910160405180910390a36001600e6000828254610ac091906120a7565b909155505080516020820151604051636bd2e21160e11b81526004810186905260248101919091526001600160a01b039091169063d7a5c42290604401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b50506001600755505050505050565b6060601361033c836001600160801b0316610e2f565b601380546103d990611eec565b60108054600160a01b60ff60a01b1982161790915560405163ab9a81a560e01b81526001600160a01b038481166004830152602482018490529091169063ab9a81a59060440160206040518083038186803b158015610bbb57600080fd5b505afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf391906120bf565b610c3f5760405162461bcd60e51b815260206004820152601b60248201527f5374616b6552656769737472793a206e6f742076657269666965640000000000604482015260640161051a565b6040516320c876ef60e11b81526004810182905282906000906001600160a01b03831690634190edde9060240160606040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc91906120dc565b925060009150610cc99050565b816002811115610cdb57610cdb612041565b14610d185760405162461bcd60e51b815260206004820152600d60248201526c14d3104e881d995c9a599a5959609a1b604482015260640161051a565b610d2583856000336104a9565b50506010805460ff60a01b191690555050565b610d40610f35565b6001600160a01b038116610da55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051a565b610dae81610f8f565b50565b600a546001600160a01b031615610e1b5760405162461bcd60e51b815260206004820152602860248201527f534c41526567697374727920616464726573732068617320616c7265616479206044820152671899595b881cd95d60c21b606482015260840161051a565b600a80546001600160a01b03191633179055565b606081610e535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e7d5780610e6781612119565b9150610e769050600a8361214a565b9150610e57565b60008167ffffffffffffffff811115610e9857610e9861215e565b6040519080825280601f01601f191660200182016040528015610ec2576020820181803683370190505b5090505b8415610f2d57610ed7600183612174565b9150610ee4600a8661218b565b610eef9060306120a7565b60f81b818381518110610f0457610f0461219f565b60200101906001600160f81b031916908160001a905350610f26600a8661214a565b9450610ec6565b949350505050565b6006546001600160a01b0316331461046c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161051a565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261103b908590611537565b50505050565b611049611d24565b611051611d24565b61105d81868686611609565b9150505b9392505050565b60608161108c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110b657806110a081612119565b91506110af9050600a8361214a565b9150611090565b60008167ffffffffffffffff8111156110d1576110d161215e565b6040519080825280601f01601f1916602001820160405280156110fb576020820181803683370190505b5090505b8415610f2d57611110600183612174565b915061111d600a8661218b565b6111289060306120a7565b60f81b81838151811061113d5761113d61219f565b60200101906001600160f81b031916908160001a90535061115f600a8661214a565b94506110ff565b60808301516111759083611646565b60808301516111849082611646565b505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a80825260608281019094526001600160a01b0385169291600091602082018180368337019050509050600360fc1b816000815181106111f4576111f461219f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106112235761122361219f565b60200101906001600160f81b031916908160001a90535060005b601481101561136b578260048561125584600c6120a7565b602081106112655761126561219f565b1a60f81b6001600160f81b031916901c60f81c60ff168151811061128b5761128b61219f565b01602001516001600160f81b031916826112a6836002612001565b6112b19060026120a7565b815181106112c1576112c161219f565b60200101906001600160f81b031916908160001a90535082846112e583600c6120a7565b602081106112f5576112f561219f565b825191901a600f1690811061130c5761130c61219f565b01602001516001600160f81b03191682611327836002612001565b6113329060036120a7565b815181106113425761134261219f565b60200101906001600160f81b031916908160001a9053508061136381612119565b91505061123d565b50949350505050565b606060005b60208160ff161080156113ad5750828160ff166020811061139c5761139c61219f565b1a60f81b6001600160f81b03191615155b156113c457806113bc816121b5565b915050611379565b60008160ff1667ffffffffffffffff8111156113e2576113e261215e565b6040519080825280601f01601f19166020018201604052801561140c576020820181803683370190505b509050600091505b60208260ff161080156114485750838260ff16602081106114375761143761219f565b1a60f81b6001600160f81b03191615155b1561106157838260ff16602081106114625761146261219f565b1a60f81b818360ff168151811061147b5761147b61219f565b60200101906001600160f81b031916908160001a9053508161149c816121b5565b925050611414565b6004546000906114b58160016120a7565b600455835160408086015160808701515191516000936320214ca360e11b936114ed9386938493923092918a916001916024016121d5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061152d8683868461165d565b9695505050505050565b600061158c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117ca9092919063ffffffff16565b80519091501561118457808060200190518101906115aa91906120bf565b6111845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051a565b611611611d24565b61162185608001516101006117d9565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6116538260038351611844565b6111848282611953565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906117209088908790879060040161223d565b602060405180830381600087803b15801561173a57600080fd5b505af115801561174e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177291906120bf565b610f2d5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b606482015260840161051a565b6060610f2d848460008561197a565b6040805180820190915260608152600060208201526117f960208361218b565b156118215761180960208361218b565b611814906020612174565b61181e90836120a7565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b60178167ffffffffffffffff16116118695761103b8360e0600585901b168317611aab565b60ff8167ffffffffffffffff16116118a757611890836018611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166001611ad0565b61ffff8167ffffffffffffffff16116118e6576118cf836019611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166002611ad0565b63ffffffff8167ffffffffffffffff16116119275761191083601a611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166004611ad0565b61193c83601b611fe0600586901b1617611aab565b5061103b8367ffffffffffffffff83166008611ad0565b60408051808201909152606081526000602082015261106183846000015151848551611af6565b6060824710156119db5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051a565b6001600160a01b0385163b611a325760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051a565b600080866001600160a01b03168587604051611a4e919061226d565b60006040518083038185875af1925050503d8060008114611a8b576040519150601f19603f3d011682016040523d82523d6000602084013e611a90565b606091505b5091509150611aa0828286611be0565b979650505050505050565b6040805180820190915260608152600060208201526110618384600001515184611c19565b604080518082019091526060815260006020820152610f2d848560000151518585611c75565b6040805180820190915260608152600060208201528251821115611b1957600080fd5b6020850151611b2883866120a7565b1115611b5b57611b5b85611b4b87602001518786611b4691906120a7565b611cf6565b611b56906002612001565b611d0d565b600080865180518760208301019350808887011115611b7a5787860182525b505050602084015b60208410611bba5780518252611b996020836120a7565b9150611ba66020826120a7565b9050611bb3602085612174565b9350611b82565b51815160001960208690036101000a019081169019919091161790525083949350505050565b60608315611bef575081611061565b825115611bff5782518084602001fd5b8160405162461bcd60e51b815260040161051a9190611de0565b60408051808201909152606081526000602082015283602001518310611c4e57611c4e8485602001516002611b569190612001565b835180516020858301018481535080851415611c6b576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151611c9985846120a7565b1115611cad57611cad85611b4b86856120a7565b60006001611cbd8461010061236d565b611cc79190612174565b9050855183868201018583198251161781525080518487011115611ceb5783860181525b509495945050505050565b600081831115611d0757508161183e565b50919050565b8151611d1983836117d9565b5061103b8382611953565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b600060208284031215611d7157600080fd5b81356001600160801b038116811461106157600080fd5b60005b83811015611da3578181015183820152602001611d8b565b8381111561103b5750506000910152565b60008151808452611dcc816020860160208601611d88565b601f01601f19169290920160200192915050565b6020815260006110616020830184611db4565b60008060408385031215611e0657600080fd5b50508035926020909101359150565b600060208284031215611e2757600080fd5b5035919050565b80356001600160a01b0381168114611e4557600080fd5b919050565b8015158114610dae57600080fd5b60008060008060808587031215611e6e57600080fd5b84359350611e7e60208601611e2e565b92506040850135611e8e81611e4a565b9150611e9c60608601611e2e565b905092959194509250565b60008060408385031215611eba57600080fd5b611ec383611e2e565b946020939093013593505050565b600060208284031215611ee357600080fd5b61106182611e2e565b600181811c90821680611f0057607f821691505b60208210811415611d0757634e487b7160e01b600052602260045260246000fd5b60008151611f33818560208601611d88565b9290920192915050565b600080845481600182811c915080831680611f5957607f831692505b6020808410821415611f7957634e487b7160e01b86526022600452602486fd5b818015611f8d5760018114611f9e57611fcb565b60ff19861689528489019650611fcb565b60008b81526020902060005b86811015611fc35781548b820152908501908301611faa565b505084890196505b50505050505061105d611fe582602d60f81b815260010190565b85611f21565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561201b5761201b611feb565b500290565b60006020828403121561203257600080fd5b81516006811061106157600080fd5b634e487b7160e01b600052602160045260246000fd5b604081016006841061207957634e487b7160e01b600052602160045260246000fd5b9281526020015290565b6000806040838503121561209657600080fd5b505080516020909101519092909150565b600082198211156120ba576120ba611feb565b500190565b6000602082840312156120d157600080fd5b815161106181611e4a565b6000806000606084860312156120f157600080fd5b835192506020840151915060408401516003811061210e57600080fd5b809150509250925092565b600060001982141561212d5761212d611feb565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261215957612159612134565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561218657612186611feb565b500390565b60008261219a5761219a612134565b500690565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8114156121cc576121cc611feb565b60010192915050565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061222e83820185611db4565b9b9a5050505050505050505050565b60018060a01b03841681528260208201526060604082015260006122646060830184611db4565b95945050505050565b6000825161227f818460208701611d88565b9190910192915050565b600181815b808511156122c45781600019048211156122aa576122aa611feb565b808516156122b757918102915b93841c939080029061228e565b509250929050565b6000826122db5750600161183e565b816122e85750600061183e565b81600181146122fe576002811461230857612324565b600191505061183e565b60ff84111561231957612319611feb565b50506001821b61183e565b5060208310610133831016604e8410600b8410161715612347575081810a61183e565b6123518383612289565b806000190482111561236557612365611feb565b029392505050565b600061106183836122cc56fea2646970667358221220140190d18645814b5ea77dcb05482ff1412ea7b9a479cbf637ad317faf64888564736f6c63430008090033",
  "libraries": {
    "StringUtils": "0xc3247a8328a7299272f5897fe649667773b89e0c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fee()": {
        "details": "gets the fee amount of LINK token"
      },
      "fulfillsCounter()": {
        "details": "returns the fulfillsCounter"
      },
      "jobId()": {
        "details": "gets the chainlink job id"
      },
      "lpSymbolSlaId(uint128)": {
        "details": "returns the symbol of DSLA-LP token with slaId"
      },
      "messengerPrecision()": {
        "details": "gets the interfaces precision"
      },
      "oracle()": {
        "details": "gets the chainlink oracle contract address"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestsCounter()": {
        "details": "returns the requestsCounter"
      },
      "setSLARegistry()": {
        "details": "sets the SLARegistry contract address and can only be called once"
      },
      "slaRegistryAddress()": {
        "details": "gets the slaRegistryAddress"
      },
      "spSymbolSlaId(uint128)": {
        "details": "returns the symbol of DSLA-SP token with slaId"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "lpName": {
        "details": "returns the name of DSLA-LP token"
      },
      "lpSymbol": {
        "details": "returns the symbol of DSLA-LP token"
      },
      "spName": {
        "details": "returns the name of DSLA-SP token"
      },
      "spSymbol": {
        "details": "returns the symbol of DSLA-SP token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 8619,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8843,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13682,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "requestIdToSLIRequest",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(SLIRequest)7205_storage)"
      },
      {
        "astId": 13685,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "requests",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 13687,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_slaRegistryAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 13691,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_jobId",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 13696,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_fee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13703,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_requestsCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 13705,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "_fulfillsCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13708,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "periodRegistry",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(PeriodRegistry)3537"
      },
      {
        "astId": 13711,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "stakeRegistry",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(StakeRegistry)5912"
      },
      {
        "astId": 13714,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "retry",
        "offset": 20,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 13716,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "networkName",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes32"
      },
      {
        "astId": 13719,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "lpName",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 13722,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "lpSymbol",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 13725,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "spName",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 13728,
        "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
        "label": "spSymbol",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PeriodRegistry)3537": {
        "encoding": "inplace",
        "label": "contract PeriodRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(StakeRegistry)5912": {
        "encoding": "inplace",
        "label": "contract StakeRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(SLIRequest)7205_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IMessenger.SLIRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(SLIRequest)7205_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SLIRequest)7205_storage": {
        "encoding": "inplace",
        "label": "struct IMessenger.SLIRequest",
        "members": [
          {
            "astId": 7202,
            "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
            "label": "slaAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7204,
            "contract": "contracts/messengers/staking-parametric/StakingParametricOracle.sol:StakingParametricOracle",
            "label": "periodId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}