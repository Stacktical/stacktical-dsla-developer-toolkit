{
  "address": "0xF2DBbc1349922CD78b43755f66c2c91911840F89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sloRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "periodRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "messengerRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeRegistry_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "checkPastPeriod_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ReturnLockedValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract SLA",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SLACreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sla",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SLIRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "SLAs",
      "outputs": [
        {
          "internalType": "contract SLA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allSLAs",
      "outputs": [
        {
          "internalType": "contract SLA[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkPastPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint120",
          "name": "sloValue_",
          "type": "uint120"
        },
        {
          "internalType": "enum SLORegistry.SLOType",
          "name": "sloType_",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "whitelisted_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "messengerAddress_",
          "type": "address"
        },
        {
          "internalType": "enum IPeriodRegistry.PeriodType",
          "name": "periodType_",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "initialPeriodId_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "finalPeriodId_",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "ipfsHash_",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "severity_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "penalty_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "leverage_",
          "type": "uint64"
        }
      ],
      "name": "createSLA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slaAddress",
          "type": "address"
        }
      ],
      "name": "isRegisteredSLA",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messengerRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messengerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_specificationUrl",
          "type": "string"
        }
      ],
      "name": "registerMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_periodId",
          "type": "uint256"
        },
        {
          "internalType": "contract SLA",
          "name": "_sla",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_ownerApproval",
          "type": "bool"
        }
      ],
      "name": "requestSLI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract SLA",
          "name": "_sla",
          "type": "address"
        }
      ],
      "name": "returnLockedValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sloRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userSLAs",
      "outputs": [
        {
          "internalType": "contract SLA[]",
          "name": "SLAList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c72ddfdeddde530dcb5cb12f28c4893f4a3d9670073378b5b4bf6df78e78ced",
  "receipt": {
    "to": null,
    "from": "0x972614782a893ad3139418Ef00e17fE95896A7c6",
    "contractAddress": "0xF2DBbc1349922CD78b43755f66c2c91911840F89",
    "transactionIndex": 31,
    "gasUsed": "5471830",
    "logsBloom": "0x
    "blockHash": "0xcae3e9ab606ab6dca17ff8794c396e42124321d23949701ce3d00c8778a5a231",
    "transactionHash": "0x5c72ddfdeddde530dcb5cb12f28c4893f4a3d9670073378b5b4bf6df78e78ced",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 35192826,
        "transactionHash": "0x5c72ddfdeddde530dcb5cb12f28c4893f4a3d9670073378b5b4bf6df78e78ced",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000972614782a893ad3139418ef00e17fe95896a7c6",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000004ce584582a4b41800000000000000000000000000000000000000000000000457e0a648833aea7f00000000000000000000000000000000000000000000668673fdd5368cbc58be00000000000000000000000000000000000000000000000453124e030096366700000000000000000000000000000000000000000000668678cc2d7c0f610cd6",
        "logIndex": 163,
        "blockHash": "0xcae3e9ab606ab6dca17ff8794c396e42124321d23949701ce3d00c8778a5a231"
      }
    ],
    "blockNumber": 35192826,
    "cumulativeGasUsed": "11322870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF6f972F24218E9B575fF0BaA3cf8d896d94e5021",
    "0xd347dfD0A04FC13fCb175519Fad044E9d3277f10",
    "0x7928C03AB655a35fb975E82fea4205513C677297",
    "0xCe952191Fd641ec113bF56Fa6201Fc58bef5A752",
    true
  ],
  "solcInputHash": "b47b1da8947805f3b521fd14a441e1c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sloRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"periodRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeRegistry_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"checkPastPeriod_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ReturnLockedValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract SLA\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SLACreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sla\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SLIRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SLAs\",\"outputs\":[{\"internalType\":\"contract SLA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSLAs\",\"outputs\":[{\"internalType\":\"contract SLA[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPastPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"sloValue_\",\"type\":\"uint120\"},{\"internalType\":\"enum SLORegistry.SLOType\",\"name\":\"sloType_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"whitelisted_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"messengerAddress_\",\"type\":\"address\"},{\"internalType\":\"enum IPeriodRegistry.PeriodType\",\"name\":\"periodType_\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"initialPeriodId_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"finalPeriodId_\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"ipfsHash_\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"severity_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"penalty_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"leverage_\",\"type\":\"uint64\"}],\"name\":\"createSLA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slaAddress\",\"type\":\"address\"}],\"name\":\"isRegisteredSLA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messengerRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messengerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_specificationUrl\",\"type\":\"string\"}],\"name\":\"registerMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodId\",\"type\":\"uint256\"},{\"internalType\":\"contract SLA\",\"name\":\"_sla\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ownerApproval\",\"type\":\"bool\"}],\"name\":\"requestSLI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SLA\",\"name\":\"_sla\",\"type\":\"address\"}],\"name\":\"returnLockedValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sloRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userSLAs\",\"outputs\":[{\"internalType\":\"contract SLA[]\",\"name\":\"SLAList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allSLAs()\":{\"returns\":{\"_0\":\"array of SLAs\"}},\"checkPastPeriod()\":{\"returns\":{\"_0\":\"boolean that represent if it check the past periods or not\"}},\"constructor\":{\"params\":{\"checkPastPeriod_\":\"value to lock past periods on SLA deployment\",\"messengerRegistry_\":\"address of MessengerRegistry\",\"periodRegistry_\":\"address of PeriodRegistry\",\"sloRegistry_\":\"address of SLORegistry\",\"stakeRegistry_\":\"address of StakeRegistry\"}},\"createSLA(uint120,uint8,bool,address,uint8,uint128,uint128,string,uint256[],uint256[],uint64)\":{\"params\":{\"finalPeriodId_\":\"ending period id\",\"initialPeriodId_\":\"starting period id\",\"ipfsHash_\":\"ipfshash\",\"leverage_\":\"leverage\",\"messengerAddress_\":\"address of messenger\",\"penalty_\":\"penalty per severity level\",\"periodType_\":\"period type\",\"severity_\":\"severity\",\"sloType_\":\"slo type\",\"sloValue_\":\"slo value\",\"whitelisted_\":\"whitelist\"}},\"isRegisteredSLA(address)\":{\"params\":{\"_slaAddress\":\"address of SLA to check registration\"},\"returns\":{\"_0\":\"boolean of registration\"}},\"messengerRegistry()\":{\"returns\":{\"_0\":\"address of MessengerRegistry\"}},\"periodRegistry()\":{\"returns\":{\"_0\":\"address of PeriodRegistry\"}},\"registerMessenger(address,string)\":{\"params\":{\"_messengerAddress\":\"address of messenger to register\",\"_specificationUrl\":\"specification url of messenger\"}},\"requestSLI(uint256,address,bool)\":{\"details\":\"requested period should be finished && sla shouldn't be verified, and it distributes verification rewards to the caller\",\"params\":{\"_ownerApproval\":\"owner approval\",\"_periodId\":\"period id to request\",\"_sla\":\"address of SLA\"}},\"returnLockedValue(address)\":{\"details\":\"only SLA owner can call this function for only registered SLAs\",\"params\":{\"_sla\":\"address of SLA\"}},\"sloRegistry()\":{\"returns\":{\"_0\":\"address of SLORegistry\"}},\"stakeRegistry()\":{\"returns\":{\"_0\":\"address of StakeRegistry\"}},\"userSLAs(address)\":{\"params\":{\"_user\":\"user address\"},\"returns\":{\"SLAList\":\"an array of SLAs created by _user\"}}},\"title\":\"SLARegistry\",\"version\":1},\"userdoc\":{\"events\":{\"ReturnLockedValue(address,address)\":{\"notice\":\"An event that is emitted when returning locked tokens back to sla owner\"},\"SLACreated(address,address)\":{\"notice\":\"An event that emitted when creating a new SLA\"},\"SLIRequested(uint256,address,address)\":{\"notice\":\"An event that is emitted when requesting SLI\"}},\"kind\":\"user\",\"methods\":{\"SLAs(uint256)\":{\"notice\":\"stores the addresses of created SLAs\"},\"allSLAs()\":{\"notice\":\"external view function that returns an array of all SLAs\"},\"checkPastPeriod()\":{\"notice\":\"external view function that returns the value to lock past periods on SLA deployment\"},\"constructor\":{\"notice\":\"Constructor\"},\"createSLA(uint120,uint8,bool,address,uint8,uint128,uint128,string,uint256[],uint256[],uint64)\":{\"notice\":\"function to create a new SLA\"},\"isRegisteredSLA(address)\":{\"notice\":\"public view function that returns if the sla is registered\"},\"messengerRegistry()\":{\"notice\":\"external view function that returns the address of MessengerRegistry\"},\"periodRegistry()\":{\"notice\":\"external view function that returns the address of PeriodRegistry\"},\"registerMessenger(address,string)\":{\"notice\":\"function to register a new messenger\"},\"requestSLI(uint256,address,bool)\":{\"notice\":\"function to request sli for specific period id\"},\"returnLockedValue(address)\":{\"notice\":\"function to return locked tokens back to sla owner\"},\"sloRegistry()\":{\"notice\":\"external view function that returns the address of SLORegistry\"},\"stakeRegistry()\":{\"notice\":\"external view function that returns the address of StakeRegistry\"},\"userSLAs(address)\":{\"notice\":\"external view function that returns SLAs created by user\"}},\"notice\":\"This is a registry contract that deploy SLAs and manage them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@dsla-protocol/core/contracts/SLARegistry.sol\":\"SLARegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dsla-protocol/core/contracts/SLA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/ISLORegistry.sol';\\nimport './Staking.sol';\\n\\n/**\\n @title Service Level Agreement Contract\\n */\\ncontract SLA is Staking {\\n    enum Status {\\n        NotVerified,\\n        Respected,\\n        NotRespected\\n    }\\n\\n    struct PeriodSLI {\\n        uint256 timestamp;\\n        uint256 sli;\\n        Status status;\\n    }\\n\\n    string public ipfsHash;\\n    ISLARegistry private _slaRegistry;\\n    ISLORegistry private immutable _sloRegistry;\\n    uint256 public immutable creationBlockNumber;\\n    uint128 public immutable initialPeriodId;\\n    uint128 public immutable finalPeriodId;\\n    IPeriodRegistry.PeriodType public immutable periodType;\\n    /// @dev extra data for customized workflows\\n    uint256[] public severity;\\n    uint256[] public penalty;\\n\\n    bool public terminateContract = false;\\n    uint256 public nextVerifiablePeriod;\\n\\n    /// @dev periodId=>PeriodSLI mapping\\n    mapping(uint256 => PeriodSLI) public periodSLIs;\\n\\n    /// @notice An event that is emitted when creating a new SLI\\n    event SLICreated(uint256 timestamp, uint256 sli, uint256 periodId);\\n\\n    /// @notice An event that is emitted when staking in User or Provider Pool\\n    event Stake(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount,\\n        Position position\\n    );\\n    /// @notice An event that is emitted when withdrawing from Provider Pool\\n    event ProviderWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when withdrawing from User Pool\\n    event UserWithdraw(\\n        address indexed tokenAddress,\\n        uint256 indexed periodId,\\n        address indexed caller,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event that is emitted when toggles termination\\n    event ToggleTermination(bool termination);\\n\\n    /// @dev Modifier ensuring that certain function can only be called by Messenger\\n    modifier onlyMessenger() {\\n        require(msg.sender == messengerAddress, 'not messenger');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor(\\n        address _owner,\\n        bool _whitelisted,\\n        IPeriodRegistry.PeriodType _periodType,\\n        address _messengerAddress,\\n        uint128 _initialPeriodId,\\n        uint128 _finalPeriodId,\\n        uint128 _slaID,\\n        string memory _ipfsHash,\\n        uint256[] memory _severity,\\n        uint256[] memory _penalty,\\n        uint64 _leverage\\n    )\\n        Staking(\\n            ISLARegistry(msg.sender),\\n            _whitelisted,\\n            _slaID,\\n            _leverage,\\n            _owner,\\n            _messengerAddress\\n        )\\n    {\\n        transferOwnership(_owner);\\n        ipfsHash = _ipfsHash;\\n        _slaRegistry = ISLARegistry(msg.sender);\\n        _sloRegistry = ISLORegistry(_slaRegistry.sloRegistry());\\n        creationBlockNumber = block.number;\\n        initialPeriodId = _initialPeriodId;\\n        finalPeriodId = _finalPeriodId;\\n        periodType = _periodType;\\n        severity = _severity;\\n        penalty = _penalty;\\n        nextVerifiablePeriod = _initialPeriodId;\\n    }\\n\\n    /**\\n     * @notice External function that registers new SLI\\n     * @param _sli sli value to register\\n     * @param _periodId period id of new sli\\n     */\\n    function registerSLI(uint256 _sli, uint256 _periodId)\\n        external\\n        onlyMessenger\\n    {\\n        require(_periodId == nextVerifiablePeriod, 'invalid period id');\\n        emit SLICreated(block.timestamp, _sli, _periodId);\\n        nextVerifiablePeriod = _periodId + 1;\\n        PeriodSLI storage periodSLI = periodSLIs[_periodId];\\n        periodSLI.sli = _sli;\\n        periodSLI.timestamp = block.timestamp;\\n\\n        uint256 deviation = _sloRegistry.getDeviation(\\n            _sli,\\n            address(this),\\n            severity,\\n            penalty\\n        );\\n\\n        if (_sloRegistry.isRespected(_sli, address(this))) {\\n            periodSLI.status = Status.Respected;\\n            _setProviderReward(_periodId, deviation);\\n        } else {\\n            periodSLI.status = Status.NotRespected;\\n            _setUserReward(_periodId, deviation);\\n        }\\n    }\\n\\n    /**\\n     @notice External view function to see if a period id is allowed or not\\n     @param _periodId period id to check\\n     @return bool allowed or not\\n     */\\n    function isAllowedPeriod(uint256 _periodId) external view returns (bool) {\\n        return _periodId >= initialPeriodId && _periodId <= finalPeriodId;\\n    }\\n\\n    /**\\n     * @notice Public view function to check if the contract is finished\\n     * @dev finish condition = should pass last verified period and final period should not be verified.\\n     * @return Bool whether finished or not\\n     */\\n    function contractFinished() public view returns (bool) {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n        return ((block.timestamp >= endOfLastValidPeriod &&\\n            periodSLIs[finalPeriodId].status != Status.NotVerified) ||\\n            terminateContract);\\n    }\\n\\n    /**\\n     * @notice External function to stake tokens in User or Provider Pools\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     * @param _position User or Provider pool\\n     */\\n    function stakeTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        Position _position\\n    ) external {\\n        require(!contractFinished(), 'This SLA has finished.');\\n\\n        require(_amount > 0, 'Stake must be greater than 0.');\\n\\n        _stake(_tokenAddress, nextVerifiablePeriod, _amount, _position);\\n\\n        emit Stake(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount,\\n            _position\\n        );\\n\\n        IStakeRegistry(_slaRegistry.stakeRegistry()).registerStakedSla(\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from Provider Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawProviderTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawProviderTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit ProviderWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice External function to withdraw staked tokens from User Pool\\n     * @param _amount amount to withdraw\\n     * @param _tokenAddress token address to withdraw\\n     */\\n    function withdrawUserTokens(uint256 _amount, address _tokenAddress)\\n        external\\n    {\\n        _withdrawUserTokens(\\n            _amount,\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            contractFinished()\\n        );\\n\\n        emit UserWithdraw(\\n            _tokenAddress,\\n            nextVerifiablePeriod,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    function toggleTermination() external onlyOwner {\\n        (, uint256 endOfLastValidPeriod) = _periodRegistry.getPeriodStartAndEnd(\\n            periodType,\\n            finalPeriodId\\n        );\\n\\n        require(\\n            block.timestamp >= endOfLastValidPeriod,\\n            'This SLA has not finished.'\\n        );\\n\\n        terminateContract = !terminateContract;\\n\\n        emit ToggleTermination(terminateContract);\\n    }\\n}\\n\",\"keccak256\":\"0x1dd3de12f41a12456884c2787e73de642919a0ea34a160dede3bfbc570ccfda1\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/SLARegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './SLA.sol';\\nimport './SLORegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessengerRegistry.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/ISLARegistry.sol';\\n\\n/**\\n * @title SLARegistry\\n * @notice This is a registry contract that deploy SLAs and manage them\\n */\\ncontract SLARegistry is ISLARegistry, ReentrancyGuard {\\n    /// @notice SLO registry\\n    address private _sloRegistry;\\n    /// @notice Periods registry\\n    address private _periodRegistry;\\n    /// @notice Messengers registry\\n    address private _messengerRegistry;\\n    /// @notice Stake registry\\n    address private _stakeRegistry;\\n    /// @notice stores the addresses of created SLAs\\n    SLA[] public SLAs;\\n    /// @notice stores the indexes of service level agreements owned by an user\\n    mapping(address => uint256[]) private _userToSLAIndexes;\\n    /// @notice to check if registered SLA\\n    mapping(address => bool) private _registeredSLAs;\\n    /// @notice value to lock past periods on SLA deployment\\n    bool private immutable _checkPastPeriod;\\n\\n    /// @notice An event that emitted when creating a new SLA\\n    event SLACreated(SLA indexed sla, address indexed owner);\\n\\n    /// @notice An event that is emitted when requesting SLI\\n    event SLIRequested(\\n        uint256 periodId,\\n        address indexed sla,\\n        address indexed caller\\n    );\\n\\n    /// @notice An event that is emitted when returning locked tokens back to sla owner\\n    event ReturnLockedValue(address indexed sla, address indexed caller);\\n\\n    /**\\n     * @notice Constructor\\n     * @param sloRegistry_ address of SLORegistry\\n     * @param periodRegistry_ address of PeriodRegistry\\n     * @param messengerRegistry_ address of MessengerRegistry\\n     * @param stakeRegistry_ address of StakeRegistry\\n     * @param checkPastPeriod_ value to lock past periods on SLA deployment\\n     */\\n    constructor(\\n        address sloRegistry_,\\n        address periodRegistry_,\\n        address messengerRegistry_,\\n        address stakeRegistry_,\\n        bool checkPastPeriod_\\n    ) {\\n        require(sloRegistry_ != address(0x0), 'invalid sloRegistry address');\\n        require(\\n            periodRegistry_ != address(0x0),\\n            'invalid periodRegistry address'\\n        );\\n        require(\\n            messengerRegistry_ != address(0x0),\\n            'invalid messengerRegistry address'\\n        );\\n        require(\\n            stakeRegistry_ != address(0x0),\\n            'invalid stakeRegistry address'\\n        );\\n        _sloRegistry = sloRegistry_;\\n        SLORegistry(_sloRegistry).setSLARegistry();\\n        _periodRegistry = periodRegistry_;\\n        _stakeRegistry = stakeRegistry_;\\n        IStakeRegistry(_stakeRegistry).setSLARegistry();\\n        _messengerRegistry = messengerRegistry_;\\n        IMessengerRegistry(_messengerRegistry).setSLARegistry();\\n        _checkPastPeriod = checkPastPeriod_;\\n    }\\n\\n    /**\\n     * @notice function to create a new SLA\\n     * @param sloValue_ slo value\\n     * @param sloType_ slo type\\n     * @param whitelisted_ whitelist\\n     * @param messengerAddress_ address of messenger\\n     * @param periodType_ period type\\n     * @param initialPeriodId_ starting period id\\n     * @param finalPeriodId_ ending period id\\n     * @param ipfsHash_ ipfshash\\n     * @param severity_ severity\\n     * @param penalty_ penalty per severity level\\n     * @param leverage_ leverage\\n     */\\n    function createSLA(\\n        uint120 sloValue_,\\n        SLORegistry.SLOType sloType_,\\n        bool whitelisted_,\\n        address messengerAddress_,\\n        IPeriodRegistry.PeriodType periodType_,\\n        uint128 initialPeriodId_,\\n        uint128 finalPeriodId_,\\n        string memory ipfsHash_,\\n        uint256[] memory severity_,\\n        uint256[] memory penalty_,\\n        uint64 leverage_\\n    ) public nonReentrant {\\n        require(\\n            IPeriodRegistry(_periodRegistry).isValidPeriod(\\n                periodType_,\\n                initialPeriodId_\\n            ),\\n            'first id invalid'\\n        );\\n        require(\\n            IPeriodRegistry(_periodRegistry).isValidPeriod(\\n                periodType_,\\n                finalPeriodId_\\n            ),\\n            'final id invalid'\\n        );\\n        require(\\n            IPeriodRegistry(_periodRegistry).isInitializedPeriod(periodType_),\\n            'period not initialized'\\n        );\\n        require(finalPeriodId_ >= initialPeriodId_, 'invalid final/initial');\\n\\n        if (_checkPastPeriod) {\\n            require(\\n                !IPeriodRegistry(_periodRegistry).periodHasStarted(\\n                    periodType_,\\n                    initialPeriodId_\\n                ),\\n                'past period'\\n            );\\n        }\\n        require(\\n            IMessengerRegistry(_messengerRegistry).registeredMessengers(\\n                messengerAddress_\\n            ),\\n            'invalid messenger'\\n        );\\n        require(\\n            severity_.length == penalty_.length,\\n            'severity and penalty length should match'\\n        );\\n\\n        SLA sla = new SLA(\\n            msg.sender,\\n            whitelisted_,\\n            periodType_,\\n            messengerAddress_,\\n            initialPeriodId_,\\n            finalPeriodId_,\\n            uint128(SLAs.length),\\n            ipfsHash_,\\n            severity_,\\n            penalty_,\\n            leverage_\\n        );\\n\\n        SLORegistry(_sloRegistry).registerSLO(\\n            sloValue_,\\n            sloType_,\\n            address(sla)\\n        );\\n        IStakeRegistry(_stakeRegistry).lockDSLAValue(\\n            msg.sender,\\n            address(sla),\\n            finalPeriodId_ - initialPeriodId_ + 1\\n        );\\n        _userToSLAIndexes[msg.sender].push(SLAs.length);\\n        SLAs.push(sla);\\n        _registeredSLAs[address(sla)] = true;\\n        emit SLACreated(sla, msg.sender);\\n    }\\n\\n    /**\\n     * @notice function to request sli for specific period id\\n     * @dev requested period should be finished && sla shouldn't be verified, and\\n     * it distributes verification rewards to the caller\\n     * @param _periodId period id to request\\n     * @param _sla address of SLA\\n     * @param _ownerApproval owner approval\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        SLA _sla,\\n        bool _ownerApproval\\n    ) public nonReentrant {\\n        require(isRegisteredSLA(address(_sla)), 'This SLA is not valid.');\\n        require(\\n            _periodId == _sla.nextVerifiablePeriod(),\\n            'not nextVerifiablePeriod'\\n        );\\n        (, , SLA.Status status) = _sla.periodSLIs(_periodId);\\n        require(\\n            status == SLA.Status.NotVerified,\\n            'This SLA has already been verified.'\\n        );\\n        require(_sla.isAllowedPeriod(_periodId), 'invalid period');\\n        require(\\n            IPeriodRegistry(_periodRegistry).periodIsFinished(\\n                _sla.periodType(),\\n                _periodId\\n            ),\\n            'period unfinished'\\n        );\\n        emit SLIRequested(_periodId, address(_sla), msg.sender);\\n        IMessenger(_sla.messengerAddress()).requestSLI(\\n            _periodId,\\n            address(_sla),\\n            _ownerApproval,\\n            msg.sender\\n        );\\n        IStakeRegistry(_stakeRegistry).distributeVerificationRewards(\\n            address(_sla),\\n            msg.sender,\\n            _periodId\\n        );\\n    }\\n\\n    /**\\n     * @notice function to return locked tokens back to sla owner\\n     * @dev only SLA owner can call this function for only registered SLAs\\n     * @param _sla address of SLA\\n     */\\n    function returnLockedValue(SLA _sla) external {\\n        require(isRegisteredSLA(address(_sla)), 'This SLA is not valid.');\\n        require(msg.sender == _sla.owner(), 'Only the SLA owner can do this.');\\n        require(_sla.contractFinished(), 'This SLA has not finished.');\\n        emit ReturnLockedValue(address(_sla), msg.sender);\\n        IStakeRegistry(_stakeRegistry).returnLockedValue(address(_sla));\\n    }\\n\\n    /**\\n     * @notice function to register a new messenger\\n     * @param _messengerAddress address of messenger to register\\n     * @param _specificationUrl specification url of messenger\\n     */\\n    function registerMessenger(\\n        address _messengerAddress,\\n        string memory _specificationUrl\\n    ) public nonReentrant {\\n        IMessengerRegistry(_messengerRegistry).registerMessenger(\\n            msg.sender,\\n            _messengerAddress,\\n            _specificationUrl\\n        );\\n        IMessenger(_messengerAddress).setSLARegistry();\\n    }\\n\\n    /**\\n     * @notice external view function that returns SLAs created by user\\n     * @param _user user address\\n     * @return SLAList an array of SLAs created by _user\\n     */\\n    function userSLAs(address _user)\\n        external\\n        view\\n        returns (SLA[] memory SLAList)\\n    {\\n        uint256 count = _userToSLAIndexes[_user].length;\\n        SLAList = new SLA[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            SLAList[i] = (SLAs[_userToSLAIndexes[_user][i]]);\\n        }\\n    }\\n\\n    /**\\n     * @notice external view function that returns an array of all SLAs\\n     * @return array of SLAs\\n     */\\n    function allSLAs() external view returns (SLA[] memory) {\\n        return (SLAs);\\n    }\\n\\n    /**\\n     * @notice public view function that returns if the sla is registered\\n     * @param _slaAddress address of SLA to check registration\\n     * @return boolean of registration\\n     */\\n    function isRegisteredSLA(address _slaAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _registeredSLAs[_slaAddress];\\n    }\\n\\n    /**\\n     * @notice external view function that returns the address of SLORegistry\\n     * @return address of SLORegistry\\n     */\\n    function sloRegistry() external view override returns (address) {\\n        return _sloRegistry;\\n    }\\n\\n    /**\\n     * @notice external view function that returns the address of PeriodRegistry\\n     * @return address of PeriodRegistry\\n     */\\n    function periodRegistry() external view override returns (address) {\\n        return _periodRegistry;\\n    }\\n\\n    /**\\n     * @notice external view function that returns the address of MessengerRegistry\\n     * @return address of MessengerRegistry\\n     */\\n    function messengerRegistry() external view override returns (address) {\\n        return _messengerRegistry;\\n    }\\n\\n    /**\\n     * @notice external view function that returns the address of StakeRegistry\\n     * @return address of StakeRegistry\\n     */\\n    function stakeRegistry() external view override returns (address) {\\n        return _stakeRegistry;\\n    }\\n\\n    /**\\n     * @notice external view function that returns the value to lock past periods on SLA deployment\\n     * @return boolean that represent if it check the past periods or not\\n     */\\n    function checkPastPeriod() external view returns (bool) {\\n        return _checkPastPeriod;\\n    }\\n}\\n\",\"keccak256\":\"0xecb88b63e13940d5ccf53a7388939ee7e72a57148d563b46447fed638dd2f112\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/SLORegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\n/**\\n * @title SLORegistry\\n * @dev SLORegistry is a contract for handling creation of service level\\n * objectives and querying those service level objectives\\n */\\ncontract SLORegistry {\\n    enum SLOType {\\n        EqualTo,\\n        NotEqualTo,\\n        SmallerThan,\\n        SmallerOrEqualTo,\\n        GreaterThan,\\n        GreaterOrEqualTo\\n    }\\n\\n    struct SLO {\\n        // half storage slot\\n        uint120 sloValue;\\n        SLOType sloType;\\n    }\\n\\n    /// @dev SLO Registered event\\n    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\\n\\n    /// @notice maximum cap of deviation percent = 25%, base 10000\\n    uint16 private constant deviationCapRate = 2500;\\n    /// @notice address of SLARegistry contract\\n    address private slaRegistry;\\n    /// @dev sla address => SLO mapping\\n    mapping(address => SLO) public registeredSLO;\\n\\n    /// @dev Modifier ensuring that certain function can only be called by SLARegistry\\n    modifier onlySLARegistry() {\\n        require(\\n            msg.sender == slaRegistry,\\n            'Should only be called using the SLARegistry contract'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice function to set SLARegistry address\\n     * @dev this function can be called only once\\n     */\\n    function setSLARegistry() public {\\n        // Only able to trigger this function once\\n        require(\\n            address(slaRegistry) == address(0),\\n            'SLARegistry address has already been set'\\n        );\\n        slaRegistry = msg.sender;\\n    }\\n\\n    /**\\n     * @notice public function for creating service level objectives\\n     * @dev only SLARegistry can call this function\\n     * @param _sloValue 1. -\\n     * @param _sloType 2. -\\n     * @param _slaAddress 3. -\\n     */\\n    function registerSLO(\\n        uint120 _sloValue,\\n        SLOType _sloType,\\n        address _slaAddress\\n    ) public onlySLARegistry {\\n        registeredSLO[_slaAddress] = SLO({\\n            sloValue: _sloValue,\\n            sloType: _sloType\\n        });\\n        emit SLORegistered(_slaAddress, _sloValue, _sloType);\\n    }\\n\\n    /**\\n     * @dev external view function to check a value against the SLO\\n     * @param _value The SLI value to check against the SLO\\n     * @return boolean with the SLO honoured state\\n     */\\n    function isRespected(uint256 _value, address _slaAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        SLOType sloType = registeredSLO[_slaAddress].sloType;\\n        uint256 sloValue = registeredSLO[_slaAddress].sloValue;\\n\\n        if (sloType == SLOType.EqualTo) {\\n            return _value == sloValue;\\n        } else if (sloType == SLOType.NotEqualTo) {\\n            return _value != sloValue;\\n        } else if (sloType == SLOType.SmallerThan) {\\n            return _value < sloValue;\\n        } else if (sloType == SLOType.SmallerOrEqualTo) {\\n            return _value <= sloValue;\\n        } else if (sloType == SLOType.GreaterThan) {\\n            return _value > sloValue;\\n        } else {\\n            // sloType == SLOType.GreaterOrEqualTo\\n            return _value >= sloValue;\\n        }\\n    }\\n\\n    /**\\n     * @dev external view function to get the percentage difference between SLI and SLO\\n     * @param _sli The SLI value to check against the SLO\\n     * @param _slaAddress The SLO value to check against the SLI\\n     * @return uint256 with the deviation value for the selected sli and sla, base 10000\\n     */\\n    function getDeviation(\\n        uint256 _sli,\\n        address _slaAddress,\\n        uint256[] memory severity,\\n        uint256[] memory penalty\\n    ) external view returns (uint256) {\\n        SLOType sloType = registeredSLO[_slaAddress].sloType;\\n        uint256 sloValue = registeredSLO[_slaAddress].sloValue;\\n\\n        uint256 deviation = 0;\\n\\n        for (uint256 i = 0; i < severity.length; i++) {\\n            if (_sli >= severity[i]) {\\n                deviation = penalty[i];\\n            }\\n        }\\n\\n        if (deviation == 0) {\\n            // Ensures a positive deviation for greater / small comparisons\\n            // The deviation is the percentage difference between SLI and SLO\\n            //                          | sloValue - sli |\\n            // formula =>  deviation = -------------------- %\\n            //                          (sli + sloValue) / 2\\n            deviation =\\n                ((_sli >= sloValue ? _sli - sloValue : sloValue - _sli) *\\n                    20000) /\\n                (_sli + sloValue);\\n        }\\n\\n        // Enforces a deviation capped at 25%\\n        if (deviation > deviationCapRate) {\\n            deviation = deviationCapRate;\\n        }\\n\\n        if (sloType == SLOType.EqualTo) {\\n            // Fixed deviation for this comparison, the reward percentage is the cap\\n            return deviationCapRate;\\n        } else if (sloType == SLOType.NotEqualTo) {\\n            // Fixed deviation for this comparison, the reward percentage is the cap\\n            return deviationCapRate;\\n        } else if (sloType == SLOType.SmallerThan) {\\n            return deviation;\\n        } else if (sloType == SLOType.SmallerOrEqualTo) {\\n            return deviation;\\n        } else if (sloType == SLOType.GreaterThan) {\\n            return deviation;\\n        } else {\\n            // sloType == SLOType.GreaterOrEqualTo\\n            return deviation;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7816d775fc8218a24936bd260e15208c53f29cbff9e4935414cf1bde7ce78ca\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './interfaces/IStakeRegistry.sol';\\nimport './interfaces/ISLARegistry.sol';\\nimport './interfaces/IPeriodRegistry.sol';\\nimport './interfaces/IMessenger.sol';\\nimport './interfaces/IERC20Query.sol';\\nimport './dToken.sol';\\n\\n/**\\n * @title Staking\\n * @notice Staking of user and provider pool rewards\\n */\\ncontract Staking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Position of staking\\n    /// @dev OK => Provider Pool (LONG), KO => User Pool (SHORT)\\n    enum Position {\\n        OK,\\n        KO\\n    }\\n\\n    /// @dev StakeRegistry contract\\n    IStakeRegistry private _stakeRegistry;\\n\\n    /// @dev SLARegistry contract\\n    IPeriodRegistry internal immutable _periodRegistry;\\n\\n    /// @dev DSLA token address to burn fees\\n    address private immutable _dslaTokenAddress;\\n    /// @dev messenger address\\n    address public immutable messengerAddress;\\n    /// @dev current SLA id\\n    uint128 public immutable slaID;\\n\\n    /// @dev (tokenAddress=>uint256) total pooled token balance\\n    mapping(address => uint256) public providersPool;\\n\\n    /// @dev (userAddress=>uint256) provider staking activity\\n    mapping(address => uint256) public lastProviderStake;\\n\\n    /// @dev (tokenAddress=>uint256) user staking\\n    mapping(address => uint256) public usersPool;\\n\\n    /// @dev (userAddress=>uint256) user staking activity\\n    mapping(address => uint256) public lastUserStake;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for users\\n    mapping(address => dToken) public duTokenRegistry;\\n\\n    ///@dev (tokenAddress=>dTokenAddress) to keep track of dToken for provider\\n    mapping(address => dToken) public dpTokenRegistry;\\n\\n    /// @dev (slaOwner=>bool)\\n    mapping(address => bool) public registeredStakers;\\n\\n    /// @dev number of stakers\\n    uint256 public stakersNum;\\n\\n    /// @dev array with the allowed tokens addresses for the current SLA\\n    address[] public allowedTokens;\\n\\n    /// @dev corresponds to the burn rate of DSLA tokens, but divided by 1000 i.e burn percentage = burnRate/1000 %\\n    uint256 public immutable DSLAburnRate;\\n\\n    /// @dev boolean to declare if contract is whitelisted\\n    bool public immutable whitelistedContract;\\n\\n    /// @dev (userAddress=bool) to declare whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    uint64 public immutable leverage;\\n\\n    /// @dev claiming fees when a user claim tokens, base 10000\\n    uint16 private constant ownerRewardsRate = 30; // 0.3%, base 10000\\n    uint16 private constant protocolRewardsRate = 15; // 0.15%, base 10000\\n    uint16 private constant rewardsCapRate = 2500; // 25%, base 10000\\n\\n    modifier onlyAllowedToken(address _token) {\\n        require(isAllowedToken(_token), 'This token is not allowed.');\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelistedContract) {\\n            require(whitelist[msg.sender], 'not whitelisted');\\n        }\\n        _;\\n    }\\n\\n    /// @notice An event that emitted when generating provider rewards\\n    event ProviderRewardGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 rewardPercentage,\\n        uint256 rewardPercentagePrecision,\\n        uint256 rewardAmount\\n    );\\n\\n    /// @notice An event that emitted when generating user rewards\\n    event UserCompensationGenerated(\\n        uint256 indexed periodId,\\n        address indexed tokenAddress,\\n        uint256 userStake,\\n        uint256 leverage,\\n        uint256 compensation\\n    );\\n\\n    /// @notice An event that emitted when owner adds new dTokens\\n    event DTokensCreated(\\n        address indexed tokenAddress,\\n        address indexed dpTokenAddress,\\n        string dpTokenName,\\n        string dpTokenSymbol,\\n        address indexed duTokenAddress,\\n        string duTokenName,\\n        string duTokenSymbol\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param slaRegistry_ SLARegistry address\\n     * @param whitelistedContract_ Declare if contract is whitelisted\\n     * @param slaID_ ID of SLA\\n     * @param leverage_ Leverage of reward\\n     * @param contractOwner_ SLA Owner address\\n     * @param messengerAddress_ Messenger Address\\n     */\\n    constructor(\\n        ISLARegistry slaRegistry_,\\n        bool whitelistedContract_,\\n        uint128 slaID_,\\n        uint64 leverage_,\\n        address contractOwner_,\\n        address messengerAddress_\\n    ) {\\n        require(contractOwner_ != address(0x0), 'invalid owner address');\\n        require(messengerAddress_ != address(0x0), 'invalid messenger address');\\n        _stakeRegistry = IStakeRegistry(slaRegistry_.stakeRegistry());\\n        _periodRegistry = IPeriodRegistry(slaRegistry_.periodRegistry());\\n        whitelistedContract = whitelistedContract_;\\n        (\\n            uint256 _DSLAburnRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint64 _maxLeverage,\\n\\n        ) = _stakeRegistry.getStakingParameters();\\n        _dslaTokenAddress = _stakeRegistry.DSLATokenAddress();\\n        DSLAburnRate = _DSLAburnRate;\\n        whitelist[contractOwner_] = true;\\n        slaID = slaID_;\\n        require(\\n            leverage_ <= _maxLeverage && leverage_ >= 1,\\n            'incorrect leverage'\\n        );\\n        leverage = leverage_;\\n        messengerAddress = messengerAddress_;\\n    }\\n\\n    /**\\n     * @notice Add multiple addresses to whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to whitelist\\n     */\\n    function addUsersToWhitelist(address[] memory _userAddresses)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (!whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove multiple addresses from whitelist\\n     * @dev only owner can call this function\\n     * @param _userAddresses Addresses to remove\\n     */\\n    function removeUsersFromWhitelist(address[] calldata _userAddresses)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 index = 0; index < _userAddresses.length; index++) {\\n            if (whitelist[_userAddresses[index]]) {\\n                whitelist[_userAddresses[index]] = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to allowedTokens list\\n     * @dev It creates dpToken(Provider) and duToken(User) that represents the position.\\n            only owner can call this function\\n     * @param _tokenAddress Token address to allow\\n     */\\n    function addAllowedTokens(address _tokenAddress) external onlyOwner {\\n        (, , , , , , uint256 maxTokenLength, , ) = _stakeRegistry\\n            .getStakingParameters();\\n\\n        require(\\n            !isAllowedToken(_tokenAddress),\\n            'This token has been allowed already.'\\n        );\\n\\n        require(\\n            _stakeRegistry.isAllowedToken(_tokenAddress),\\n            'This token is not allowed.'\\n        );\\n        allowedTokens.push(_tokenAddress);\\n\\n        require(maxTokenLength >= allowedTokens.length, 'max token length');\\n\\n        string memory duTokenName = IMessenger(messengerAddress).spName();\\n        string memory duTokenSymbol = IMessenger(messengerAddress)\\n            .spSymbolSlaId(slaID);\\n        string memory dpTokenName = IMessenger(messengerAddress).lpName();\\n        string memory dpTokenSymbol = IMessenger(messengerAddress)\\n            .lpSymbolSlaId(slaID);\\n\\n        uint8 decimals = IERC20Query(_tokenAddress).decimals();\\n\\n        dToken duToken = dToken(\\n            _stakeRegistry.createDToken(duTokenName, duTokenSymbol, decimals)\\n        );\\n\\n        dToken dpToken = dToken(\\n            _stakeRegistry.createDToken(dpTokenName, dpTokenSymbol, decimals)\\n        );\\n\\n        dpTokenRegistry[_tokenAddress] = dpToken;\\n        duTokenRegistry[_tokenAddress] = duToken;\\n        emit DTokensCreated(\\n            _tokenAddress,\\n            address(dpToken),\\n            dpTokenName,\\n            dpTokenSymbol,\\n            address(duToken),\\n            duTokenName,\\n            duTokenSymbol\\n        );\\n    }\\n\\n    /**\\n     * @notice Stake allowed assets in User or Provider pools until next period\\n     * @param _tokenAddress Address of token to stake\\n     * @param _nextVerifiablePeriod Next verifiable PeriodId\\n     * @param _amount Amount of tokens to stake\\n     * @param _position Staking position, OK or KO\\n     */\\n    function _stake(\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        uint256 _amount,\\n        Position _position\\n    ) internal onlyAllowedToken(_tokenAddress) onlyWhitelisted nonReentrant {\\n        IERC20(_tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // DSLA-SP proofs of SLA Position\\n        if (_position == Position.KO) {\\n            require(\\n                (usersPool[_tokenAddress] + _amount) * leverage <=\\n                    providersPool[_tokenAddress],\\n                'Stake exceeds leveraged cap.'\\n            );\\n\\n            dToken duToken = duTokenRegistry[_tokenAddress];\\n            uint256 p0 = duToken.totalSupply();\\n\\n            // If there are no minted tokens, then mint them 1:1\\n            if (p0 == 0) {\\n                duToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                duToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / usersPool[_tokenAddress]\\n                );\\n            }\\n            usersPool[_tokenAddress] += _amount;\\n            lastUserStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        // DSLA-LP proofs of SLA Position\\n        if (_position == Position.OK) {\\n            dToken dpToken = dpTokenRegistry[_tokenAddress];\\n            uint256 p0 = dpToken.totalSupply();\\n\\n            if (p0 == 0) {\\n                dpToken.mint(msg.sender, _amount);\\n            } else {\\n                // mint dTokens proportionally\\n                dpToken.mint(\\n                    msg.sender,\\n                    (_amount * p0) / providersPool[_tokenAddress]\\n                );\\n            }\\n            providersPool[_tokenAddress] += _amount;\\n            lastProviderStake[msg.sender] = _nextVerifiablePeriod;\\n        }\\n\\n        if (!registeredStakers[msg.sender]) {\\n            registeredStakers[msg.sender] = true;\\n            stakersNum++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of provider pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setProviderReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 reward = (providersPool[tokenAddress] * _rewardPercentage) /\\n                (leverage * _precision);\\n\\n            // Reward must be less than 25% of usersPool to ensure payout at all time\\n            if (\\n                reward > (usersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                reward =\\n                    (usersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            usersPool[tokenAddress] -= reward;\\n            providersPool[tokenAddress] += reward;\\n\\n            emit ProviderRewardGenerated(\\n                _periodId,\\n                tokenAddress,\\n                _rewardPercentage,\\n                _precision,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set rewards of user pool for specific periodId\\n     * @param _periodId Period ID to set rewards\\n     * @param _rewardPercentage Percentage to allocate for rewards, base 10000\\n     */\\n    function _setUserReward(uint256 _periodId, uint256 _rewardPercentage)\\n        internal\\n    {\\n        uint256 _precision = 10000;\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            address tokenAddress = allowedTokens[index];\\n\\n            uint256 compensation = (usersPool[tokenAddress] *\\n                leverage *\\n                _rewardPercentage) / _precision;\\n\\n            // Compensation must be less than 25% of providersPool to ensure payout at all time\\n            if (\\n                compensation >\\n                (providersPool[tokenAddress] * rewardsCapRate) / _precision\\n            ) {\\n                compensation =\\n                    (providersPool[tokenAddress] * _rewardPercentage) /\\n                    _precision;\\n            }\\n\\n            providersPool[tokenAddress] -= compensation;\\n            usersPool[tokenAddress] += compensation;\\n\\n            emit UserCompensationGenerated(\\n                _periodId,\\n                tokenAddress,\\n                usersPool[tokenAddress],\\n                leverage,\\n                compensation\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from Provider Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawProviderTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastProviderStake[msg.sender] < _nextVerifiablePeriod,\\n                'Provider lock-up until the next verification.'\\n            );\\n\\n            // Allow provider withdrawal as long as the provider pool exceeds the leveraged user pool\\n            require(\\n                providersPool[_tokenAddress] - _amount >=\\n                    usersPool[_tokenAddress] * leverage,\\n                'Withdrawal exceeds leveraged cap.'\\n            );\\n        }\\n\\n        dToken dpToken = dpTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the Provider Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDPTokens)\\n        dpToken.burnFrom(\\n            msg.sender,\\n            (_amount * dpToken.totalSupply()) / providersPool[_tokenAddress]\\n        );\\n        providersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens from User Pool\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @param _nextVerifiablePeriod Next verifiable period id of current period\\n     * @param _contractFinished Present if SLA is terminated or finished\\n     */\\n    function _withdrawUserTokens(\\n        uint256 _amount,\\n        address _tokenAddress,\\n        uint256 _nextVerifiablePeriod,\\n        bool _contractFinished\\n    ) internal onlyAllowedToken(_tokenAddress) nonReentrant {\\n        if (!_contractFinished) {\\n            require(\\n                lastUserStake[msg.sender] < _nextVerifiablePeriod,\\n                'User lock-up until the next verification.'\\n            );\\n        }\\n\\n        dToken duToken = duTokenRegistry[_tokenAddress];\\n        // Burn duTokens in a way that doesn't affect the User Pool / DSLA-SP Pool average\\n        // t0/p0 = (t0-_amount)/(p0-burnedDUTokens)\\n        duToken.burnFrom(\\n            msg.sender,\\n            (_amount * duToken.totalSupply()) / usersPool[_tokenAddress]\\n        );\\n        usersPool[_tokenAddress] -= _amount;\\n        uint256 outstandingAmount = _distributeClaimingRewards(\\n            _amount,\\n            _tokenAddress\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, outstandingAmount);\\n    }\\n\\n    /**\\n     * @notice Distribute rewards to owner and protocol when user claims\\n     * @param _amount Amount to withdraw\\n     * @param _tokenAddress Token address to withdraw\\n     * @return outstandingAmount\\n     */\\n    function _distributeClaimingRewards(uint256 _amount, address _tokenAddress)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 slaOwnerRewards = (_amount * ownerRewardsRate) / 10000;\\n        uint256 protocolRewards = (_amount * protocolRewardsRate) / 10000;\\n        IERC20(_tokenAddress).safeTransfer(owner(), slaOwnerRewards);\\n        IERC20(_tokenAddress).safeTransfer(\\n            _stakeRegistry.owner(),\\n            protocolRewards\\n        );\\n        return _amount - slaOwnerRewards - protocolRewards;\\n    }\\n\\n    /**\\n     * @notice Get number of allowed tokens\\n     * @return Number of allowed tokens\\n     */\\n    function getAllowedTokensLength() external view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    /**\\n     * @notice External view function that returns the number of stakers\\n     * @return Number of stakers\\n     */\\n    function getStakersLength() external view returns (uint256) {\\n        return stakersNum;\\n    }\\n\\n    /**\\n     * @notice Check if the token is allowed or not\\n     * @param _tokenAddress Token address to check allowance\\n     * @return isAllowed\\n     */\\n    function isAllowedToken(address _tokenAddress) public view returns (bool) {\\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\\n            if (allowedTokens[index] == _tokenAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe37dbff42cb0cf45f102ce0f1026d84e20736ce3db22bbf443722d5a9cbfc612\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/dToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\n\\ncontract dToken is ERC20PresetMinterPauser {\\n    uint8 _decimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals_\\n    ) ERC20PresetMinterPauser(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n\\n        _decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x8c905b915de337f5fd07e2929f5c20f958a123242f1945c6731181a763e5c5e0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IERC20Query.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IERC20Query {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x0e1abfa7f467437e9a5f1c97a512b8314689cb2fda6f0d8bf9fe102958d42acb\",\"license\":\"GPL-2.0-or-later\"},\"@dsla-protocol/core/contracts/interfaces/IMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title IMessenger\\n * @dev Interface to create new Messenger contract to add lo Messenger lists\\n */\\n\\nabstract contract IMessenger is Ownable {\\n    struct SLIRequest {\\n        address slaAddress;\\n        uint256 periodId;\\n    }\\n\\n    /**\\n     * @dev event emitted when created a new chainlink request\\n     * @param caller 1. Requester's address\\n     * @param requestsCounter 2. total count of requests\\n     * @param requestId 3. id of the Chainlink request\\n     */\\n    event SLIRequested(\\n        address indexed caller,\\n        uint256 requestsCounter,\\n        bytes32 requestId\\n    );\\n\\n    /**\\n     * @dev event emitted when having a response from Chainlink with the SLI\\n     * @param slaAddress 1. SLA address to store the SLI\\n     * @param periodId 2. period id\\n     * @param requestId 3. id of the Chainlink request\\n     * @param chainlinkResponse 4. response from Chainlink\\n     */\\n    event SLIReceived(\\n        address indexed slaAddress,\\n        uint256 periodId,\\n        bytes32 indexed requestId,\\n        bytes32 chainlinkResponse\\n    );\\n\\n    /**\\n     * @dev event emitted when updating Chainlink Job ID\\n     * @param owner 1. Oracle Owner\\n     * @param jobId 2. Updated job id\\n     * @param fee 3. Chainlink request fee\\n     */\\n    event JobIdModified(address indexed owner, bytes32 jobId, uint256 fee);\\n\\n    /**\\n     * @dev sets the SLARegistry contract address and can only be called once\\n     */\\n    function setSLARegistry() external virtual;\\n\\n    /**\\n     * @dev creates a ChainLink request to get a new SLI value for the\\n     * given params. Can only be called by the SLARegistry contract or Chainlink Oracle.\\n     * @param _periodId 1. id of the period to be queried\\n     * @param _slaAddress 2. address of the receiver SLA\\n     * @param _slaAddress 2. if approval by owner or msg.sender\\n     */\\n    function requestSLI(\\n        uint256 _periodId,\\n        address _slaAddress,\\n        bool _ownerApproval,\\n        address _callerAddress\\n    ) external virtual;\\n\\n    /**\\n     * @dev callback function for the Chainlink SLI request which stores\\n     * the SLI in the SLA contract\\n     * @param _requestId the ID of the ChainLink request\\n     * @param answer response object from Chainlink Oracles\\n     */\\n    function fulfillSLI(bytes32 _requestId, uint256 answer) external virtual;\\n\\n    /**\\n     * @dev gets the interfaces precision\\n     */\\n    function messengerPrecision() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev gets the slaRegistryAddress\\n     */\\n    function slaRegistryAddress() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink oracle contract address\\n     */\\n    function oracle() external view virtual returns (address);\\n\\n    /**\\n     * @dev gets the chainlink job id\\n     */\\n    function jobId() external view virtual returns (bytes32);\\n\\n    /**\\n     * @dev gets the fee amount of LINK token\\n     */\\n    function fee() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the requestsCounter\\n     */\\n    function requestsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the fulfillsCounter\\n     */\\n    function fulfillsCounter() external view virtual returns (uint256);\\n\\n    /**\\n     * @dev returns the name of DSLA-LP token\\n     */\\n    function lpName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token\\n     */\\n    function lpSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-LP token with slaId\\n     */\\n    function lpSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    /**\\n     * @dev returns the name of DSLA-SP token\\n     */\\n    function spName() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token\\n     */\\n    function spSymbol() external view virtual returns (string memory);\\n\\n    /**\\n     * @dev returns the symbol of DSLA-SP token with slaId\\n     */\\n    function spSymbolSlaId(uint128 slaId)\\n        external\\n        view\\n        virtual\\n        returns (string memory);\\n\\n    function setChainlinkJobID(bytes32 _newJobId, uint256 _feeMultiplier)\\n        external\\n        virtual;\\n\\n    function retryRequest(address _slaAddress, uint256 _periodId)\\n        external\\n        virtual;\\n}\\n\",\"keccak256\":\"0x363b4c32a70e465f35a939daa788a719cb2ac755764d76fd34222849ea22fbb0\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IMessengerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IMessengerRegistry {\\n    function setSLARegistry() external;\\n\\n    function registerMessenger(\\n        address callerAddress_,\\n        address messengerAddress_,\\n        string calldata specificationUrl_\\n    ) external;\\n\\n    function registeredMessengers(address messengerAddress_)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x864498be20494b56bfcbee216fe30caf9b3bf1c9e643d04ddd97355cf3c65570\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IPeriodRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IPeriodRegistry {\\n    enum PeriodType {\\n        Hourly,\\n        Daily,\\n        Weekly,\\n        BiWeekly,\\n        Monthly,\\n        Yearly\\n    }\\n\\n    function getPeriodStartAndEnd(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function isValidPeriod(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isInitializedPeriod(PeriodType _periodType)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodHasStarted(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function periodIsFinished(PeriodType _periodType, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xa3b4321be33c6a0f8dd7d1cebc53fb9755fb970e4b0e6048ec03cc84aa09a55d\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLARegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLARegistry {\\n    function sloRegistry() external view returns (address);\\n\\n    function periodRegistry() external view returns (address);\\n\\n    function messengerRegistry() external view returns (address);\\n\\n    function stakeRegistry() external view returns (address);\\n\\n    function isRegisteredSLA(address _slaAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x44bc345be784ff06c5a74d93a519a479c12eab73235016ebeaa7318026f749b8\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/ISLORegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface ISLORegistry {\\n    function getDeviation(\\n        uint256 _sli,\\n        address _slaAddress,\\n        uint256[] calldata _severity,\\n        uint256[] calldata _penalty\\n    ) external view returns (uint256);\\n\\n    function isRespected(uint256 _value, address _slaAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x67e3451bac1e5e7b8271d4299f5c81f0bd119b82a8177635b5ce5bb9db154cb7\",\"license\":\"BUSL-1.1\"},\"@dsla-protocol/core/contracts/interfaces/IStakeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IStakeRegistry {\\n    function registerStakedSla(address _owner) external returns (bool);\\n\\n    function setSLARegistry() external;\\n\\n    function lockDSLAValue(\\n        address slaOwner_,\\n        address sla_,\\n        uint256 periodIdsLength_\\n    ) external;\\n\\n    function getStakingParameters()\\n        external\\n        view\\n        returns (\\n            uint256 DSLAburnRate,\\n            uint256 dslaDepositByPeriod,\\n            uint256 dslaPlatformReward,\\n            uint256 dslaMessengerReward,\\n            uint256 dslaUserReward,\\n            uint256 dslaBurnedByVerification,\\n            uint256 maxTokenLength,\\n            uint64 maxLeverage,\\n            bool burnDSLA\\n        );\\n\\n    function DSLATokenAddress() external view returns (address);\\n\\n    function isAllowedToken(address tokenAddress_) external view returns (bool);\\n\\n    function periodIsVerified(address _sla, uint256 _periodId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function returnLockedValue(address sla_) external;\\n\\n    function distributeVerificationRewards(\\n        address _sla,\\n        address _verificationRewardReceiver,\\n        uint256 _periodId\\n    ) external;\\n\\n    function createDToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 decimals\\n    ) external returns (address);\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa0828e4f42d721cb759a2400ca5ff5f132e0a2c92e9b99b1ddcd4d4cfeb23d4c\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200627e3803806200627e833981016040819052620000349162000332565b60016000556001600160a01b038516620000955760405162461bcd60e51b815260206004820152601b60248201527f696e76616c696420736c6f52656769737472792061646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b038416620000ed5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420706572696f6452656769737472792061646472657373000060448201526064016200008c565b6001600160a01b0383166200014f5760405162461bcd60e51b815260206004820152602160248201527f696e76616c6964206d657373656e6765725265676973747279206164647265736044820152607360f81b60648201526084016200008c565b6001600160a01b038216620001a75760405162461bcd60e51b815260206004820152601d60248201527f696e76616c6964207374616b655265676973747279206164647265737300000060448201526064016200008c565b600180546001600160a01b0319166001600160a01b0387169081179091556040805163f388158960e01b8152905163f38815899160048082019260009290919082900301818387803b158015620001fd57600080fd5b505af115801562000212573d6000803e3d6000fd5b5050600280546001600160a01b038089166001600160a01b0319928316179092556004805492871692909116821781556040805163f388158960e01b8152905192945063f3881589935080820192600092909182900301818387803b1580156200027b57600080fd5b505af115801562000290573d6000803e3d6000fd5b5050600380546001600160a01b0319166001600160a01b0387169081179091556040805163f388158960e01b8152905191935063f3881589925060048082019260009290919082900301818387803b158015620002ec57600080fd5b505af115801562000301573d6000803e3d6000fd5b50505050151560805250620003aa92505050565b80516001600160a01b03811681146200032d57600080fd5b919050565b600080600080600060a086880312156200034b57600080fd5b620003568662000315565b9450620003666020870162000315565b9350620003766040870162000315565b9250620003866060870162000315565b9150608086015180151581146200039c57600080fd5b809150509295509295909350565b608051615eb1620003cd600039600081816101da015261107c0152615eb16000f3fe60806040523480156200001157600080fd5b5060043610620000e05760003560e01c8063788164b111620000975780639fc4caa5116200006e5780639fc4caa514620001c6578063a9e43e7f14620001d8578063bb0cbccd146200020b578063c4277a7b146200022257600080fd5b8063788164b1146200018e5780638d2113ed14620001a557806396bddc1014620001bc57600080fd5b80632575d7ca14620000e557806350c5abfe14620000fe578063516c285714620001325780635a7d1e5d14620001585780635c4df332146200016a57806368304835146200017c575b600080fd5b620000fc620000f6366004620014d0565b62000251565b005b620001156200010f366004620014f7565b620004ee565b6040516001600160a01b0390911681526020015b60405180910390f35b6200014962000143366004620014d0565b62000519565b60405162000129919062001523565b6001546001600160a01b031662000115565b6003546001600160a01b031662000115565b6004546001600160a01b031662000115565b620000fc6200019f3660046200158e565b62000640565b620000fc620001b636600462001696565b62000c3d565b6200014962000d30565b6002546001600160a01b031662000115565b7f00000000000000000000000000000000000000000000000000000000000000005b604051901515815260200162000129565b620000fc6200021c366004620017d9565b62000d94565b620001fa62000233366004620014d0565b6001600160a01b031660009081526007602052604090205460ff1690565b6001600160a01b03811660009081526007602052604090205460ff16620002b85760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a6209034b9903737ba103b30b634b21760511b60448201526064015b60405180910390fd5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002f257600080fd5b505afa15801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d91906200190a565b6001600160a01b0316336001600160a01b0316146200038f5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792074686520534c41206f776e65722063616e20646f20746869732e006044820152606401620002af565b806001600160a01b03166396f76f116040518163ffffffff1660e01b815260040160206040518083038186803b158015620003c957600080fd5b505afa158015620003de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040491906200192a565b620004525760405162461bcd60e51b815260206004820152601a60248201527f5468697320534c4120686173206e6f742066696e69736865642e0000000000006044820152606401620002af565b60405133906001600160a01b038316907f892dba94a39dc15a34a9767dc9a0e553ace780857b076507becf599634bfbb6790600090a3600480546040516312baebe560e11b81526001600160a01b0384811693820193909352911690632575d7ca90602401600060405180830381600087803b158015620004d257600080fd5b505af1158015620004e7573d6000803e3d6000fd5b5050505050565b60058181548110620004ff57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600660205260409020546060908067ffffffffffffffff811115620005515762000551620015d5565b6040519080825280602002602001820160405280156200057b578160200160208202803683370190505b50915060005b8181101562000639576001600160a01b038416600090815260066020526040902080546005919083908110620005bb57620005bb6200194a565b906000526020600020015481548110620005d957620005d96200194a565b9060005260206000200160009054906101000a90046001600160a01b03168382815181106200060c576200060c6200194a565b6001600160a01b039092166020928302919091019091015280620006308162001976565b91505062000581565b5050919050565b60026000541415620006665760405162461bcd60e51b8152600401620002af9062001994565b600260009081556001600160a01b03831681526007602052604090205460ff16620006cd5760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a6209034b9903737ba103b30b634b21760511b6044820152606401620002af565b816001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200070757600080fd5b505afa1580156200071c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007429190620019cb565b8314620007925760405162461bcd60e51b815260206004820152601860248201527f6e6f74206e65787456657269666961626c65506572696f6400000000000000006044820152606401620002af565b6040516320c876ef60e11b8152600481018490526000906001600160a01b03841690634190edde9060240160606040518083038186803b158015620007d657600080fd5b505afa158015620007eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008119190620019e5565b9250600091506200081f9050565b81600281111562000834576200083462001a19565b146200088f5760405162461bcd60e51b815260206004820152602360248201527f5468697320534c412068617320616c7265616479206265656e2076657269666960448201526232b21760e91b6064820152608401620002af565b60405163021eef7f60e01b8152600481018590526001600160a01b0384169063021eef7f9060240160206040518083038186803b158015620008d057600080fd5b505afa158015620008e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090b91906200192a565b6200094a5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081c195c9a5bd960921b6044820152606401620002af565b600260009054906101000a90046001600160a01b03166001600160a01b031663c7b6ceb4846001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009a857600080fd5b505afa158015620009bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e3919062001a2f565b866040518363ffffffff1660e01b815260040162000a0392919062001a6e565b60206040518083038186803b15801562000a1c57600080fd5b505afa15801562000a31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a5791906200192a565b62000a995760405162461bcd60e51b81526020600482015260116024820152701c195c9a5bd9081d5b999a5b9a5cda1959607a1b6044820152606401620002af565b60405184815233906001600160a01b038516907fa204d52d2c80fbd794029bca489fb7b1c4dd5f7d5967806277f579cc683431469060200160405180910390a3826001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b1357600080fd5b505afa15801562000b28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b4e91906200190a565b604051634bd410c960e11b8152600481018690526001600160a01b038581166024830152841515604483015233606483015291909116906397a8219290608401600060405180830381600087803b15801562000ba957600080fd5b505af115801562000bbe573d6000803e3d6000fd5b5050600480546040516308bcf0cf60e21b81526001600160a01b038881169382019390935233602482015260448101899052911692506322f3c33c9150606401600060405180830381600087803b15801562000c1957600080fd5b505af115801562000c2e573d6000803e3d6000fd5b50506001600055505050505050565b6002600054141562000c635760405162461bcd60e51b8152600401620002af9062001994565b600260005560035460405163eabb8a7360e01b81526001600160a01b039091169063eabb8a739062000c9e9033908690869060040162001ad7565b600060405180830381600087803b15801562000cb957600080fd5b505af115801562000cce573d6000803e3d6000fd5b50505050816001600160a01b031663f38815896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d0e57600080fd5b505af115801562000d23573d6000803e3d6000fd5b5050600160005550505050565b6060600580548060200260200160405190810160405280929190818152602001828054801562000d8a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000d6b575b5050505050905090565b6002600054141562000dba5760405162461bcd60e51b8152600401620002af9062001994565b6002600081905554604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde9062000df3908a908a9060040162001b0e565b60206040518083038186803b15801562000e0c57600080fd5b505afa15801562000e21573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e4791906200192a565b62000e885760405162461bcd60e51b815260206004820152601060248201526f199a5c9cdd081a59081a5b9d985b1a5960821b6044820152606401620002af565b600254604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde9062000ebc908a90899060040162001b0e565b60206040518083038186803b15801562000ed557600080fd5b505afa15801562000eea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1091906200192a565b62000f515760405162461bcd60e51b815260206004820152601060248201526f199a5b985b081a59081a5b9d985b1a5960821b6044820152606401620002af565b6002546040516347ef60ed60e11b81526001600160a01b0390911690638fdec1da9062000f83908a9060040162001b35565b60206040518083038186803b15801562000f9c57600080fd5b505afa15801562000fb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd791906200192a565b6200101e5760405162461bcd60e51b81526020600482015260166024820152751c195c9a5bd9081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606401620002af565b856001600160801b0316856001600160801b031610156200107a5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a5908199a5b985b0bda5b9a5d1a585b605a1b6044820152606401620002af565b7f0000000000000000000000000000000000000000000000000000000000000000156200116657600254604051631e8760ef60e21b81526001600160a01b0390911690637a1d83bc90620010d5908a908a9060040162001b0e565b60206040518083038186803b158015620010ee57600080fd5b505afa15801562001103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200112991906200192a565b15620011665760405162461bcd60e51b815260206004820152600b60248201526a1c185cdd081c195c9a5bd960aa1b6044820152606401620002af565b60035460405163ef4003db60e01b81526001600160a01b038a811660048301529091169063ef4003db9060240160206040518083038186803b158015620011ac57600080fd5b505afa158015620011c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e791906200192a565b620012295760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b2b9b9b2b733b2b960791b6044820152606401620002af565b81518351146200128d5760405162461bcd60e51b815260206004820152602860248201527f736576657269747920616e642070656e616c7479206c656e6774682073686f756044820152670d8c840dac2e8c6d60c31b6064820152608401620002af565b6000338a898b8a8a6005805490508b8b8b8b604051620012ad90620014a9565b620012c39b9a9998979695949392919062001b87565b604051809103906000f080158015620012e0573d6000803e3d6000fd5b506001546040516358326f4960e01b81529192506001600160a01b0316906358326f499062001318908f908f90869060040162001c4f565b600060405180830381600087803b1580156200133357600080fd5b505af115801562001348573d6000803e3d6000fd5b50506004546001600160a01b03169150637afb4c0a905033836200136d8b8b62001c89565b6200137a90600162001cb4565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160801b03166044820152606401600060405180830381600087803b158015620013d357600080fd5b505af1158015620013e8573d6000803e3d6000fd5b505033600081815260066020908152604080832060058054825460018082018555938752858720015580548083019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038a169081179091558085526007909352818420805460ff191690911790555192945092507fb52f284a6c14f1a66ab5513b5b539066933e58e69e6432666f0e3c8c8a7d750391a35050600160005550505050505050505050565b6141998062001ce383390190565b6001600160a01b0381168114620014cd57600080fd5b50565b600060208284031215620014e357600080fd5b8135620014f081620014b7565b9392505050565b6000602082840312156200150a57600080fd5b5035919050565b80356200151e81620014b7565b919050565b6020808252825182820181905260009190848201906040850190845b81811015620015665783516001600160a01b0316835292840192918401916001016200153f565b50909695505050505050565b8015158114620014cd57600080fd5b80356200151e8162001572565b600080600060608486031215620015a457600080fd5b833592506020840135620015b881620014b7565b91506040840135620015ca8162001572565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620016175762001617620015d5565b604052919050565b600082601f8301126200163157600080fd5b813567ffffffffffffffff8111156200164e576200164e620015d5565b62001663601f8201601f1916602001620015eb565b8181528460208386010111156200167957600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215620016aa57600080fd5b8235620016b781620014b7565b9150602083013567ffffffffffffffff811115620016d457600080fd5b620016e2858286016200161f565b9150509250929050565b80356001600160781b03811681146200151e57600080fd5b60068110620014cd57600080fd5b80356200151e8162001704565b80356001600160801b03811681146200151e57600080fd5b600082601f8301126200174957600080fd5b8135602067ffffffffffffffff821115620017685762001768620015d5565b8160051b62001779828201620015eb565b92835284810182019282810190878511156200179457600080fd5b83870192505b84831015620017b5578235825291830191908301906200179a565b979650505050505050565b803567ffffffffffffffff811681146200151e57600080fd5b60008060008060008060008060008060006101608c8e031215620017fc57600080fd5b620018078c620016ec565b9a506200181760208d0162001712565b99506200182760408d0162001581565b98506200183760608d0162001511565b97506200184760808d0162001712565b96506200185760a08d016200171f565b95506200186760c08d016200171f565b945067ffffffffffffffff8060e08e013511156200188457600080fd5b620018968e60e08f01358f016200161f565b9450806101008e01351115620018ab57600080fd5b620018be8e6101008f01358f0162001737565b9350806101208e01351115620018d357600080fd5b50620018e78d6101208e01358e0162001737565b9150620018f86101408d01620017c0565b90509295989b509295989b9093969950565b6000602082840312156200191d57600080fd5b8151620014f081620014b7565b6000602082840312156200193d57600080fd5b8151620014f08162001572565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200198d576200198d62001960565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215620019de57600080fd5b5051919050565b600080600060608486031215620019fb57600080fd5b8351925060208401519150604084015160038110620015ca57600080fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121562001a4257600080fd5b8151620014f08162001704565b60068110620014cd57634e487b7160e01b600052602160045260246000fd5b6040810162001a7d8462001a4f565b9281526020015290565b6000815180845260005b8181101562001aaf5760208185018101518683018201520162001a91565b8181111562001ac2576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384811682528316602082015260606040820181905260009062001b059083018462001a87565b95945050505050565b6040810162001b1d8462001a4f565b9281526001600160801b039190911660209091015290565b6020810162001b448362001a4f565b91905290565b600081518084526020808501945080840160005b8381101562001b7c5781518752958201959082019060010162001b5e565b509495945050505050565b6001600160a01b038c811682528b151560208301526000906101609062001bae8d62001a4f565b604084018d90528b1660608401526001600160801b038a81166080850152891660a08401526001600160801b03881660c08401528060e084015262001bf68184018862001a87565b905082810361010084015262001c0d818762001b4a565b905082810361012084015262001c24818662001b4a565b91505062001c3f61014083018467ffffffffffffffff169052565b9c9b505050505050505050505050565b6001600160781b03841681526060810162001c6a8462001a4f565b60208201939093526001600160a01b0391909116604090910152919050565b60006001600160801b038381169083168181101562001cac5762001cac62001960565b039392505050565b60006001600160801b0380831681851680830382111562001cd95762001cd962001960565b0194935050505056fe6102006040526011805460ff191690553480156200001c57600080fd5b5060405162004199380380620041998339810160408190526200003f9162000933565b338a86838e8c62000050866200054f565b600180556001600160a01b038216620000b05760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e65722061646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620001085760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206d657373656e6765722061646472657373000000000000006044820152606401620000a7565b856001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014257600080fd5b505afa15801562000157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017d919062000a6c565b600260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b0316639fc4caa56040518163ffffffff1660e01b815260040160206040518083038186803b158015620001dd57600080fd5b505afa158015620001f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000218919062000a6c565b6001600160a01b0390811660805285151561012090815260025460408051637b8041cf60e11b81529051600094859493169263f700839e9260048082019391829003018186803b1580156200026c57600080fd5b505afa15801562000281573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a7919062000a91565b5097505050505050509150600260009054906101000a90046001600160a01b03166001600160a01b0316638b8e53096040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030157600080fd5b505afa15801562000316573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033c919062000a6c565b6001600160a01b0390811660a05261010083905284166000908152600c60205260409020805460ff191660011790556001600160801b03861660e0526001600160401b03808216908616118015906200039f57506001856001600160401b031610155b620003e25760405162461bcd60e51b8152602060048201526012602482015271696e636f7272656374206c6576657261676560701b6044820152606401620000a7565b50506001600160401b0390921661014052506001600160a01b031660c052506200041091508c90506200059f565b83516200042590600d9060208701906200067c565b50600e80546001600160a01b0319163390811790915560408051635a7d1e5d60e01b81529051635a7d1e5d91600480820192602092909190829003018186803b1580156200047257600080fd5b505afa15801562000487573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ad919062000a6c565b6001600160a01b03166101605243610180526001600160801b038088166101a05286166101c052886005811115620004e957620004e962000b0d565b6101e081600581111562000501576200050162000b0d565b90525082516200051990600f9060208601906200070b565b5081516200052f9060109060208501906200070b565b5050506001600160801b039094166012555062000b609650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005a96200061e565b6001600160a01b038116620006105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000a7565b6200061b816200054f565b50565b6000546001600160a01b031633146200067a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000a7565b565b8280546200068a9062000b23565b90600052602060002090601f016020900481019282620006ae5760008555620006f9565b82601f10620006c957805160ff1916838001178555620006f9565b82800160010185558215620006f9579182015b82811115620006f9578251825591602001919060010190620006dc565b506200070792915062000748565b5090565b828054828255906000526020600020908101928215620006f95791602002820182811115620006f9578251825591602001919060010190620006dc565b5b8082111562000707576000815560010162000749565b80516001600160a01b03811681146200077757600080fd5b919050565b805180151581146200077757600080fd5b8051600681106200077757600080fd5b80516001600160801b03811681146200077757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620007f657620007f6620007b5565b604052919050565b600082601f8301126200081057600080fd5b81516001600160401b038111156200082c576200082c620007b5565b602062000842601f8301601f19168201620007cb565b82815285828487010111156200085757600080fd5b60005b83811015620008775785810183015182820184015282016200085a565b83811115620008895760008385840101525b5095945050505050565b600082601f830112620008a557600080fd5b815160206001600160401b03821115620008c357620008c3620007b5565b8160051b620008d4828201620007cb565b9283528481018201928281019087851115620008ef57600080fd5b83870192505b848310156200091057825182529183019190830190620008f5565b979650505050505050565b80516001600160401b03811681146200077757600080fd5b60008060008060008060008060008060006101608c8e0312156200095657600080fd5b620009618c6200075f565b9a506200097160208d016200077c565b99506200098160408d016200078d565b98506200099160608d016200075f565b9750620009a160808d016200079d565b9650620009b160a08d016200079d565b9550620009c160c08d016200079d565b60e08d01519095506001600160401b03811115620009de57600080fd5b620009ec8e828f01620007fe565b6101008e015190955090506001600160401b0381111562000a0c57600080fd5b62000a1a8e828f0162000893565b6101208e015190945090506001600160401b0381111562000a3a57600080fd5b62000a488e828f0162000893565b92505062000a5a6101408d016200091b565b90509295989b509295989b9093969950565b60006020828403121562000a7f57600080fd5b62000a8a826200075f565b9392505050565b60008060008060008060008060006101208a8c03121562000ab157600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925062000aed60e08b016200091b565b915062000afe6101008b016200077c565b90509295985092959850929598565b634e487b7160e01b600052602160045260246000fd5b600181811c9082168062000b3857607f821691505b6020821081141562000b5a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161351062000c896000396000818161043901528181610ffb01526112840152600081816103d1015281816107270152818161101d015281816112a5015261134001526000818161033201526106f3015260006102eb01526000818161182b01526118d701526000818161038401528181611e0f0152818161238c015281816125b20152818161279001526128c00152600081816102c40152611d130152600061050a0152600081816106ba01528181610a450152610ba80152600081816105f10152818161099b01528181610a7a01528181610afe01528181610bdd015261170801526000505060008181610fce015261125501526135106000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80635e5f2e2611610146578063a224ee9c116100c3578063c8b5c24811610087578063c8b5c2481461065c578063cbe230c31461066f578063d7a5c42214610682578063ded81d2b14610695578063f2db10fe146106b5578063f2fde38b146106dc57600080fd5b8063a224ee9c146105ec578063a7e8d8d414610613578063b1659bad14610636578063b7bc347e1461063f578063c623674f1461064757600080fd5b806396f76f111161010a57806396f76f11146105865780639939219d1461058e5780639b19251a146105a15780639eacc13b146105c45780639fabeb00146105e457600080fd5b80635e5f2e26146105345780636f9064d714610547578063715018a61461055a5780638d21c770146105625780638da5cb5b1461057557600080fd5b80632fd949ca116101d45780634e0c91f6116101985780634e0c91f6146104885780634fb2647e146104c95780635ae698ff146104f25780635c1c20de146105055780635d7655ca1461052c57600080fd5b80632fd949ca146103bf5780633385d334146103cc5780634190edde146103f357806346e0fbae14610434578063484fbf2b1461046857600080fd5b80631bf309291161021b5780631bf30929146102e657806325091a081461030d5780632526743a1461032d57806326db18ac1461036c5780632c86d98e1461037f57600080fd5b8063021eef7f1461025857806304dfda391461028057806308728f6e146102a1578063171e44ea146102aa57806318e45427146102bf575b600080fd5b61026b610266366004612d2d565b6106ef565b60405190151581526020015b60405180910390f35b61029361028e366004612d2d565b610759565b604051908152602001610277565b610293600a5481565b6102bd6102b8366004612d5b565b61077a565b005b61026b7f000000000000000000000000000000000000000000000000000000000000000081565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b61029361031b366004612d5b565b60036020526000908152604090205481565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b039091168152602001610277565b6102bd61037a366004612d78565b610e7d565b6103a67f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610277565b60115461026b9060ff1681565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b610425610401366004612d2d565b60136020526000908152604090208054600182015460029092015490919060ff1683565b60405161027793929190612dbe565b61045b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102779190612dfe565b610293610476366004612d5b565b60056020526000908152604090205481565b6104b1610496366004612d5b565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610277565b6104b16104d7366004612d5b565b6008602052600090815260409020546001600160a01b031681565b6102bd610500366004612e53565b610ee6565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b6102bd610fa9565b6104b1610542366004612d2d565b611135565b610293610555366004612d2d565b61115f565b6102bd61116f565b6102bd610570366004612f05565b611183565b6000546001600160a01b03166104b1565b61026b611250565b6102bd61059c366004612f7a565b6113a5565b61026b6105af366004612d5b565b600c6020526000908152604090205460ff1681565b6102936105d2366004612d5b565b60046020526000908152604090205481565b600a54610293565b6104b17f000000000000000000000000000000000000000000000000000000000000000081565b61026b610621366004612d5b565b60096020526000908152604090205460ff1681565b61029360125481565b600b54610293565b61064f6115a8565b6040516102779190613018565b6102bd61066a366004612d78565b611636565b61026b61067d366004612d5b565b611693565b6102bd61069036600461302b565b6116fd565b6102936106a3366004612d5b565b60066020526000908152604090205481565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106ea366004612d5b565b611996565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316821015801561075357507f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168211155b92915050565b600f818154811061076957600080fd5b600091825260209091200154905081565b610782611a0f565b60025460408051637b8041cf60e11b815290516000926001600160a01b03169163f700839e91600480830192610120929190829003018186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190613062565b5050965050505050505061081382611693565b156108715760405162461bcd60e51b8152602060048201526024808201527f5468697320746f6b656e20686173206265656e20616c6c6f77656420616c726560448201526330b23c9760e11b60648201526084015b60405180910390fd5b60025460405163cbe230c360e01b81526001600160a01b0384811660048301529091169063cbe230c39060240160206040518083038186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee91906130e8565b61090a5760405162461bcd60e51b815260040161086890613103565b600b805460018101825560008290527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b038516179055548110156109975760405162461bcd60e51b815260206004820152601060248201526f0dac2f040e8ded6cadc40d8cadccee8d60831b6044820152606401610868565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376ff294b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2e919081019061313a565b6040516308cb8e2360e11b81526001600160801b037f00000000000000000000000000000000000000000000000000000000000000001660048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906311971c469060240160006040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af8919081019061313a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346cd68016040518163ffffffff1660e01b815260040160006040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b91919081019061313a565b60405163cb8d3fcf60e01b81526001600160801b037f00000000000000000000000000000000000000000000000000000000000000001660048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cb8d3fcf9060240160006040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5b919081019061313a565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd091906131ce565b6002546040516340c71f0f60e01b81529192506000916001600160a01b03909116906340c71f0f90610d0a908990899087906004016131f1565b602060405180830381600087803b158015610d2457600080fd5b505af1158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c919061322a565b6002546040516340c71f0f60e01b81529192506000916001600160a01b03909116906340c71f0f90610d96908890889088906004016131f1565b602060405180830381600087803b158015610db057600080fd5b505af1158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de8919061322a565b6001600160a01b03808b16600081815260086020908152604080832080548688166001600160a01b0319918216811790925560079093529281902080549589169590921685179091555193945091927fce8c390dc55dbcd418078f1391fbb7d471c01c228fc4464926095354cb27c02990610e6a908a908a908e908e90613247565b60405180910390a4505050505050505050565b610e928282601254610e8d611250565b611a69565b336001600160a01b0316601254826001600160a01b03167f5d73c1b3aab5bae46e08e09668d192166389623bef76bbe8cdae8df8ad320fce85604051610eda91815260200190565b60405180910390a45050565b610eee611a0f565b60005b8151811015610fa557600c6000838381518110610f1057610f10613294565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16610f93576001600c6000848481518110610f5357610f53613294565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80610f9d816132c0565b915050610ef1565b5050565b610fb1611a0f565b60405160016259edcb60e01b031981526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ffa6123590611045907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906004016132db565b604080518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109491906132ff565b915050804210156110e75760405162461bcd60e51b815260206004820152601a60248201527f5468697320534c4120686173206e6f742066696e69736865642e0000000000006044820152606401610868565b6011805460ff8082161560ff1990921682179092556040519116151581527f8259ff2e8d1f54e9c760a378e427d394a361d8b57fef4298a3c5b2094e61a7029060200160405180910390a150565b600b818154811061114557600080fd5b6000918252602090912001546001600160a01b0316905081565b6010818154811061076957600080fd5b611177611a0f565b6111816000611c9b565b565b61118b611a0f565b60005b8181101561124b57600c60008484848181106111ac576111ac613294565b90506020020160208101906111c19190612d5b565b6001600160a01b0316815260208101919091526040016000205460ff1615611239576000600c60008585858181106111fb576111fb613294565b90506020020160208101906112109190612d5b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b80611243816132c0565b91505061118e565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffa612357f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016112e19291906132db565b604080518083038186803b1580156112f857600080fd5b505afa15801561130c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133091906132ff565b91505080421015801561139257507f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316600090815260136020526040812060029081015460ff169081111561138f5761138f612da8565b14155b8061139f575060115460ff165b91505090565b6113ad611250565b156113f35760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a620903430b9903334b734b9b432b21760511b6044820152606401610868565b600083116114435760405162461bcd60e51b815260206004820152601d60248201527f5374616b65206d7573742062652067726561746572207468616e20302e0000006044820152606401610868565b611451826012548584611ceb565b336001600160a01b0316601254836001600160a01b03167f0aeac0345c75d03926da69972a2eeeb3dcf7108d6fd4aa1bcc1c7bed84cc87578685604051611499929190613323565b60405180910390a4600e60009054906101000a90046001600160a01b03166001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ef57600080fd5b505afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611527919061322a565b604051635948284760e11b81523360048201526001600160a01b03919091169063b290508e90602401602060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a291906130e8565b50505050565b600d80546115b590613347565b80601f01602080910402602001604051908101604052809291908181526020018280546115e190613347565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b61164b8282601254611646611250565b61229d565b336001600160a01b0316601254826001600160a01b03167fbd9be3d6449ecbdf4b3b9980b1631ec06c13d8cf9e09e2433075f123b348e3ba85604051610eda91815260200190565b6000805b600b548110156116f457826001600160a01b0316600b82815481106116be576116be613294565b6000918252602090912001546001600160a01b031614156116e25750600192915050565b806116ec816132c0565b915050611697565b50600092915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117655760405162461bcd60e51b815260206004820152600d60248201526c3737ba1036b2b9b9b2b733b2b960991b6044820152606401610868565b60125481146117aa5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c195c9a5bd9081a59607a1b6044820152606401610868565b60408051428152602081018490529081018290527fc95987c1992805ee34bdc915e017cceae36ba1c156b9911fa7e691e6435eb46e9060600160405180910390a16117f6816001613382565b601255600081815260136020526040808220600181018590554281559051634c3fb26360e01b81529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c3fb263906118689087903090600f906010906004016133da565b60206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613416565b604051631993b9df60e01b8152600481018690523060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631993b9df9060440160206040518083038186803b15801561192157600080fd5b505afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195991906130e8565b1561197c5760028201805460ff191660011790556119778382612568565b6115a2565b6002828101805460ff191690911790556115a28382612731565b61199e611a0f565b6001600160a01b038116611a035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610868565b611a0c81611c9b565b50565b6000546001600160a01b031633146111815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610868565b82611a7381611693565b611a8f5760405162461bcd60e51b815260040161086890613103565b60026001541415611ab25760405162461bcd60e51b81526004016108689061342f565b600260015581611b2c57336000908152600660205260409020548311611b2c5760405162461bcd60e51b815260206004820152602960248201527f55736572206c6f636b2d757020756e74696c20746865206e65787420766572696044820152683334b1b0ba34b7b71760b91b6064820152608401610868565b6001600160a01b0380851660009081526007602090815260408083205460058352928190205481516318160ddd60e01b81529151939094169384936379cc679093339386926318160ddd92600480840193919291829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613416565b611bd6908b613466565b611be09190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611c2657600080fd5b505af1158015611c3a573d6000803e3d6000fd5b505050506001600160a01b03851660009081526005602052604081208054889290611c669084906134a7565b9091555060009050611c788787612931565b9050611c8e6001600160a01b0387163383612a3d565b5050600180555050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b83611cf581611693565b611d115760405162461bcd60e51b815260040161086890613103565b7f000000000000000000000000000000000000000000000000000000000000000015611d8857336000908152600c602052604090205460ff16611d885760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610868565b60026001541415611dab5760405162461bcd60e51b81526004016108689061342f565b6002600155611dc56001600160a01b038616333086612aa0565b6001826001811115611dd957611dd9612da8565b1415612063576001600160a01b03851660009081526003602090815260408083205460059092529091205467ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690611e3b908690613382565b611e459190613466565b1115611e935760405162461bcd60e51b815260206004820152601c60248201527f5374616b652065786365656473206c6576657261676564206361702e000000006044820152606401610868565b6001600160a01b0380861660009081526007602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b158015611ee457600080fd5b505afa158015611ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1c9190613416565b905080611f88576040516340c10f1960e01b8152336004820152602481018690526001600160a01b038316906340c10f1990604401600060405180830381600087803b158015611f6b57600080fd5b505af1158015611f7f573d6000803e3d6000fd5b50505050612021565b6001600160a01b03878116600090815260056020526040902054908316906340c10f19903390611fb8858a613466565b611fc29190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561200857600080fd5b505af115801561201c573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526005602052604081208054879290612049908490613382565b909155505033600090815260066020526040902086905550505b600082600181111561207757612077612da8565b141561224d576001600160a01b0380861660009081526008602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121069190613416565b905080612172576040516340c10f1960e01b8152336004820152602481018690526001600160a01b038316906340c10f1990604401600060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b5050505061220b565b6001600160a01b03878116600090815260036020526040902054908316906340c10f199033906121a2858a613466565b6121ac9190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156121f257600080fd5b505af1158015612206573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526003602052604081208054879290612233908490613382565b909155505033600090815260046020526040902086905550505b3360009081526009602052604090205460ff1661229257336000908152600960205260408120805460ff19166001179055600a80549161228c836132c0565b91905055505b505060018055505050565b826122a781611693565b6122c35760405162461bcd60e51b815260040161086890613103565b600260015414156122e65760405162461bcd60e51b81526004016108689061342f565b60026001558161242e573360009081526004602052604090205483116123645760405162461bcd60e51b815260206004820152602d60248201527f50726f7669646572206c6f636b2d757020756e74696c20746865206e6578742060448201526c3b32b934b334b1b0ba34b7b71760991b6064820152608401610868565b6001600160a01b0384166000908152600560205260409020546123b29067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690613466565b6001600160a01b0385166000908152600360205260409020546123d69087906134a7565b101561242e5760405162461bcd60e51b815260206004820152602160248201527f5769746864726177616c2065786365656473206c6576657261676564206361706044820152601760f91b6064820152608401610868565b6001600160a01b0380851660009081526008602090815260408083205460038352928190205481516318160ddd60e01b81529151939094169384936379cc679093339386926318160ddd92600480840193919291829003018186803b15801561249657600080fd5b505afa1580156124aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ce9190613416565b6124d8908b613466565b6124e29190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561252857600080fd5b505af115801561253c573d6000803e3d6000fd5b505050506001600160a01b03851660009081526003602052604081208054889290611c669084906134a7565b61271060005b600b548110156115a2576000600b828154811061258d5761258d613294565b60009182526020822001546001600160a01b031691506125d78467ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016613466565b6001600160a01b0383166000908152600360205260409020546125fb908790613466565b6126059190613485565b6001600160a01b0383166000908152600560205260409020549091508490612630906109c490613466565b61263a9190613485565b811115612674576001600160a01b0382166000908152600560205260409020548490612667908790613466565b6126719190613485565b90505b6001600160a01b0382166000908152600560205260408120805483929061269c9084906134a7565b90915550506001600160a01b038216600090815260036020526040812080548392906126c9908490613382565b909155505060408051868152602081018690529081018290526001600160a01b0383169087907f3173c1c4b679e2da86dbb0382bde749a6e16cd31912c5410e17985cd7d2b90529060600160405180910390a350508080612729906132c0565b91505061256e565b61271060005b600b548110156115a2576000600b828154811061275657612756613294565b60009182526020808320909101546001600160a01b031680835260059091526040822054909250849086906127b69067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690613466565b6127c09190613466565b6127ca9190613485565b6001600160a01b03831660009081526003602052604090205490915084906127f5906109c490613466565b6127ff9190613485565b811115612839576001600160a01b038216600090815260036020526040902054849061282c908790613466565b6128369190613485565b90505b6001600160a01b038216600090815260036020526040812080548392906128619084906134a7565b90915550506001600160a01b0382166000908152600560205260408120805483929061288e908490613382565b90915550506001600160a01b03821660008181526005602090815260409182902054825190815267ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169181019190915290810183905287907f89385e9d619600da63726158403c0cfd9772b2cac90d3e093387a5456ee1a2479060600160405180910390a350508080612929906132c0565b915050612737565b600080612710612942601e86613466565b61294c9190613485565b9050600061271061295e600f87613466565b6129689190613485565b905061299061297f6000546001600160a01b031690565b6001600160a01b0386169084612a3d565b60025460408051638da5cb5b60e01b81529051612a1f926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061322a565b6001600160a01b0386169083612a3d565b80612a2a83876134a7565b612a3491906134a7565b95945050505050565b6040516001600160a01b03831660248201526044810182905261124b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ad8565b6040516001600160a01b03808516602483015283166044820152606481018290526115a29085906323b872dd60e01b90608401612a69565b6000612b2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612baa9092919063ffffffff16565b80519091501561124b5780806020019051810190612b4b91906130e8565b61124b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610868565b6060612bb98484600085612bc3565b90505b9392505050565b606082471015612c245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610868565b6001600160a01b0385163b612c7b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610868565b600080866001600160a01b03168587604051612c9791906134be565b60006040518083038185875af1925050503d8060008114612cd4576040519150601f19603f3d011682016040523d82523d6000602084013e612cd9565b606091505b5091509150612ce9828286612cf4565b979650505050505050565b60608315612d03575081612bbc565b825115612d135782518084602001fd5b8160405162461bcd60e51b81526004016108689190613018565b600060208284031215612d3f57600080fd5b5035919050565b6001600160a01b0381168114611a0c57600080fd5b600060208284031215612d6d57600080fd5b8135612bbc81612d46565b60008060408385031215612d8b57600080fd5b823591506020830135612d9d81612d46565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b838152602081018390526060810160038310612ddc57612ddc612da8565b826040830152949350505050565b60068110612dfa57612dfa612da8565b9052565b602081016107538284612dea565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e4b57612e4b612e0c565b604052919050565b60006020808385031215612e6657600080fd5b823567ffffffffffffffff80821115612e7e57600080fd5b818501915085601f830112612e9257600080fd5b813581811115612ea457612ea4612e0c565b8060051b9150612eb5848301612e22565b8181529183018401918481019088841115612ecf57600080fd5b938501935b83851015612ef95784359250612ee983612d46565b8282529385019390850190612ed4565b98975050505050505050565b60008060208385031215612f1857600080fd5b823567ffffffffffffffff80821115612f3057600080fd5b818501915085601f830112612f4457600080fd5b813581811115612f5357600080fd5b8660208260051b8501011115612f6857600080fd5b60209290920196919550909350505050565b600080600060608486031215612f8f57600080fd5b833592506020840135612fa181612d46565b9150604084013560028110612fb557600080fd5b809150509250925092565b60005b83811015612fdb578181015183820152602001612fc3565b838111156115a25750506000910152565b60008151808452613004816020860160208601612fc0565b601f01601f19169290920160200192915050565b602081526000612bbc6020830184612fec565b6000806040838503121561303e57600080fd5b50508035926020909101359150565b8051801515811461305d57600080fd5b919050565b60008060008060008060008060006101208a8c03121561308157600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015167ffffffffffffffff811681146130ca57600080fd5b91506130d96101008b0161304d565b90509295985092959850929598565b6000602082840312156130fa57600080fd5b612bbc8261304d565b6020808252601a908201527f5468697320746f6b656e206973206e6f7420616c6c6f7765642e000000000000604082015260600190565b60006020828403121561314c57600080fd5b815167ffffffffffffffff8082111561316457600080fd5b818401915084601f83011261317857600080fd5b81518181111561318a5761318a612e0c565b61319d601f8201601f1916602001612e22565b91508082528560208285010111156131b457600080fd5b6131c5816020840160208601612fc0565b50949350505050565b6000602082840312156131e057600080fd5b815160ff81168114612bbc57600080fd5b6060815260006132046060830186612fec565b82810360208401526132168186612fec565b91505060ff83166040830152949350505050565b60006020828403121561323c57600080fd5b8151612bbc81612d46565b60808152600061325a6080830187612fec565b828103602084015261326c8187612fec565b905082810360408401526132808186612fec565b90508281036060840152612ce98185612fec565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156132d4576132d46132aa565b5060010190565b604081016132e98285612dea565b6001600160801b03831660208301529392505050565b6000806040838503121561331257600080fd5b505080516020909101519092909150565b828152604081016002831061333a5761333a612da8565b8260208301529392505050565b600181811c9082168061335b57607f821691505b6020821081141561337c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115613395576133956132aa565b500190565b6000815480845260208085019450836000528060002060005b838110156133cf578154875295820195600191820191016133b3565b509495945050505050565b8481526001600160a01b03841660208201526080604082018190526000906134049083018561339a565b8281036060840152612ce9818561339a565b60006020828403121561342857600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000816000190483118215151615613480576134806132aa565b500290565b6000826134a257634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156134b9576134b96132aa565b500390565b600082516134d0818460208701612fc0565b919091019291505056fea264697066735822122083d9ed6f903afe3af8234ec884cdb4217f0518fe39495ff03253ceda09048b4f64736f6c63430008090033a2646970667358221220e676ed5b60014f03642ea1c9295c4d388c55a8ccfbba17ae54038bff14e94a3f64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e05760003560e01c8063788164b111620000975780639fc4caa5116200006e5780639fc4caa514620001c6578063a9e43e7f14620001d8578063bb0cbccd146200020b578063c4277a7b146200022257600080fd5b8063788164b1146200018e5780638d2113ed14620001a557806396bddc1014620001bc57600080fd5b80632575d7ca14620000e557806350c5abfe14620000fe578063516c285714620001325780635a7d1e5d14620001585780635c4df332146200016a57806368304835146200017c575b600080fd5b620000fc620000f6366004620014d0565b62000251565b005b620001156200010f366004620014f7565b620004ee565b6040516001600160a01b0390911681526020015b60405180910390f35b6200014962000143366004620014d0565b62000519565b60405162000129919062001523565b6001546001600160a01b031662000115565b6003546001600160a01b031662000115565b6004546001600160a01b031662000115565b620000fc6200019f3660046200158e565b62000640565b620000fc620001b636600462001696565b62000c3d565b6200014962000d30565b6002546001600160a01b031662000115565b7f00000000000000000000000000000000000000000000000000000000000000005b604051901515815260200162000129565b620000fc6200021c366004620017d9565b62000d94565b620001fa62000233366004620014d0565b6001600160a01b031660009081526007602052604090205460ff1690565b6001600160a01b03811660009081526007602052604090205460ff16620002b85760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a6209034b9903737ba103b30b634b21760511b60448201526064015b60405180910390fd5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002f257600080fd5b505afa15801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d91906200190a565b6001600160a01b0316336001600160a01b0316146200038f5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792074686520534c41206f776e65722063616e20646f20746869732e006044820152606401620002af565b806001600160a01b03166396f76f116040518163ffffffff1660e01b815260040160206040518083038186803b158015620003c957600080fd5b505afa158015620003de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040491906200192a565b620004525760405162461bcd60e51b815260206004820152601a60248201527f5468697320534c4120686173206e6f742066696e69736865642e0000000000006044820152606401620002af565b60405133906001600160a01b038316907f892dba94a39dc15a34a9767dc9a0e553ace780857b076507becf599634bfbb6790600090a3600480546040516312baebe560e11b81526001600160a01b0384811693820193909352911690632575d7ca90602401600060405180830381600087803b158015620004d257600080fd5b505af1158015620004e7573d6000803e3d6000fd5b5050505050565b60058181548110620004ff57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600660205260409020546060908067ffffffffffffffff811115620005515762000551620015d5565b6040519080825280602002602001820160405280156200057b578160200160208202803683370190505b50915060005b8181101562000639576001600160a01b038416600090815260066020526040902080546005919083908110620005bb57620005bb6200194a565b906000526020600020015481548110620005d957620005d96200194a565b9060005260206000200160009054906101000a90046001600160a01b03168382815181106200060c576200060c6200194a565b6001600160a01b039092166020928302919091019091015280620006308162001976565b91505062000581565b5050919050565b60026000541415620006665760405162461bcd60e51b8152600401620002af9062001994565b600260009081556001600160a01b03831681526007602052604090205460ff16620006cd5760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a6209034b9903737ba103b30b634b21760511b6044820152606401620002af565b816001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200070757600080fd5b505afa1580156200071c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007429190620019cb565b8314620007925760405162461bcd60e51b815260206004820152601860248201527f6e6f74206e65787456657269666961626c65506572696f6400000000000000006044820152606401620002af565b6040516320c876ef60e11b8152600481018490526000906001600160a01b03841690634190edde9060240160606040518083038186803b158015620007d657600080fd5b505afa158015620007eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008119190620019e5565b9250600091506200081f9050565b81600281111562000834576200083462001a19565b146200088f5760405162461bcd60e51b815260206004820152602360248201527f5468697320534c412068617320616c7265616479206265656e2076657269666960448201526232b21760e91b6064820152608401620002af565b60405163021eef7f60e01b8152600481018590526001600160a01b0384169063021eef7f9060240160206040518083038186803b158015620008d057600080fd5b505afa158015620008e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090b91906200192a565b6200094a5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081c195c9a5bd960921b6044820152606401620002af565b600260009054906101000a90046001600160a01b03166001600160a01b031663c7b6ceb4846001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009a857600080fd5b505afa158015620009bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e3919062001a2f565b866040518363ffffffff1660e01b815260040162000a0392919062001a6e565b60206040518083038186803b15801562000a1c57600080fd5b505afa15801562000a31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a5791906200192a565b62000a995760405162461bcd60e51b81526020600482015260116024820152701c195c9a5bd9081d5b999a5b9a5cda1959607a1b6044820152606401620002af565b60405184815233906001600160a01b038516907fa204d52d2c80fbd794029bca489fb7b1c4dd5f7d5967806277f579cc683431469060200160405180910390a3826001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b1357600080fd5b505afa15801562000b28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b4e91906200190a565b604051634bd410c960e11b8152600481018690526001600160a01b038581166024830152841515604483015233606483015291909116906397a8219290608401600060405180830381600087803b15801562000ba957600080fd5b505af115801562000bbe573d6000803e3d6000fd5b5050600480546040516308bcf0cf60e21b81526001600160a01b038881169382019390935233602482015260448101899052911692506322f3c33c9150606401600060405180830381600087803b15801562000c1957600080fd5b505af115801562000c2e573d6000803e3d6000fd5b50506001600055505050505050565b6002600054141562000c635760405162461bcd60e51b8152600401620002af9062001994565b600260005560035460405163eabb8a7360e01b81526001600160a01b039091169063eabb8a739062000c9e9033908690869060040162001ad7565b600060405180830381600087803b15801562000cb957600080fd5b505af115801562000cce573d6000803e3d6000fd5b50505050816001600160a01b031663f38815896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d0e57600080fd5b505af115801562000d23573d6000803e3d6000fd5b5050600160005550505050565b6060600580548060200260200160405190810160405280929190818152602001828054801562000d8a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000d6b575b5050505050905090565b6002600054141562000dba5760405162461bcd60e51b8152600401620002af9062001994565b6002600081905554604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde9062000df3908a908a9060040162001b0e565b60206040518083038186803b15801562000e0c57600080fd5b505afa15801562000e21573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e4791906200192a565b62000e885760405162461bcd60e51b815260206004820152601060248201526f199a5c9cdd081a59081a5b9d985b1a5960821b6044820152606401620002af565b600254604051636efe27ef60e11b81526001600160a01b039091169063ddfc4fde9062000ebc908a90899060040162001b0e565b60206040518083038186803b15801562000ed557600080fd5b505afa15801562000eea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1091906200192a565b62000f515760405162461bcd60e51b815260206004820152601060248201526f199a5b985b081a59081a5b9d985b1a5960821b6044820152606401620002af565b6002546040516347ef60ed60e11b81526001600160a01b0390911690638fdec1da9062000f83908a9060040162001b35565b60206040518083038186803b15801562000f9c57600080fd5b505afa15801562000fb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd791906200192a565b6200101e5760405162461bcd60e51b81526020600482015260166024820152751c195c9a5bd9081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606401620002af565b856001600160801b0316856001600160801b031610156200107a5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a5908199a5b985b0bda5b9a5d1a585b605a1b6044820152606401620002af565b7f0000000000000000000000000000000000000000000000000000000000000000156200116657600254604051631e8760ef60e21b81526001600160a01b0390911690637a1d83bc90620010d5908a908a9060040162001b0e565b60206040518083038186803b158015620010ee57600080fd5b505afa15801562001103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200112991906200192a565b15620011665760405162461bcd60e51b815260206004820152600b60248201526a1c185cdd081c195c9a5bd960aa1b6044820152606401620002af565b60035460405163ef4003db60e01b81526001600160a01b038a811660048301529091169063ef4003db9060240160206040518083038186803b158015620011ac57600080fd5b505afa158015620011c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e791906200192a565b620012295760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b21036b2b9b9b2b733b2b960791b6044820152606401620002af565b81518351146200128d5760405162461bcd60e51b815260206004820152602860248201527f736576657269747920616e642070656e616c7479206c656e6774682073686f756044820152670d8c840dac2e8c6d60c31b6064820152608401620002af565b6000338a898b8a8a6005805490508b8b8b8b604051620012ad90620014a9565b620012c39b9a9998979695949392919062001b87565b604051809103906000f080158015620012e0573d6000803e3d6000fd5b506001546040516358326f4960e01b81529192506001600160a01b0316906358326f499062001318908f908f90869060040162001c4f565b600060405180830381600087803b1580156200133357600080fd5b505af115801562001348573d6000803e3d6000fd5b50506004546001600160a01b03169150637afb4c0a905033836200136d8b8b62001c89565b6200137a90600162001cb4565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160801b03166044820152606401600060405180830381600087803b158015620013d357600080fd5b505af1158015620013e8573d6000803e3d6000fd5b505033600081815260066020908152604080832060058054825460018082018555938752858720015580548083019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038a169081179091558085526007909352818420805460ff191690911790555192945092507fb52f284a6c14f1a66ab5513b5b539066933e58e69e6432666f0e3c8c8a7d750391a35050600160005550505050505050505050565b6141998062001ce383390190565b6001600160a01b0381168114620014cd57600080fd5b50565b600060208284031215620014e357600080fd5b8135620014f081620014b7565b9392505050565b6000602082840312156200150a57600080fd5b5035919050565b80356200151e81620014b7565b919050565b6020808252825182820181905260009190848201906040850190845b81811015620015665783516001600160a01b0316835292840192918401916001016200153f565b50909695505050505050565b8015158114620014cd57600080fd5b80356200151e8162001572565b600080600060608486031215620015a457600080fd5b833592506020840135620015b881620014b7565b91506040840135620015ca8162001572565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620016175762001617620015d5565b604052919050565b600082601f8301126200163157600080fd5b813567ffffffffffffffff8111156200164e576200164e620015d5565b62001663601f8201601f1916602001620015eb565b8181528460208386010111156200167957600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215620016aa57600080fd5b8235620016b781620014b7565b9150602083013567ffffffffffffffff811115620016d457600080fd5b620016e2858286016200161f565b9150509250929050565b80356001600160781b03811681146200151e57600080fd5b60068110620014cd57600080fd5b80356200151e8162001704565b80356001600160801b03811681146200151e57600080fd5b600082601f8301126200174957600080fd5b8135602067ffffffffffffffff821115620017685762001768620015d5565b8160051b62001779828201620015eb565b92835284810182019282810190878511156200179457600080fd5b83870192505b84831015620017b5578235825291830191908301906200179a565b979650505050505050565b803567ffffffffffffffff811681146200151e57600080fd5b60008060008060008060008060008060006101608c8e031215620017fc57600080fd5b620018078c620016ec565b9a506200181760208d0162001712565b99506200182760408d0162001581565b98506200183760608d0162001511565b97506200184760808d0162001712565b96506200185760a08d016200171f565b95506200186760c08d016200171f565b945067ffffffffffffffff8060e08e013511156200188457600080fd5b620018968e60e08f01358f016200161f565b9450806101008e01351115620018ab57600080fd5b620018be8e6101008f01358f0162001737565b9350806101208e01351115620018d357600080fd5b50620018e78d6101208e01358e0162001737565b9150620018f86101408d01620017c0565b90509295989b509295989b9093969950565b6000602082840312156200191d57600080fd5b8151620014f081620014b7565b6000602082840312156200193d57600080fd5b8151620014f08162001572565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200198d576200198d62001960565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215620019de57600080fd5b5051919050565b600080600060608486031215620019fb57600080fd5b8351925060208401519150604084015160038110620015ca57600080fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121562001a4257600080fd5b8151620014f08162001704565b60068110620014cd57634e487b7160e01b600052602160045260246000fd5b6040810162001a7d8462001a4f565b9281526020015290565b6000815180845260005b8181101562001aaf5760208185018101518683018201520162001a91565b8181111562001ac2576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384811682528316602082015260606040820181905260009062001b059083018462001a87565b95945050505050565b6040810162001b1d8462001a4f565b9281526001600160801b039190911660209091015290565b6020810162001b448362001a4f565b91905290565b600081518084526020808501945080840160005b8381101562001b7c5781518752958201959082019060010162001b5e565b509495945050505050565b6001600160a01b038c811682528b151560208301526000906101609062001bae8d62001a4f565b604084018d90528b1660608401526001600160801b038a81166080850152891660a08401526001600160801b03881660c08401528060e084015262001bf68184018862001a87565b905082810361010084015262001c0d818762001b4a565b905082810361012084015262001c24818662001b4a565b91505062001c3f61014083018467ffffffffffffffff169052565b9c9b505050505050505050505050565b6001600160781b03841681526060810162001c6a8462001a4f565b60208201939093526001600160a01b0391909116604090910152919050565b60006001600160801b038381169083168181101562001cac5762001cac62001960565b039392505050565b60006001600160801b0380831681851680830382111562001cd95762001cd962001960565b0194935050505056fe6102006040526011805460ff191690553480156200001c57600080fd5b5060405162004199380380620041998339810160408190526200003f9162000933565b338a86838e8c62000050866200054f565b600180556001600160a01b038216620000b05760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e65722061646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620001085760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964206d657373656e6765722061646472657373000000000000006044820152606401620000a7565b856001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014257600080fd5b505afa15801562000157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017d919062000a6c565b600260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856001600160a01b0316639fc4caa56040518163ffffffff1660e01b815260040160206040518083038186803b158015620001dd57600080fd5b505afa158015620001f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000218919062000a6c565b6001600160a01b0390811660805285151561012090815260025460408051637b8041cf60e11b81529051600094859493169263f700839e9260048082019391829003018186803b1580156200026c57600080fd5b505afa15801562000281573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a7919062000a91565b5097505050505050509150600260009054906101000a90046001600160a01b03166001600160a01b0316638b8e53096040518163ffffffff1660e01b815260040160206040518083038186803b1580156200030157600080fd5b505afa15801562000316573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033c919062000a6c565b6001600160a01b0390811660a05261010083905284166000908152600c60205260409020805460ff191660011790556001600160801b03861660e0526001600160401b03808216908616118015906200039f57506001856001600160401b031610155b620003e25760405162461bcd60e51b8152602060048201526012602482015271696e636f7272656374206c6576657261676560701b6044820152606401620000a7565b50506001600160401b0390921661014052506001600160a01b031660c052506200041091508c90506200059f565b83516200042590600d9060208701906200067c565b50600e80546001600160a01b0319163390811790915560408051635a7d1e5d60e01b81529051635a7d1e5d91600480820192602092909190829003018186803b1580156200047257600080fd5b505afa15801562000487573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ad919062000a6c565b6001600160a01b03166101605243610180526001600160801b038088166101a05286166101c052886005811115620004e957620004e962000b0d565b6101e081600581111562000501576200050162000b0d565b90525082516200051990600f9060208601906200070b565b5081516200052f9060109060208501906200070b565b5050506001600160801b039094166012555062000b609650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005a96200061e565b6001600160a01b038116620006105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000a7565b6200061b816200054f565b50565b6000546001600160a01b031633146200067a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000a7565b565b8280546200068a9062000b23565b90600052602060002090601f016020900481019282620006ae5760008555620006f9565b82601f10620006c957805160ff1916838001178555620006f9565b82800160010185558215620006f9579182015b82811115620006f9578251825591602001919060010190620006dc565b506200070792915062000748565b5090565b828054828255906000526020600020908101928215620006f95791602002820182811115620006f9578251825591602001919060010190620006dc565b5b8082111562000707576000815560010162000749565b80516001600160a01b03811681146200077757600080fd5b919050565b805180151581146200077757600080fd5b8051600681106200077757600080fd5b80516001600160801b03811681146200077757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620007f657620007f6620007b5565b604052919050565b600082601f8301126200081057600080fd5b81516001600160401b038111156200082c576200082c620007b5565b602062000842601f8301601f19168201620007cb565b82815285828487010111156200085757600080fd5b60005b83811015620008775785810183015182820184015282016200085a565b83811115620008895760008385840101525b5095945050505050565b600082601f830112620008a557600080fd5b815160206001600160401b03821115620008c357620008c3620007b5565b8160051b620008d4828201620007cb565b9283528481018201928281019087851115620008ef57600080fd5b83870192505b848310156200091057825182529183019190830190620008f5565b979650505050505050565b80516001600160401b03811681146200077757600080fd5b60008060008060008060008060008060006101608c8e0312156200095657600080fd5b620009618c6200075f565b9a506200097160208d016200077c565b99506200098160408d016200078d565b98506200099160608d016200075f565b9750620009a160808d016200079d565b9650620009b160a08d016200079d565b9550620009c160c08d016200079d565b60e08d01519095506001600160401b03811115620009de57600080fd5b620009ec8e828f01620007fe565b6101008e015190955090506001600160401b0381111562000a0c57600080fd5b62000a1a8e828f0162000893565b6101208e015190945090506001600160401b0381111562000a3a57600080fd5b62000a488e828f0162000893565b92505062000a5a6101408d016200091b565b90509295989b509295989b9093969950565b60006020828403121562000a7f57600080fd5b62000a8a826200075f565b9392505050565b60008060008060008060008060006101208a8c03121562000ab157600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925062000aed60e08b016200091b565b915062000afe6101008b016200077c565b90509295985092959850929598565b634e487b7160e01b600052602160045260246000fd5b600181811c9082168062000b3857607f821691505b6020821081141562000b5a57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161351062000c896000396000818161043901528181610ffb01526112840152600081816103d1015281816107270152818161101d015281816112a5015261134001526000818161033201526106f3015260006102eb01526000818161182b01526118d701526000818161038401528181611e0f0152818161238c015281816125b20152818161279001526128c00152600081816102c40152611d130152600061050a0152600081816106ba01528181610a450152610ba80152600081816105f10152818161099b01528181610a7a01528181610afe01528181610bdd015261170801526000505060008181610fce015261125501526135106000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80635e5f2e2611610146578063a224ee9c116100c3578063c8b5c24811610087578063c8b5c2481461065c578063cbe230c31461066f578063d7a5c42214610682578063ded81d2b14610695578063f2db10fe146106b5578063f2fde38b146106dc57600080fd5b8063a224ee9c146105ec578063a7e8d8d414610613578063b1659bad14610636578063b7bc347e1461063f578063c623674f1461064757600080fd5b806396f76f111161010a57806396f76f11146105865780639939219d1461058e5780639b19251a146105a15780639eacc13b146105c45780639fabeb00146105e457600080fd5b80635e5f2e26146105345780636f9064d714610547578063715018a61461055a5780638d21c770146105625780638da5cb5b1461057557600080fd5b80632fd949ca116101d45780634e0c91f6116101985780634e0c91f6146104885780634fb2647e146104c95780635ae698ff146104f25780635c1c20de146105055780635d7655ca1461052c57600080fd5b80632fd949ca146103bf5780633385d334146103cc5780634190edde146103f357806346e0fbae14610434578063484fbf2b1461046857600080fd5b80631bf309291161021b5780631bf30929146102e657806325091a081461030d5780632526743a1461032d57806326db18ac1461036c5780632c86d98e1461037f57600080fd5b8063021eef7f1461025857806304dfda391461028057806308728f6e146102a1578063171e44ea146102aa57806318e45427146102bf575b600080fd5b61026b610266366004612d2d565b6106ef565b60405190151581526020015b60405180910390f35b61029361028e366004612d2d565b610759565b604051908152602001610277565b610293600a5481565b6102bd6102b8366004612d5b565b61077a565b005b61026b7f000000000000000000000000000000000000000000000000000000000000000081565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b61029361031b366004612d5b565b60036020526000908152604090205481565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b039091168152602001610277565b6102bd61037a366004612d78565b610e7d565b6103a67f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610277565b60115461026b9060ff1681565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b610425610401366004612d2d565b60136020526000908152604090208054600182015460029092015490919060ff1683565b60405161027793929190612dbe565b61045b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102779190612dfe565b610293610476366004612d5b565b60056020526000908152604090205481565b6104b1610496366004612d5b565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610277565b6104b16104d7366004612d5b565b6008602052600090815260409020546001600160a01b031681565b6102bd610500366004612e53565b610ee6565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b6102bd610fa9565b6104b1610542366004612d2d565b611135565b610293610555366004612d2d565b61115f565b6102bd61116f565b6102bd610570366004612f05565b611183565b6000546001600160a01b03166104b1565b61026b611250565b6102bd61059c366004612f7a565b6113a5565b61026b6105af366004612d5b565b600c6020526000908152604090205460ff1681565b6102936105d2366004612d5b565b60046020526000908152604090205481565b600a54610293565b6104b17f000000000000000000000000000000000000000000000000000000000000000081565b61026b610621366004612d5b565b60096020526000908152604090205460ff1681565b61029360125481565b600b54610293565b61064f6115a8565b6040516102779190613018565b6102bd61066a366004612d78565b611636565b61026b61067d366004612d5b565b611693565b6102bd61069036600461302b565b6116fd565b6102936106a3366004612d5b565b60066020526000908152604090205481565b6103547f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106ea366004612d5b565b611996565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316821015801561075357507f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168211155b92915050565b600f818154811061076957600080fd5b600091825260209091200154905081565b610782611a0f565b60025460408051637b8041cf60e11b815290516000926001600160a01b03169163f700839e91600480830192610120929190829003018186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108009190613062565b5050965050505050505061081382611693565b156108715760405162461bcd60e51b8152602060048201526024808201527f5468697320746f6b656e20686173206265656e20616c6c6f77656420616c726560448201526330b23c9760e11b60648201526084015b60405180910390fd5b60025460405163cbe230c360e01b81526001600160a01b0384811660048301529091169063cbe230c39060240160206040518083038186803b1580156108b657600080fd5b505afa1580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee91906130e8565b61090a5760405162461bcd60e51b815260040161086890613103565b600b805460018101825560008290527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b038516179055548110156109975760405162461bcd60e51b815260206004820152601060248201526f0dac2f040e8ded6cadc40d8cadccee8d60831b6044820152606401610868565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376ff294b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2e919081019061313a565b6040516308cb8e2360e11b81526001600160801b037f00000000000000000000000000000000000000000000000000000000000000001660048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906311971c469060240160006040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af8919081019061313a565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166346cd68016040518163ffffffff1660e01b815260040160006040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b91919081019061313a565b60405163cb8d3fcf60e01b81526001600160801b037f00000000000000000000000000000000000000000000000000000000000000001660048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cb8d3fcf9060240160006040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c5b919081019061313a565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd091906131ce565b6002546040516340c71f0f60e01b81529192506000916001600160a01b03909116906340c71f0f90610d0a908990899087906004016131f1565b602060405180830381600087803b158015610d2457600080fd5b505af1158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c919061322a565b6002546040516340c71f0f60e01b81529192506000916001600160a01b03909116906340c71f0f90610d96908890889088906004016131f1565b602060405180830381600087803b158015610db057600080fd5b505af1158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de8919061322a565b6001600160a01b03808b16600081815260086020908152604080832080548688166001600160a01b0319918216811790925560079093529281902080549589169590921685179091555193945091927fce8c390dc55dbcd418078f1391fbb7d471c01c228fc4464926095354cb27c02990610e6a908a908a908e908e90613247565b60405180910390a4505050505050505050565b610e928282601254610e8d611250565b611a69565b336001600160a01b0316601254826001600160a01b03167f5d73c1b3aab5bae46e08e09668d192166389623bef76bbe8cdae8df8ad320fce85604051610eda91815260200190565b60405180910390a45050565b610eee611a0f565b60005b8151811015610fa557600c6000838381518110610f1057610f10613294565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16610f93576001600c6000848481518110610f5357610f53613294565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80610f9d816132c0565b915050610ef1565b5050565b610fb1611a0f565b60405160016259edcb60e01b031981526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ffa6123590611045907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906004016132db565b604080518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109491906132ff565b915050804210156110e75760405162461bcd60e51b815260206004820152601a60248201527f5468697320534c4120686173206e6f742066696e69736865642e0000000000006044820152606401610868565b6011805460ff8082161560ff1990921682179092556040519116151581527f8259ff2e8d1f54e9c760a378e427d394a361d8b57fef4298a3c5b2094e61a7029060200160405180910390a150565b600b818154811061114557600080fd5b6000918252602090912001546001600160a01b0316905081565b6010818154811061076957600080fd5b611177611a0f565b6111816000611c9b565b565b61118b611a0f565b60005b8181101561124b57600c60008484848181106111ac576111ac613294565b90506020020160208101906111c19190612d5b565b6001600160a01b0316815260208101919091526040016000205460ff1615611239576000600c60008585858181106111fb576111fb613294565b90506020020160208101906112109190612d5b565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b80611243816132c0565b91505061118e565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ffa612357f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016112e19291906132db565b604080518083038186803b1580156112f857600080fd5b505afa15801561130c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133091906132ff565b91505080421015801561139257507f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316600090815260136020526040812060029081015460ff169081111561138f5761138f612da8565b14155b8061139f575060115460ff165b91505090565b6113ad611250565b156113f35760405162461bcd60e51b81526020600482015260166024820152752a3434b99029a620903430b9903334b734b9b432b21760511b6044820152606401610868565b600083116114435760405162461bcd60e51b815260206004820152601d60248201527f5374616b65206d7573742062652067726561746572207468616e20302e0000006044820152606401610868565b611451826012548584611ceb565b336001600160a01b0316601254836001600160a01b03167f0aeac0345c75d03926da69972a2eeeb3dcf7108d6fd4aa1bcc1c7bed84cc87578685604051611499929190613323565b60405180910390a4600e60009054906101000a90046001600160a01b03166001600160a01b031663683048356040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ef57600080fd5b505afa158015611503573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611527919061322a565b604051635948284760e11b81523360048201526001600160a01b03919091169063b290508e90602401602060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a291906130e8565b50505050565b600d80546115b590613347565b80601f01602080910402602001604051908101604052809291908181526020018280546115e190613347565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b61164b8282601254611646611250565b61229d565b336001600160a01b0316601254826001600160a01b03167fbd9be3d6449ecbdf4b3b9980b1631ec06c13d8cf9e09e2433075f123b348e3ba85604051610eda91815260200190565b6000805b600b548110156116f457826001600160a01b0316600b82815481106116be576116be613294565b6000918252602090912001546001600160a01b031614156116e25750600192915050565b806116ec816132c0565b915050611697565b50600092915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117655760405162461bcd60e51b815260206004820152600d60248201526c3737ba1036b2b9b9b2b733b2b960991b6044820152606401610868565b60125481146117aa5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c195c9a5bd9081a59607a1b6044820152606401610868565b60408051428152602081018490529081018290527fc95987c1992805ee34bdc915e017cceae36ba1c156b9911fa7e691e6435eb46e9060600160405180910390a16117f6816001613382565b601255600081815260136020526040808220600181018590554281559051634c3fb26360e01b81529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c3fb263906118689087903090600f906010906004016133da565b60206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613416565b604051631993b9df60e01b8152600481018690523060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631993b9df9060440160206040518083038186803b15801561192157600080fd5b505afa158015611935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195991906130e8565b1561197c5760028201805460ff191660011790556119778382612568565b6115a2565b6002828101805460ff191690911790556115a28382612731565b61199e611a0f565b6001600160a01b038116611a035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610868565b611a0c81611c9b565b50565b6000546001600160a01b031633146111815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610868565b82611a7381611693565b611a8f5760405162461bcd60e51b815260040161086890613103565b60026001541415611ab25760405162461bcd60e51b81526004016108689061342f565b600260015581611b2c57336000908152600660205260409020548311611b2c5760405162461bcd60e51b815260206004820152602960248201527f55736572206c6f636b2d757020756e74696c20746865206e65787420766572696044820152683334b1b0ba34b7b71760b91b6064820152608401610868565b6001600160a01b0380851660009081526007602090815260408083205460058352928190205481516318160ddd60e01b81529151939094169384936379cc679093339386926318160ddd92600480840193919291829003018186803b158015611b9457600080fd5b505afa158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613416565b611bd6908b613466565b611be09190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611c2657600080fd5b505af1158015611c3a573d6000803e3d6000fd5b505050506001600160a01b03851660009081526005602052604081208054889290611c669084906134a7565b9091555060009050611c788787612931565b9050611c8e6001600160a01b0387163383612a3d565b5050600180555050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b83611cf581611693565b611d115760405162461bcd60e51b815260040161086890613103565b7f000000000000000000000000000000000000000000000000000000000000000015611d8857336000908152600c602052604090205460ff16611d885760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610868565b60026001541415611dab5760405162461bcd60e51b81526004016108689061342f565b6002600155611dc56001600160a01b038616333086612aa0565b6001826001811115611dd957611dd9612da8565b1415612063576001600160a01b03851660009081526003602090815260408083205460059092529091205467ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690611e3b908690613382565b611e459190613466565b1115611e935760405162461bcd60e51b815260206004820152601c60248201527f5374616b652065786365656473206c6576657261676564206361702e000000006044820152606401610868565b6001600160a01b0380861660009081526007602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b158015611ee457600080fd5b505afa158015611ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1c9190613416565b905080611f88576040516340c10f1960e01b8152336004820152602481018690526001600160a01b038316906340c10f1990604401600060405180830381600087803b158015611f6b57600080fd5b505af1158015611f7f573d6000803e3d6000fd5b50505050612021565b6001600160a01b03878116600090815260056020526040902054908316906340c10f19903390611fb8858a613466565b611fc29190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561200857600080fd5b505af115801561201c573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526005602052604081208054879290612049908490613382565b909155505033600090815260066020526040902086905550505b600082600181111561207757612077612da8565b141561224d576001600160a01b0380861660009081526008602090815260408083205481516318160ddd60e01b8152915194169384926318160ddd9260048082019391829003018186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121069190613416565b905080612172576040516340c10f1960e01b8152336004820152602481018690526001600160a01b038316906340c10f1990604401600060405180830381600087803b15801561215557600080fd5b505af1158015612169573d6000803e3d6000fd5b5050505061220b565b6001600160a01b03878116600090815260036020526040902054908316906340c10f199033906121a2858a613466565b6121ac9190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156121f257600080fd5b505af1158015612206573d6000803e3d6000fd5b505050505b6001600160a01b03871660009081526003602052604081208054879290612233908490613382565b909155505033600090815260046020526040902086905550505b3360009081526009602052604090205460ff1661229257336000908152600960205260408120805460ff19166001179055600a80549161228c836132c0565b91905055505b505060018055505050565b826122a781611693565b6122c35760405162461bcd60e51b815260040161086890613103565b600260015414156122e65760405162461bcd60e51b81526004016108689061342f565b60026001558161242e573360009081526004602052604090205483116123645760405162461bcd60e51b815260206004820152602d60248201527f50726f7669646572206c6f636b2d757020756e74696c20746865206e6578742060448201526c3b32b934b334b1b0ba34b7b71760991b6064820152608401610868565b6001600160a01b0384166000908152600560205260409020546123b29067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690613466565b6001600160a01b0385166000908152600360205260409020546123d69087906134a7565b101561242e5760405162461bcd60e51b815260206004820152602160248201527f5769746864726177616c2065786365656473206c6576657261676564206361706044820152601760f91b6064820152608401610868565b6001600160a01b0380851660009081526008602090815260408083205460038352928190205481516318160ddd60e01b81529151939094169384936379cc679093339386926318160ddd92600480840193919291829003018186803b15801561249657600080fd5b505afa1580156124aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ce9190613416565b6124d8908b613466565b6124e29190613485565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561252857600080fd5b505af115801561253c573d6000803e3d6000fd5b505050506001600160a01b03851660009081526003602052604081208054889290611c669084906134a7565b61271060005b600b548110156115a2576000600b828154811061258d5761258d613294565b60009182526020822001546001600160a01b031691506125d78467ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016613466565b6001600160a01b0383166000908152600360205260409020546125fb908790613466565b6126059190613485565b6001600160a01b0383166000908152600560205260409020549091508490612630906109c490613466565b61263a9190613485565b811115612674576001600160a01b0382166000908152600560205260409020548490612667908790613466565b6126719190613485565b90505b6001600160a01b0382166000908152600560205260408120805483929061269c9084906134a7565b90915550506001600160a01b038216600090815260036020526040812080548392906126c9908490613382565b909155505060408051868152602081018690529081018290526001600160a01b0383169087907f3173c1c4b679e2da86dbb0382bde749a6e16cd31912c5410e17985cd7d2b90529060600160405180910390a350508080612729906132c0565b91505061256e565b61271060005b600b548110156115a2576000600b828154811061275657612756613294565b60009182526020808320909101546001600160a01b031680835260059091526040822054909250849086906127b69067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690613466565b6127c09190613466565b6127ca9190613485565b6001600160a01b03831660009081526003602052604090205490915084906127f5906109c490613466565b6127ff9190613485565b811115612839576001600160a01b038216600090815260036020526040902054849061282c908790613466565b6128369190613485565b90505b6001600160a01b038216600090815260036020526040812080548392906128619084906134a7565b90915550506001600160a01b0382166000908152600560205260408120805483929061288e908490613382565b90915550506001600160a01b03821660008181526005602090815260409182902054825190815267ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169181019190915290810183905287907f89385e9d619600da63726158403c0cfd9772b2cac90d3e093387a5456ee1a2479060600160405180910390a350508080612929906132c0565b915050612737565b600080612710612942601e86613466565b61294c9190613485565b9050600061271061295e600f87613466565b6129689190613485565b905061299061297f6000546001600160a01b031690565b6001600160a01b0386169084612a3d565b60025460408051638da5cb5b60e01b81529051612a1f926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156129d657600080fd5b505afa1580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e919061322a565b6001600160a01b0386169083612a3d565b80612a2a83876134a7565b612a3491906134a7565b95945050505050565b6040516001600160a01b03831660248201526044810182905261124b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ad8565b6040516001600160a01b03808516602483015283166044820152606481018290526115a29085906323b872dd60e01b90608401612a69565b6000612b2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612baa9092919063ffffffff16565b80519091501561124b5780806020019051810190612b4b91906130e8565b61124b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610868565b6060612bb98484600085612bc3565b90505b9392505050565b606082471015612c245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610868565b6001600160a01b0385163b612c7b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610868565b600080866001600160a01b03168587604051612c9791906134be565b60006040518083038185875af1925050503d8060008114612cd4576040519150601f19603f3d011682016040523d82523d6000602084013e612cd9565b606091505b5091509150612ce9828286612cf4565b979650505050505050565b60608315612d03575081612bbc565b825115612d135782518084602001fd5b8160405162461bcd60e51b81526004016108689190613018565b600060208284031215612d3f57600080fd5b5035919050565b6001600160a01b0381168114611a0c57600080fd5b600060208284031215612d6d57600080fd5b8135612bbc81612d46565b60008060408385031215612d8b57600080fd5b823591506020830135612d9d81612d46565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b838152602081018390526060810160038310612ddc57612ddc612da8565b826040830152949350505050565b60068110612dfa57612dfa612da8565b9052565b602081016107538284612dea565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e4b57612e4b612e0c565b604052919050565b60006020808385031215612e6657600080fd5b823567ffffffffffffffff80821115612e7e57600080fd5b818501915085601f830112612e9257600080fd5b813581811115612ea457612ea4612e0c565b8060051b9150612eb5848301612e22565b8181529183018401918481019088841115612ecf57600080fd5b938501935b83851015612ef95784359250612ee983612d46565b8282529385019390850190612ed4565b98975050505050505050565b60008060208385031215612f1857600080fd5b823567ffffffffffffffff80821115612f3057600080fd5b818501915085601f830112612f4457600080fd5b813581811115612f5357600080fd5b8660208260051b8501011115612f6857600080fd5b60209290920196919550909350505050565b600080600060608486031215612f8f57600080fd5b833592506020840135612fa181612d46565b9150604084013560028110612fb557600080fd5b809150509250925092565b60005b83811015612fdb578181015183820152602001612fc3565b838111156115a25750506000910152565b60008151808452613004816020860160208601612fc0565b601f01601f19169290920160200192915050565b602081526000612bbc6020830184612fec565b6000806040838503121561303e57600080fd5b50508035926020909101359150565b8051801515811461305d57600080fd5b919050565b60008060008060008060008060006101208a8c03121561308157600080fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015167ffffffffffffffff811681146130ca57600080fd5b91506130d96101008b0161304d565b90509295985092959850929598565b6000602082840312156130fa57600080fd5b612bbc8261304d565b6020808252601a908201527f5468697320746f6b656e206973206e6f7420616c6c6f7765642e000000000000604082015260600190565b60006020828403121561314c57600080fd5b815167ffffffffffffffff8082111561316457600080fd5b818401915084601f83011261317857600080fd5b81518181111561318a5761318a612e0c565b61319d601f8201601f1916602001612e22565b91508082528560208285010111156131b457600080fd5b6131c5816020840160208601612fc0565b50949350505050565b6000602082840312156131e057600080fd5b815160ff81168114612bbc57600080fd5b6060815260006132046060830186612fec565b82810360208401526132168186612fec565b91505060ff83166040830152949350505050565b60006020828403121561323c57600080fd5b8151612bbc81612d46565b60808152600061325a6080830187612fec565b828103602084015261326c8187612fec565b905082810360408401526132808186612fec565b90508281036060840152612ce98185612fec565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156132d4576132d46132aa565b5060010190565b604081016132e98285612dea565b6001600160801b03831660208301529392505050565b6000806040838503121561331257600080fd5b505080516020909101519092909150565b828152604081016002831061333a5761333a612da8565b8260208301529392505050565b600181811c9082168061335b57607f821691505b6020821081141561337c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115613395576133956132aa565b500190565b6000815480845260208085019450836000528060002060005b838110156133cf578154875295820195600191820191016133b3565b509495945050505050565b8481526001600160a01b03841660208201526080604082018190526000906134049083018561339a565b8281036060840152612ce9818561339a565b60006020828403121561342857600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000816000190483118215151615613480576134806132aa565b500290565b6000826134a257634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156134b9576134b96132aa565b500390565b600082516134d0818460208701612fc0565b919091019291505056fea264697066735822122083d9ed6f903afe3af8234ec884cdb4217f0518fe39495ff03253ceda09048b4f64736f6c63430008090033a2646970667358221220e676ed5b60014f03642ea1c9295c4d388c55a8ccfbba17ae54038bff14e94a3f64736f6c63430008090033",
  "libraries": {
    "StringUtils": "0xc3247a8328a7299272f5897fe649667773b89e0c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allSLAs()": {
        "returns": {
          "_0": "array of SLAs"
        }
      },
      "checkPastPeriod()": {
        "returns": {
          "_0": "boolean that represent if it check the past periods or not"
        }
      },
      "constructor": {
        "params": {
          "checkPastPeriod_": "value to lock past periods on SLA deployment",
          "messengerRegistry_": "address of MessengerRegistry",
          "periodRegistry_": "address of PeriodRegistry",
          "sloRegistry_": "address of SLORegistry",
          "stakeRegistry_": "address of StakeRegistry"
        }
      },
      "createSLA(uint120,uint8,bool,address,uint8,uint128,uint128,string,uint256[],uint256[],uint64)": {
        "params": {
          "finalPeriodId_": "ending period id",
          "initialPeriodId_": "starting period id",
          "ipfsHash_": "ipfshash",
          "leverage_": "leverage",
          "messengerAddress_": "address of messenger",
          "penalty_": "penalty per severity level",
          "periodType_": "period type",
          "severity_": "severity",
          "sloType_": "slo type",
          "sloValue_": "slo value",
          "whitelisted_": "whitelist"
        }
      },
      "isRegisteredSLA(address)": {
        "params": {
          "_slaAddress": "address of SLA to check registration"
        },
        "returns": {
          "_0": "boolean of registration"
        }
      },
      "messengerRegistry()": {
        "returns": {
          "_0": "address of MessengerRegistry"
        }
      },
      "periodRegistry()": {
        "returns": {
          "_0": "address of PeriodRegistry"
        }
      },
      "registerMessenger(address,string)": {
        "params": {
          "_messengerAddress": "address of messenger to register",
          "_specificationUrl": "specification url of messenger"
        }
      },
      "requestSLI(uint256,address,bool)": {
        "details": "requested period should be finished && sla shouldn't be verified, and it distributes verification rewards to the caller",
        "params": {
          "_ownerApproval": "owner approval",
          "_periodId": "period id to request",
          "_sla": "address of SLA"
        }
      },
      "returnLockedValue(address)": {
        "details": "only SLA owner can call this function for only registered SLAs",
        "params": {
          "_sla": "address of SLA"
        }
      },
      "sloRegistry()": {
        "returns": {
          "_0": "address of SLORegistry"
        }
      },
      "stakeRegistry()": {
        "returns": {
          "_0": "address of StakeRegistry"
        }
      },
      "userSLAs(address)": {
        "params": {
          "_user": "user address"
        },
        "returns": {
          "SLAList": "an array of SLAs created by _user"
        }
      }
    },
    "title": "SLARegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ReturnLockedValue(address,address)": {
        "notice": "An event that is emitted when returning locked tokens back to sla owner"
      },
      "SLACreated(address,address)": {
        "notice": "An event that emitted when creating a new SLA"
      },
      "SLIRequested(uint256,address,address)": {
        "notice": "An event that is emitted when requesting SLI"
      }
    },
    "kind": "user",
    "methods": {
      "SLAs(uint256)": {
        "notice": "stores the addresses of created SLAs"
      },
      "allSLAs()": {
        "notice": "external view function that returns an array of all SLAs"
      },
      "checkPastPeriod()": {
        "notice": "external view function that returns the value to lock past periods on SLA deployment"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "createSLA(uint120,uint8,bool,address,uint8,uint128,uint128,string,uint256[],uint256[],uint64)": {
        "notice": "function to create a new SLA"
      },
      "isRegisteredSLA(address)": {
        "notice": "public view function that returns if the sla is registered"
      },
      "messengerRegistry()": {
        "notice": "external view function that returns the address of MessengerRegistry"
      },
      "periodRegistry()": {
        "notice": "external view function that returns the address of PeriodRegistry"
      },
      "registerMessenger(address,string)": {
        "notice": "function to register a new messenger"
      },
      "requestSLI(uint256,address,bool)": {
        "notice": "function to request sli for specific period id"
      },
      "returnLockedValue(address)": {
        "notice": "function to return locked tokens back to sla owner"
      },
      "sloRegistry()": {
        "notice": "external view function that returns the address of SLORegistry"
      },
      "stakeRegistry()": {
        "notice": "external view function that returns the address of StakeRegistry"
      },
      "userSLAs(address)": {
        "notice": "external view function that returns SLAs created by user"
      }
    },
    "notice": "This is a registry contract that deploy SLAs and manage them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8843,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4052,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_sloRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4055,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_periodRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4058,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_messengerRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4061,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_stakeRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4066,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "SLAs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(SLA)4034)dyn_storage"
      },
      {
        "astId": 4072,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_userToSLAIndexes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4077,
        "contract": "@dsla-protocol/core/contracts/SLARegistry.sol:SLARegistry",
        "label": "_registeredSLAs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(SLA)4034)dyn_storage": {
        "base": "t_contract(SLA)4034",
        "encoding": "dynamic_array",
        "label": "contract SLA[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SLA)4034": {
        "encoding": "inplace",
        "label": "contract SLA",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}