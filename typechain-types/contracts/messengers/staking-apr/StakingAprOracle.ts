/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StakingAprOracleInterface extends utils.Interface {
  functions: {
    "fee()": FunctionFragment;
    "fulfillSLI(bytes32,uint256)": FunctionFragment;
    "fulfillsCounter()": FunctionFragment;
    "jobId()": FunctionFragment;
    "lpName()": FunctionFragment;
    "lpSymbol()": FunctionFragment;
    "lpSymbolSlaId(uint128)": FunctionFragment;
    "messengerPrecision()": FunctionFragment;
    "networkName()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestIdToSLIRequest(bytes32)": FunctionFragment;
    "requestSLI(uint256,address,bool,address)": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "requestsCounter()": FunctionFragment;
    "retryRequest(address,uint256)": FunctionFragment;
    "setChainlinkJobID(bytes32,uint256)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
    "slaRegistryAddress()": FunctionFragment;
    "spName()": FunctionFragment;
    "spSymbol()": FunctionFragment;
    "spSymbolSlaId(uint128)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fee"
      | "fulfillSLI"
      | "fulfillsCounter"
      | "jobId"
      | "lpName"
      | "lpSymbol"
      | "lpSymbolSlaId"
      | "messengerPrecision"
      | "networkName"
      | "oracle"
      | "owner"
      | "renounceOwnership"
      | "requestIdToSLIRequest"
      | "requestSLI"
      | "requests"
      | "requestsCounter"
      | "retryRequest"
      | "setChainlinkJobID"
      | "setSLARegistry"
      | "slaRegistryAddress"
      | "spName"
      | "spSymbol"
      | "spSymbolSlaId"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillSLI",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpName", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpSymbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpSymbolSlaId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "messengerPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToSLIRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSLI",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkJobID",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slaRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "spName", values?: undefined): string;
  encodeFunctionData(functionFragment: "spSymbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spSymbolSlaId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfillSLI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpSymbolSlaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messengerPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToSLIRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestSLI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkJobID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spSymbolSlaId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "JobIdModified(address,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SLIReceived(address,uint256,bytes32,bytes32)": EventFragment;
    "SLIRequested(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobIdModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLIReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLIRequested"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface JobIdModifiedEventObject {
  owner: string;
  jobId: string;
  fee: BigNumber;
}
export type JobIdModifiedEvent = TypedEvent<
  [string, string, BigNumber],
  JobIdModifiedEventObject
>;

export type JobIdModifiedEventFilter = TypedEventFilter<JobIdModifiedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SLIReceivedEventObject {
  slaAddress: string;
  periodId: BigNumber;
  requestId: string;
  chainlinkResponse: string;
}
export type SLIReceivedEvent = TypedEvent<
  [string, BigNumber, string, string],
  SLIReceivedEventObject
>;

export type SLIReceivedEventFilter = TypedEventFilter<SLIReceivedEvent>;

export interface SLIRequestedEventObject {
  caller: string;
  requestsCounter: BigNumber;
  requestId: string;
}
export type SLIRequestedEvent = TypedEvent<
  [string, BigNumber, string],
  SLIRequestedEventObject
>;

export type SLIRequestedEventFilter = TypedEventFilter<SLIRequestedEvent>;

export interface StakingAprOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingAprOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillSLI(
      _requestId: PromiseOrValue<BytesLike>,
      _chainlinkResponse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    lpName(overrides?: CallOverrides): Promise<[string]>;

    lpSymbol(overrides?: CallOverrides): Promise<[string]>;

    lpSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    messengerPrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkName(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestIdToSLIRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { slaAddress: string; periodId: BigNumber }
    >;

    requestSLI(
      _periodId: PromiseOrValue<BigNumberish>,
      _slaAddress: PromiseOrValue<string>,
      _messengerOwnerApproval: PromiseOrValue<boolean>,
      _callerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requestsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    retryRequest(
      _slaAddress: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainlinkJobID(
      _newJobId: PromiseOrValue<BytesLike>,
      _feeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slaRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    spName(overrides?: CallOverrides): Promise<[string]>;

    spSymbol(overrides?: CallOverrides): Promise<[string]>;

    spSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillSLI(
    _requestId: PromiseOrValue<BytesLike>,
    _chainlinkResponse: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  jobId(overrides?: CallOverrides): Promise<string>;

  lpName(overrides?: CallOverrides): Promise<string>;

  lpSymbol(overrides?: CallOverrides): Promise<string>;

  lpSymbolSlaId(
    slaId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  messengerPrecision(overrides?: CallOverrides): Promise<BigNumber>;

  networkName(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestIdToSLIRequest(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { slaAddress: string; periodId: BigNumber }>;

  requestSLI(
    _periodId: PromiseOrValue<BigNumberish>,
    _slaAddress: PromiseOrValue<string>,
    _messengerOwnerApproval: PromiseOrValue<boolean>,
    _callerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  requestsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  retryRequest(
    _slaAddress: PromiseOrValue<string>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainlinkJobID(
    _newJobId: PromiseOrValue<BytesLike>,
    _feeMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSLARegistry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slaRegistryAddress(overrides?: CallOverrides): Promise<string>;

  spName(overrides?: CallOverrides): Promise<string>;

  spSymbol(overrides?: CallOverrides): Promise<string>;

  spSymbolSlaId(
    slaId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillSLI(
      _requestId: PromiseOrValue<BytesLike>,
      _chainlinkResponse: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<string>;

    lpName(overrides?: CallOverrides): Promise<string>;

    lpSymbol(overrides?: CallOverrides): Promise<string>;

    lpSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    messengerPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    networkName(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestIdToSLIRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { slaAddress: string; periodId: BigNumber }
    >;

    requestSLI(
      _periodId: PromiseOrValue<BigNumberish>,
      _slaAddress: PromiseOrValue<string>,
      _messengerOwnerApproval: PromiseOrValue<boolean>,
      _callerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    requestsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    retryRequest(
      _slaAddress: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkJobID(
      _newJobId: PromiseOrValue<BytesLike>,
      _feeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;

    slaRegistryAddress(overrides?: CallOverrides): Promise<string>;

    spName(overrides?: CallOverrides): Promise<string>;

    spSymbol(overrides?: CallOverrides): Promise<string>;

    spSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "JobIdModified(address,bytes32,uint256)"(
      owner?: PromiseOrValue<string> | null,
      jobId?: null,
      fee?: null
    ): JobIdModifiedEventFilter;
    JobIdModified(
      owner?: PromiseOrValue<string> | null,
      jobId?: null,
      fee?: null
    ): JobIdModifiedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SLIReceived(address,uint256,bytes32,bytes32)"(
      slaAddress?: PromiseOrValue<string> | null,
      periodId?: null,
      requestId?: PromiseOrValue<BytesLike> | null,
      chainlinkResponse?: null
    ): SLIReceivedEventFilter;
    SLIReceived(
      slaAddress?: PromiseOrValue<string> | null,
      periodId?: null,
      requestId?: PromiseOrValue<BytesLike> | null,
      chainlinkResponse?: null
    ): SLIReceivedEventFilter;

    "SLIRequested(address,uint256,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      requestsCounter?: null,
      requestId?: null
    ): SLIRequestedEventFilter;
    SLIRequested(
      caller?: PromiseOrValue<string> | null,
      requestsCounter?: null,
      requestId?: null
    ): SLIRequestedEventFilter;
  };

  estimateGas: {
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillSLI(
      _requestId: PromiseOrValue<BytesLike>,
      _chainlinkResponse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    lpName(overrides?: CallOverrides): Promise<BigNumber>;

    lpSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    lpSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messengerPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    networkName(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestIdToSLIRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestSLI(
      _periodId: PromiseOrValue<BigNumberish>,
      _slaAddress: PromiseOrValue<string>,
      _messengerOwnerApproval: PromiseOrValue<boolean>,
      _callerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    retryRequest(
      _slaAddress: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainlinkJobID(
      _newJobId: PromiseOrValue<BytesLike>,
      _feeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slaRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    spName(overrides?: CallOverrides): Promise<BigNumber>;

    spSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    spSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillSLI(
      _requestId: PromiseOrValue<BytesLike>,
      _chainlinkResponse: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messengerPrecision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToSLIRequest(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestSLI(
      _periodId: PromiseOrValue<BigNumberish>,
      _slaAddress: PromiseOrValue<string>,
      _messengerOwnerApproval: PromiseOrValue<boolean>,
      _callerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retryRequest(
      _slaAddress: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkJobID(
      _newJobId: PromiseOrValue<BytesLike>,
      _feeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slaRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spSymbolSlaId(
      slaId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
