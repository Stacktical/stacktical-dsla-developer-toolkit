/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PeriodRegistry {
  export type PeriodDefinitionStruct = {
    initialized: PromiseOrValue<boolean>;
    starts: PromiseOrValue<BigNumberish>[];
    ends: PromiseOrValue<BigNumberish>[];
  };

  export type PeriodDefinitionStructOutput = [
    boolean,
    BigNumber[],
    BigNumber[]
  ] & { initialized: boolean; starts: BigNumber[]; ends: BigNumber[] };
}

export interface PeriodRegistryInterface extends utils.Interface {
  functions: {
    "addPeriodsToPeriodType(uint8,uint256[],uint256[])": FunctionFragment;
    "getPeriodDefinitions()": FunctionFragment;
    "getPeriodStartAndEnd(uint8,uint256)": FunctionFragment;
    "initializePeriod(uint8,uint256[],uint256[])": FunctionFragment;
    "isInitializedPeriod(uint8)": FunctionFragment;
    "isValidPeriod(uint8,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodDefinitions(uint8)": FunctionFragment;
    "periodHasStarted(uint8,uint256)": FunctionFragment;
    "periodIsFinished(uint8,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPeriodsToPeriodType"
      | "getPeriodDefinitions"
      | "getPeriodStartAndEnd"
      | "initializePeriod"
      | "isInitializedPeriod"
      | "isValidPeriod"
      | "owner"
      | "periodDefinitions"
      | "periodHasStarted"
      | "periodIsFinished"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPeriodsToPeriodType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodDefinitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodStartAndEnd",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePeriod",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializedPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodDefinitions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodHasStarted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodIsFinished",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPeriodsToPeriodType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodStartAndEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitializedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodHasStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodIsFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodInitialized(uint8,uint256)": EventFragment;
    "PeriodModified(uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodModified"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PeriodInitializedEventObject {
  periodType: number;
  periodsAdded: BigNumber;
}
export type PeriodInitializedEvent = TypedEvent<
  [number, BigNumber],
  PeriodInitializedEventObject
>;

export type PeriodInitializedEventFilter =
  TypedEventFilter<PeriodInitializedEvent>;

export interface PeriodModifiedEventObject {
  periodType: number;
  periodsAdded: BigNumber;
}
export type PeriodModifiedEvent = TypedEvent<
  [number, BigNumber],
  PeriodModifiedEventObject
>;

export type PeriodModifiedEventFilter = TypedEventFilter<PeriodModifiedEvent>;

export interface PeriodRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PeriodRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPeriodsToPeriodType(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<[PeriodRegistry.PeriodDefinitionStructOutput[]]>;

    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    initializePeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodDefinitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { started: boolean }>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { finished: boolean }>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPeriodsToPeriodType(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodStarts: PromiseOrValue<BigNumberish>[],
    _periodEnds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPeriodDefinitions(
    overrides?: CallOverrides
  ): Promise<PeriodRegistry.PeriodDefinitionStructOutput[]>;

  getPeriodStartAndEnd(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  initializePeriod(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodStarts: PromiseOrValue<BigNumberish>[],
    _periodEnds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitializedPeriod(
    _periodType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidPeriod(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodDefinitions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodHasStarted(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodIsFinished(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPeriodsToPeriodType(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<PeriodRegistry.PeriodDefinitionStructOutput[]>;

    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    initializePeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodDefinitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PeriodInitialized(uint8,uint256)"(
      periodType?: null,
      periodsAdded?: null
    ): PeriodInitializedEventFilter;
    PeriodInitialized(
      periodType?: null,
      periodsAdded?: null
    ): PeriodInitializedEventFilter;

    "PeriodModified(uint8,uint256)"(
      periodType?: null,
      periodsAdded?: null
    ): PeriodModifiedEventFilter;
    PeriodModified(
      periodType?: null,
      periodsAdded?: null
    ): PeriodModifiedEventFilter;
  };

  estimateGas: {
    addPeriodsToPeriodType(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPeriodDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodDefinitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPeriodsToPeriodType(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodStarts: PromiseOrValue<BigNumberish>[],
      _periodEnds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodDefinitions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
