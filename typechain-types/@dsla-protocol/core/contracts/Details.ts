/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Details {
  export type DtokenDetailsStruct = {
    tokenAddress: PromiseOrValue<string>;
    totalSupply: PromiseOrValue<BigNumberish>;
    dTokenAddress: PromiseOrValue<string>;
    dTokenSymbol: PromiseOrValue<string>;
    dTokenName: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
    allowance: PromiseOrValue<BigNumberish>;
  };

  export type DtokenDetailsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    tokenAddress: string;
    totalSupply: BigNumber;
    dTokenAddress: string;
    dTokenSymbol: string;
    dTokenName: string;
    balance: BigNumber;
    allowance: BigNumber;
  };

  export type TokenStakeStruct = {
    tokenAddress: PromiseOrValue<string>;
    totalStake: PromiseOrValue<BigNumberish>;
    usersPool: PromiseOrValue<BigNumberish>;
    providersPool: PromiseOrValue<BigNumberish>;
  };

  export type TokenStakeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenAddress: string;
    totalStake: BigNumber;
    usersPool: BigNumber;
    providersPool: BigNumber;
  };
}

export declare namespace SLA {
  export type PeriodSLIStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    sli: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type PeriodSLIStructOutput = [BigNumber, BigNumber, number] & {
    timestamp: BigNumber;
    sli: BigNumber;
    status: number;
  };
}

export interface DetailsInterface extends utils.Interface {
  functions: {
    "getDTokensDetails(address,address)": FunctionFragment;
    "getSLADetailsArrays(address)": FunctionFragment;
    "getSLADynamicDetails(address)": FunctionFragment;
    "getSLAStaticDetails(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDTokensDetails"
      | "getSLADetailsArrays"
      | "getSLADynamicDetails"
      | "getSLAStaticDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDTokensDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSLADetailsArrays",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSLADynamicDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSLAStaticDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDTokensDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSLADetailsArrays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSLADynamicDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSLAStaticDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Details extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DetailsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDTokensDetails(
      _slaAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        Details.DtokenDetailsStructOutput[],
        Details.DtokenDetailsStructOutput[]
      ] & {
        dpTokens: Details.DtokenDetailsStructOutput[];
        duTokens: Details.DtokenDetailsStructOutput[];
      }
    >;

    getSLADetailsArrays(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [SLA.PeriodSLIStructOutput[], Details.TokenStakeStructOutput[]] & {
        periodSLIs: SLA.PeriodSLIStructOutput[];
        tokensStake: Details.TokenStakeStructOutput[];
      }
    >;

    getSLADynamicDetails(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stakersCount: BigNumber;
        nextVerifiablePeriod: BigNumber;
        leverage: BigNumber;
      }
    >;

    getSLAStaticDetails(
      _slaAddress: PromiseOrValue<string>,
      _sloRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        number,
        string
      ] & {
        slaOwner: string;
        messengerAddress: string;
        sloValue: BigNumber;
        creationBlockNumber: BigNumber;
        slaId: BigNumber;
        initialPeriodId: BigNumber;
        finalPeriodId: BigNumber;
        whiteListed: boolean;
        periodType: number;
        sloType: number;
        ipfsHash: string;
      }
    >;
  };

  getDTokensDetails(
    _slaAddress: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      Details.DtokenDetailsStructOutput[],
      Details.DtokenDetailsStructOutput[]
    ] & {
      dpTokens: Details.DtokenDetailsStructOutput[];
      duTokens: Details.DtokenDetailsStructOutput[];
    }
  >;

  getSLADetailsArrays(
    _slaAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [SLA.PeriodSLIStructOutput[], Details.TokenStakeStructOutput[]] & {
      periodSLIs: SLA.PeriodSLIStructOutput[];
      tokensStake: Details.TokenStakeStructOutput[];
    }
  >;

  getSLADynamicDetails(
    _slaAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stakersCount: BigNumber;
      nextVerifiablePeriod: BigNumber;
      leverage: BigNumber;
    }
  >;

  getSLAStaticDetails(
    _slaAddress: PromiseOrValue<string>,
    _sloRegistry: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      number,
      string
    ] & {
      slaOwner: string;
      messengerAddress: string;
      sloValue: BigNumber;
      creationBlockNumber: BigNumber;
      slaId: BigNumber;
      initialPeriodId: BigNumber;
      finalPeriodId: BigNumber;
      whiteListed: boolean;
      periodType: number;
      sloType: number;
      ipfsHash: string;
    }
  >;

  callStatic: {
    getDTokensDetails(
      _slaAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        Details.DtokenDetailsStructOutput[],
        Details.DtokenDetailsStructOutput[]
      ] & {
        dpTokens: Details.DtokenDetailsStructOutput[];
        duTokens: Details.DtokenDetailsStructOutput[];
      }
    >;

    getSLADetailsArrays(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [SLA.PeriodSLIStructOutput[], Details.TokenStakeStructOutput[]] & {
        periodSLIs: SLA.PeriodSLIStructOutput[];
        tokensStake: Details.TokenStakeStructOutput[];
      }
    >;

    getSLADynamicDetails(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stakersCount: BigNumber;
        nextVerifiablePeriod: BigNumber;
        leverage: BigNumber;
      }
    >;

    getSLAStaticDetails(
      _slaAddress: PromiseOrValue<string>,
      _sloRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        number,
        string
      ] & {
        slaOwner: string;
        messengerAddress: string;
        sloValue: BigNumber;
        creationBlockNumber: BigNumber;
        slaId: BigNumber;
        initialPeriodId: BigNumber;
        finalPeriodId: BigNumber;
        whiteListed: boolean;
        periodType: number;
        sloType: number;
        ipfsHash: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getDTokensDetails(
      _slaAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSLADetailsArrays(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSLADynamicDetails(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSLAStaticDetails(
      _slaAddress: PromiseOrValue<string>,
      _sloRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDTokensDetails(
      _slaAddress: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSLADetailsArrays(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSLADynamicDetails(
      _slaAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSLAStaticDetails(
      _slaAddress: PromiseOrValue<string>,
      _sloRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
