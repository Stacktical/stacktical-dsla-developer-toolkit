/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SLAInterface extends utils.Interface {
  functions: {
    "DSLAburnRate()": FunctionFragment;
    "addAllowedTokens(address)": FunctionFragment;
    "addUsersToWhitelist(address[])": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "contractFinished()": FunctionFragment;
    "creationBlockNumber()": FunctionFragment;
    "dpTokenRegistry(address)": FunctionFragment;
    "duTokenRegistry(address)": FunctionFragment;
    "extraData(uint256)": FunctionFragment;
    "finalPeriodId()": FunctionFragment;
    "getAllowedTokensLength()": FunctionFragment;
    "getStakersLength()": FunctionFragment;
    "initialPeriodId()": FunctionFragment;
    "ipfsHash()": FunctionFragment;
    "isAllowedPeriod(uint256)": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "lastProviderStake(address)": FunctionFragment;
    "lastUserStake(address)": FunctionFragment;
    "leverage()": FunctionFragment;
    "messengerAddress()": FunctionFragment;
    "nextVerifiablePeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodSLIs(uint256)": FunctionFragment;
    "periodType()": FunctionFragment;
    "providersPool(address)": FunctionFragment;
    "registerSLI(uint256,uint256)": FunctionFragment;
    "registeredStakers(address)": FunctionFragment;
    "removeUsersFromWhitelist(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "slaID()": FunctionFragment;
    "stakeTokens(uint256,address,uint8)": FunctionFragment;
    "stakersNum()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usersPool(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelistedContract()": FunctionFragment;
    "withdrawProviderTokens(uint256,address)": FunctionFragment;
    "withdrawUserTokens(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DSLAburnRate"
      | "addAllowedTokens"
      | "addUsersToWhitelist"
      | "allowedTokens"
      | "contractFinished"
      | "creationBlockNumber"
      | "dpTokenRegistry"
      | "duTokenRegistry"
      | "extraData"
      | "finalPeriodId"
      | "getAllowedTokensLength"
      | "getStakersLength"
      | "initialPeriodId"
      | "ipfsHash"
      | "isAllowedPeriod"
      | "isAllowedToken"
      | "lastProviderStake"
      | "lastUserStake"
      | "leverage"
      | "messengerAddress"
      | "nextVerifiablePeriod"
      | "owner"
      | "periodSLIs"
      | "periodType"
      | "providersPool"
      | "registerSLI"
      | "registeredStakers"
      | "removeUsersFromWhitelist"
      | "renounceOwnership"
      | "slaID"
      | "stakeTokens"
      | "stakersNum"
      | "transferOwnership"
      | "usersPool"
      | "whitelist"
      | "whitelistedContract"
      | "withdrawProviderTokens"
      | "withdrawUserTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DSLAburnRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUsersToWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dpTokenRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "duTokenRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "extraData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ipfsHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllowedPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProviderStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUserStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messengerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextVerifiablePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodSLIs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providersPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSLI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredStakers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUsersFromWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slaID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usersPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProviderTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUserTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DSLAburnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUsersToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dpTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "duTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipfsHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProviderStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messengerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextVerifiablePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periodSLIs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periodType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providersPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSLI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUsersFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slaID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakersNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProviderTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUserTokens",
    data: BytesLike
  ): Result;

  events: {
    "DTokensCreated(address,address,string,string,address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProviderRewardGenerated(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ProviderWithdraw(address,uint256,address,uint256)": EventFragment;
    "SLICreated(uint256,uint256,uint256)": EventFragment;
    "Stake(address,uint256,address,uint256,uint8)": EventFragment;
    "UserCompensationGenerated(uint256,address,uint256,uint256,uint256)": EventFragment;
    "UserWithdraw(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DTokensCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderRewardGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLICreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCompensationGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdraw"): EventFragment;
}

export interface DTokensCreatedEventObject {
  tokenAddress: string;
  dpTokenAddress: string;
  dpTokenName: string;
  dpTokenSymbol: string;
  duTokenAddress: string;
  duTokenName: string;
  duTokenSymbol: string;
}
export type DTokensCreatedEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  DTokensCreatedEventObject
>;

export type DTokensCreatedEventFilter = TypedEventFilter<DTokensCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProviderRewardGeneratedEventObject {
  periodId: BigNumber;
  tokenAddress: string;
  rewardPercentage: BigNumber;
  rewardPercentagePrecision: BigNumber;
  rewardAmount: BigNumber;
}
export type ProviderRewardGeneratedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  ProviderRewardGeneratedEventObject
>;

export type ProviderRewardGeneratedEventFilter =
  TypedEventFilter<ProviderRewardGeneratedEvent>;

export interface ProviderWithdrawEventObject {
  tokenAddress: string;
  periodId: BigNumber;
  caller: string;
  amount: BigNumber;
}
export type ProviderWithdrawEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ProviderWithdrawEventObject
>;

export type ProviderWithdrawEventFilter =
  TypedEventFilter<ProviderWithdrawEvent>;

export interface SLICreatedEventObject {
  timestamp: BigNumber;
  sli: BigNumber;
  periodId: BigNumber;
}
export type SLICreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SLICreatedEventObject
>;

export type SLICreatedEventFilter = TypedEventFilter<SLICreatedEvent>;

export interface StakeEventObject {
  tokenAddress: string;
  periodId: BigNumber;
  caller: string;
  amount: BigNumber;
  position: number;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, number],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UserCompensationGeneratedEventObject {
  periodId: BigNumber;
  tokenAddress: string;
  userStake: BigNumber;
  leverage: BigNumber;
  compensation: BigNumber;
}
export type UserCompensationGeneratedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  UserCompensationGeneratedEventObject
>;

export type UserCompensationGeneratedEventFilter =
  TypedEventFilter<UserCompensationGeneratedEvent>;

export interface UserWithdrawEventObject {
  tokenAddress: string;
  periodId: BigNumber;
  caller: string;
  amount: BigNumber;
}
export type UserWithdrawEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  UserWithdrawEventObject
>;

export type UserWithdrawEventFilter = TypedEventFilter<UserWithdrawEvent>;

export interface SLA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SLAInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DSLAburnRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUsersToWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractFinished(overrides?: CallOverrides): Promise<[boolean]>;

    creationBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    dpTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    duTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    ipfsHash(overrides?: CallOverrides): Promise<[string]>;

    isAllowedPeriod(
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastProviderStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUserStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    leverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    messengerAddress(overrides?: CallOverrides): Promise<[string]>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodSLIs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        timestamp: BigNumber;
        sli: BigNumber;
        status: number;
      }
    >;

    periodType(overrides?: CallOverrides): Promise<[number]>;

    providersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerSLI(
      _sli: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredStakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeUsersFromWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slaID(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakersNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistedContract(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawProviderTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUserTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

  addAllowedTokens(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUsersToWhitelist(
    _userAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  contractFinished(overrides?: CallOverrides): Promise<boolean>;

  creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  dpTokenRegistry(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  duTokenRegistry(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  extraData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

  initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  ipfsHash(overrides?: CallOverrides): Promise<string>;

  isAllowedPeriod(
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedToken(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastProviderStake(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUserStake(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  leverage(overrides?: CallOverrides): Promise<BigNumber>;

  messengerAddress(overrides?: CallOverrides): Promise<string>;

  nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodSLIs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      timestamp: BigNumber;
      sli: BigNumber;
      status: number;
    }
  >;

  periodType(overrides?: CallOverrides): Promise<number>;

  providersPool(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerSLI(
    _sli: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredStakers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeUsersFromWhitelist(
    _userAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slaID(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    _position: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakersNum(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usersPool(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistedContract(overrides?: CallOverrides): Promise<boolean>;

  withdrawProviderTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUserTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUsersToWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contractFinished(overrides?: CallOverrides): Promise<boolean>;

    creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    dpTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    duTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    ipfsHash(overrides?: CallOverrides): Promise<string>;

    isAllowedPeriod(
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastProviderStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUserStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    messengerAddress(overrides?: CallOverrides): Promise<string>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodSLIs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        timestamp: BigNumber;
        sli: BigNumber;
        status: number;
      }
    >;

    periodType(overrides?: CallOverrides): Promise<number>;

    providersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerSLI(
      _sli: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredStakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeUsersFromWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    slaID(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakersNum(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedContract(overrides?: CallOverrides): Promise<boolean>;

    withdrawProviderTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUserTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DTokensCreated(address,address,string,string,address,string,string)"(
      tokenAddress?: PromiseOrValue<string> | null,
      dpTokenAddress?: PromiseOrValue<string> | null,
      dpTokenName?: null,
      dpTokenSymbol?: null,
      duTokenAddress?: PromiseOrValue<string> | null,
      duTokenName?: null,
      duTokenSymbol?: null
    ): DTokensCreatedEventFilter;
    DTokensCreated(
      tokenAddress?: PromiseOrValue<string> | null,
      dpTokenAddress?: PromiseOrValue<string> | null,
      dpTokenName?: null,
      dpTokenSymbol?: null,
      duTokenAddress?: PromiseOrValue<string> | null,
      duTokenName?: null,
      duTokenSymbol?: null
    ): DTokensCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProviderRewardGenerated(uint256,address,uint256,uint256,uint256)"(
      periodId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      rewardPercentage?: null,
      rewardPercentagePrecision?: null,
      rewardAmount?: null
    ): ProviderRewardGeneratedEventFilter;
    ProviderRewardGenerated(
      periodId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      rewardPercentage?: null,
      rewardPercentagePrecision?: null,
      rewardAmount?: null
    ): ProviderRewardGeneratedEventFilter;

    "ProviderWithdraw(address,uint256,address,uint256)"(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): ProviderWithdrawEventFilter;
    ProviderWithdraw(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): ProviderWithdrawEventFilter;

    "SLICreated(uint256,uint256,uint256)"(
      timestamp?: null,
      sli?: null,
      periodId?: null
    ): SLICreatedEventFilter;
    SLICreated(
      timestamp?: null,
      sli?: null,
      periodId?: null
    ): SLICreatedEventFilter;

    "Stake(address,uint256,address,uint256,uint8)"(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null,
      position?: null
    ): StakeEventFilter;
    Stake(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null,
      position?: null
    ): StakeEventFilter;

    "UserCompensationGenerated(uint256,address,uint256,uint256,uint256)"(
      periodId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      userStake?: null,
      leverage?: null,
      compensation?: null
    ): UserCompensationGeneratedEventFilter;
    UserCompensationGenerated(
      periodId?: PromiseOrValue<BigNumberish> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      userStake?: null,
      leverage?: null,
      compensation?: null
    ): UserCompensationGeneratedEventFilter;

    "UserWithdraw(address,uint256,address,uint256)"(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): UserWithdrawEventFilter;
    UserWithdraw(
      tokenAddress?: PromiseOrValue<string> | null,
      periodId?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      amount?: null
    ): UserWithdrawEventFilter;
  };

  estimateGas: {
    DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUsersToWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractFinished(overrides?: CallOverrides): Promise<BigNumber>;

    creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    dpTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    ipfsHash(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedPeriod(
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastProviderStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUserStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    messengerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodSLIs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodType(overrides?: CallOverrides): Promise<BigNumber>;

    providersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerSLI(
      _sli: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredStakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUsersFromWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slaID(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakersNum(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawProviderTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUserTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSLAburnRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUsersToWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creationBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dpTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duTokenRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ipfsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedPeriod(
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastProviderStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUserStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messengerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextVerifiablePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodSLIs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerSLI(
      _sli: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredStakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUsersFromWhitelist(
      _userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slaID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakersNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usersPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawProviderTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUserTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
