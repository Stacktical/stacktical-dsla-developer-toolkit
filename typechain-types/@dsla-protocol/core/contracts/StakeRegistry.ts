/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StakeRegistryInterface extends utils.Interface {
  functions: {
    "DSLATokenAddress()": FunctionFragment;
    "addAllowedTokens(address)": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "createDToken(string,string,uint8)": FunctionFragment;
    "distributeVerificationRewards(address,address,uint256)": FunctionFragment;
    "getStakingParameters()": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "lockDSLAValue(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodIsVerified(address,uint256)": FunctionFragment;
    "registerStakedSla(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnLockedValue(address)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
    "setStakingParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)": FunctionFragment;
    "slaLockedValue(address)": FunctionFragment;
    "slaRegistry()": FunctionFragment;
    "slaWasStakedByUser(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userStakedSlas(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DSLATokenAddress"
      | "addAllowedTokens"
      | "allowedTokens"
      | "createDToken"
      | "distributeVerificationRewards"
      | "getStakingParameters"
      | "isAllowedToken"
      | "lockDSLAValue"
      | "owner"
      | "periodIsVerified"
      | "registerStakedSla"
      | "renounceOwnership"
      | "returnLockedValue"
      | "setSLARegistry"
      | "setStakingParameters"
      | "slaLockedValue"
      | "slaRegistry"
      | "slaWasStakedByUser"
      | "transferOwnership"
      | "userStakedSlas"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DSLATokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeVerificationRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDSLAValue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodIsVerified",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStakedSla",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnLockedValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slaLockedValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "slaRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slaWasStakedByUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakedSlas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DSLATokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeVerificationRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDSLAValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodIsVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStakedSla",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaWasStakedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakedSlas",
    data: BytesLike
  ): Result;

  events: {
    "DTokenCreated(address,address,string,string)": EventFragment;
    "LockedValueReturned(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingParametersModified(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)": EventFragment;
    "ValueLocked(address,address,uint256)": EventFragment;
    "VerificationRewardDistributed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedValueReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingParametersModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VerificationRewardDistributed"
  ): EventFragment;
}

export interface DTokenCreatedEventObject {
  dTokenAddress: string;
  sla: string;
  name: string;
  symbol: string;
}
export type DTokenCreatedEvent = TypedEvent<
  [string, string, string, string],
  DTokenCreatedEventObject
>;

export type DTokenCreatedEventFilter = TypedEventFilter<DTokenCreatedEvent>;

export interface LockedValueReturnedEventObject {
  sla: string;
  owner: string;
  amount: BigNumber;
}
export type LockedValueReturnedEvent = TypedEvent<
  [string, string, BigNumber],
  LockedValueReturnedEventObject
>;

export type LockedValueReturnedEventFilter =
  TypedEventFilter<LockedValueReturnedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakingParametersModifiedEventObject {
  DSLAburnRate: BigNumber;
  dslaDepositByPeriod: BigNumber;
  dslaPlatformReward: BigNumber;
  dslaMessengerReward: BigNumber;
  dslaUserReward: BigNumber;
  dslaBurnedByVerification: BigNumber;
  maxTokenLength: BigNumber;
  maxLeverage: BigNumber;
  burnDSLA: boolean;
}
export type StakingParametersModifiedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  StakingParametersModifiedEventObject
>;

export type StakingParametersModifiedEventFilter =
  TypedEventFilter<StakingParametersModifiedEvent>;

export interface ValueLockedEventObject {
  sla: string;
  owner: string;
  amount: BigNumber;
}
export type ValueLockedEvent = TypedEvent<
  [string, string, BigNumber],
  ValueLockedEventObject
>;

export type ValueLockedEventFilter = TypedEventFilter<ValueLockedEvent>;

export interface VerificationRewardDistributedEventObject {
  sla: string;
  requester: string;
  userReward: BigNumber;
  platformReward: BigNumber;
  messengerReward: BigNumber;
  burnedDSLA: BigNumber;
}
export type VerificationRewardDistributedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  VerificationRewardDistributedEventObject
>;

export type VerificationRewardDistributedEventFilter =
  TypedEventFilter<VerificationRewardDistributedEvent>;

export interface StakeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<[string]>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockDSLAValue(
      _slaOwner: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      _periodIdsLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodIsVerified(
      _sla: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnLockedValue(
      _sla: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingParameters(
      DSLAburnRate: PromiseOrValue<BigNumberish>,
      dslaDepositByPeriod: PromiseOrValue<BigNumberish>,
      dslaPlatformReward: PromiseOrValue<BigNumberish>,
      dslaMessengerReward: PromiseOrValue<BigNumberish>,
      dslaUserReward: PromiseOrValue<BigNumberish>,
      dslaBurnedByVerification: PromiseOrValue<BigNumberish>,
      maxTokenLength: PromiseOrValue<BigNumberish>,
      maxLeverage: PromiseOrValue<BigNumberish>,
      burnDSLA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slaLockedValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lockedValue: BigNumber;
        slaPeriodIdsLength: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
      }
    >;

    slaRegistry(overrides?: CallOverrides): Promise<[string]>;

    slaWasStakedByUser(
      _user: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStakedSlas(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

  addAllowedTokens(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createDToken(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeVerificationRewards(
    _sla: PromiseOrValue<string>,
    _verificationRewardReceiver: PromiseOrValue<string>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStakingParameters(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      DSLAburnRate: BigNumber;
      dslaDepositByPeriod: BigNumber;
      dslaPlatformReward: BigNumber;
      dslaMessengerReward: BigNumber;
      dslaUserReward: BigNumber;
      dslaBurnedByVerification: BigNumber;
      maxTokenLength: BigNumber;
      maxLeverage: BigNumber;
      burnDSLA: boolean;
    }
  >;

  isAllowedToken(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockDSLAValue(
    _slaOwner: PromiseOrValue<string>,
    _sla: PromiseOrValue<string>,
    _periodIdsLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodIsVerified(
    _sla: PromiseOrValue<string>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerStakedSla(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnLockedValue(
    _sla: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSLARegistry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingParameters(
    DSLAburnRate: PromiseOrValue<BigNumberish>,
    dslaDepositByPeriod: PromiseOrValue<BigNumberish>,
    dslaPlatformReward: PromiseOrValue<BigNumberish>,
    dslaMessengerReward: PromiseOrValue<BigNumberish>,
    dslaUserReward: PromiseOrValue<BigNumberish>,
    dslaBurnedByVerification: PromiseOrValue<BigNumberish>,
    maxTokenLength: PromiseOrValue<BigNumberish>,
    maxLeverage: PromiseOrValue<BigNumberish>,
    burnDSLA: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slaLockedValue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lockedValue: BigNumber;
      slaPeriodIdsLength: BigNumber;
      dslaDepositByPeriod: BigNumber;
      dslaPlatformReward: BigNumber;
      dslaMessengerReward: BigNumber;
      dslaUserReward: BigNumber;
      dslaBurnedByVerification: BigNumber;
    }
  >;

  slaRegistry(overrides?: CallOverrides): Promise<string>;

  slaWasStakedByUser(
    _user: PromiseOrValue<string>,
    _sla: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStakedSlas(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDSLAValue(
      _slaOwner: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      _periodIdsLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodIsVerified(
      _sla: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnLockedValue(
      _sla: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;

    setStakingParameters(
      DSLAburnRate: PromiseOrValue<BigNumberish>,
      dslaDepositByPeriod: PromiseOrValue<BigNumberish>,
      dslaPlatformReward: PromiseOrValue<BigNumberish>,
      dslaMessengerReward: PromiseOrValue<BigNumberish>,
      dslaUserReward: PromiseOrValue<BigNumberish>,
      dslaBurnedByVerification: PromiseOrValue<BigNumberish>,
      maxTokenLength: PromiseOrValue<BigNumberish>,
      maxLeverage: PromiseOrValue<BigNumberish>,
      burnDSLA: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    slaLockedValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lockedValue: BigNumber;
        slaPeriodIdsLength: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
      }
    >;

    slaRegistry(overrides?: CallOverrides): Promise<string>;

    slaWasStakedByUser(
      _user: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStakedSlas(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DTokenCreated(address,address,string,string)"(
      dTokenAddress?: PromiseOrValue<string> | null,
      sla?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): DTokenCreatedEventFilter;
    DTokenCreated(
      dTokenAddress?: PromiseOrValue<string> | null,
      sla?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): DTokenCreatedEventFilter;

    "LockedValueReturned(address,address,uint256)"(
      sla?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedValueReturnedEventFilter;
    LockedValueReturned(
      sla?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedValueReturnedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StakingParametersModified(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)"(
      DSLAburnRate?: null,
      dslaDepositByPeriod?: null,
      dslaPlatformReward?: null,
      dslaMessengerReward?: null,
      dslaUserReward?: null,
      dslaBurnedByVerification?: null,
      maxTokenLength?: null,
      maxLeverage?: null,
      burnDSLA?: null
    ): StakingParametersModifiedEventFilter;
    StakingParametersModified(
      DSLAburnRate?: null,
      dslaDepositByPeriod?: null,
      dslaPlatformReward?: null,
      dslaMessengerReward?: null,
      dslaUserReward?: null,
      dslaBurnedByVerification?: null,
      maxTokenLength?: null,
      maxLeverage?: null,
      burnDSLA?: null
    ): StakingParametersModifiedEventFilter;

    "ValueLocked(address,address,uint256)"(
      sla?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): ValueLockedEventFilter;
    ValueLocked(
      sla?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): ValueLockedEventFilter;

    "VerificationRewardDistributed(address,address,uint256,uint256,uint256,uint256)"(
      sla?: PromiseOrValue<string> | null,
      requester?: PromiseOrValue<string> | null,
      userReward?: null,
      platformReward?: null,
      messengerReward?: null,
      burnedDSLA?: null
    ): VerificationRewardDistributedEventFilter;
    VerificationRewardDistributed(
      sla?: PromiseOrValue<string> | null,
      requester?: PromiseOrValue<string> | null,
      userReward?: null,
      platformReward?: null,
      messengerReward?: null,
      burnedDSLA?: null
    ): VerificationRewardDistributedEventFilter;
  };

  estimateGas: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStakingParameters(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDSLAValue(
      _slaOwner: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      _periodIdsLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodIsVerified(
      _sla: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnLockedValue(
      _sla: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingParameters(
      DSLAburnRate: PromiseOrValue<BigNumberish>,
      dslaDepositByPeriod: PromiseOrValue<BigNumberish>,
      dslaPlatformReward: PromiseOrValue<BigNumberish>,
      dslaMessengerReward: PromiseOrValue<BigNumberish>,
      dslaUserReward: PromiseOrValue<BigNumberish>,
      dslaBurnedByVerification: PromiseOrValue<BigNumberish>,
      maxTokenLength: PromiseOrValue<BigNumberish>,
      maxLeverage: PromiseOrValue<BigNumberish>,
      burnDSLA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slaLockedValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slaRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    slaWasStakedByUser(
      _user: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStakedSlas(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowedTokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDSLAValue(
      _slaOwner: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      _periodIdsLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodIsVerified(
      _sla: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnLockedValue(
      _sla: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingParameters(
      DSLAburnRate: PromiseOrValue<BigNumberish>,
      dslaDepositByPeriod: PromiseOrValue<BigNumberish>,
      dslaPlatformReward: PromiseOrValue<BigNumberish>,
      dslaMessengerReward: PromiseOrValue<BigNumberish>,
      dslaUserReward: PromiseOrValue<BigNumberish>,
      dslaBurnedByVerification: PromiseOrValue<BigNumberish>,
      maxTokenLength: PromiseOrValue<BigNumberish>,
      maxLeverage: PromiseOrValue<BigNumberish>,
      burnDSLA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slaLockedValue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slaRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slaWasStakedByUser(
      _user: PromiseOrValue<string>,
      _sla: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStakedSlas(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
