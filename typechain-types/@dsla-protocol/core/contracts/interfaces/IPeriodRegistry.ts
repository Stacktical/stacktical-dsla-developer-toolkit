/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IPeriodRegistryInterface extends utils.Interface {
  functions: {
    "getPeriodStartAndEnd(uint8,uint256)": FunctionFragment;
    "isInitializedPeriod(uint8)": FunctionFragment;
    "isValidPeriod(uint8,uint256)": FunctionFragment;
    "periodHasStarted(uint8,uint256)": FunctionFragment;
    "periodIsFinished(uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPeriodStartAndEnd"
      | "isInitializedPeriod"
      | "isValidPeriod"
      | "periodHasStarted"
      | "periodIsFinished"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPeriodStartAndEnd",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializedPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodHasStarted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "periodIsFinished",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPeriodStartAndEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitializedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodHasStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodIsFinished",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPeriodRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPeriodRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getPeriodStartAndEnd(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isInitializedPeriod(
    _periodType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidPeriod(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodHasStarted(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodIsFinished(
    _periodType: PromiseOrValue<BigNumberish>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPeriodStartAndEnd(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitializedPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidPeriod(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodHasStarted(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodIsFinished(
      _periodType: PromiseOrValue<BigNumberish>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
