/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IStakeRegistryInterface extends utils.Interface {
  functions: {
    "DSLATokenAddress()": FunctionFragment;
    "createDToken(string,string,uint8)": FunctionFragment;
    "distributeVerificationRewards(address,address,uint256)": FunctionFragment;
    "getStakingParameters()": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "lockDSLAValue(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerStakedSla(address)": FunctionFragment;
    "returnLockedValue(address)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DSLATokenAddress"
      | "createDToken"
      | "distributeVerificationRewards"
      | "getStakingParameters"
      | "isAllowedToken"
      | "lockDSLAValue"
      | "owner"
      | "registerStakedSla"
      | "returnLockedValue"
      | "setSLARegistry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DSLATokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeVerificationRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDSLAValue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStakedSla",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "returnLockedValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DSLATokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeVerificationRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDSLAValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStakedSla",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStakeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<[string]>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockDSLAValue(
      slaOwner_: PromiseOrValue<string>,
      sla_: PromiseOrValue<string>,
      periodIdsLength_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnLockedValue(
      sla_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

  createDToken(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeVerificationRewards(
    _sla: PromiseOrValue<string>,
    _verificationRewardReceiver: PromiseOrValue<string>,
    _periodId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStakingParameters(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      DSLAburnRate: BigNumber;
      dslaDepositByPeriod: BigNumber;
      dslaPlatformReward: BigNumber;
      dslaMessengerReward: BigNumber;
      dslaUserReward: BigNumber;
      dslaBurnedByVerification: BigNumber;
      maxTokenLength: BigNumber;
      maxLeverage: BigNumber;
      burnDSLA: boolean;
    }
  >;

  isAllowedToken(
    tokenAddress_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockDSLAValue(
    slaOwner_: PromiseOrValue<string>,
    sla_: PromiseOrValue<string>,
    periodIdsLength_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerStakedSla(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnLockedValue(
    sla_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSLARegistry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDSLAValue(
      slaOwner_: PromiseOrValue<string>,
      sla_: PromiseOrValue<string>,
      periodIdsLength_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnLockedValue(
      sla_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStakingParameters(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDSLAValue(
      slaOwner_: PromiseOrValue<string>,
      sla_: PromiseOrValue<string>,
      periodIdsLength_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnLockedValue(
      sla_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDToken(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeVerificationRewards(
      _sla: PromiseOrValue<string>,
      _verificationRewardReceiver: PromiseOrValue<string>,
      _periodId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToken(
      tokenAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDSLAValue(
      slaOwner_: PromiseOrValue<string>,
      sla_: PromiseOrValue<string>,
      periodIdsLength_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerStakedSla(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnLockedValue(
      sla_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
