/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Details,
  DetailsInterface,
} from "../../../../@dsla-protocol/core/contracts/Details";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "getDTokensDetails",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "dTokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "dTokenSymbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "dTokenName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allowance",
            type: "uint256",
          },
        ],
        internalType: "struct Details.DtokenDetails[]",
        name: "dpTokens",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "dTokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "dTokenSymbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "dTokenName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allowance",
            type: "uint256",
          },
        ],
        internalType: "struct Details.DtokenDetails[]",
        name: "duTokens",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
    ],
    name: "getSLADetailsArrays",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sli",
            type: "uint256",
          },
          {
            internalType: "enum SLA.Status",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct SLA.PeriodSLI[]",
        name: "periodSLIs",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalStake",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usersPool",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "providersPool",
            type: "uint256",
          },
        ],
        internalType: "struct Details.TokenStake[]",
        name: "tokensStake",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
    ],
    name: "getSLADynamicDetails",
    outputs: [
      {
        internalType: "uint256",
        name: "stakersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextVerifiablePeriod",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "leverage",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
      {
        internalType: "contract SLORegistry",
        name: "_sloRegistry",
        type: "address",
      },
    ],
    name: "getSLAStaticDetails",
    outputs: [
      {
        internalType: "address",
        name: "slaOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "messengerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sloValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "creationBlockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slaId",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "initialPeriodId",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "finalPeriodId",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "whiteListed",
        type: "bool",
      },
      {
        internalType: "enum IPeriodRegistry.PeriodType",
        name: "periodType",
        type: "uint8",
      },
      {
        internalType: "enum SLORegistry.SLOType",
        name: "sloType",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "ipfsHash",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611c7b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806330f1bef014610051578063431b7770146100845780637922f334146100bc578063afa029e4146100dd575b600080fd5b61006461005f36600461169f565b6100fe565b60405161007b9b9a9998979695949392919061175a565b60405180910390f35b6100976100923660046117ec565b6105db565b60408051938452602084019290925267ffffffffffffffff169082015260600161007b565b6100cf6100ca36600461169f565b610744565b60405161007b9291906118cd565b6100f06100eb3660046117ec565b610fc0565b60405161007b9291906118fb565b600080600080600080600080600080606060008d9050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561014d57600080fd5b505afa158015610161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018591906119bf565b9b50806001600160a01b031663a224ee9c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f891906119bf565b9a50806001600160a01b03166318e454276040518163ffffffff1660e01b815260040160206040518083038186803b15801561023357600080fd5b505afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b91906119dc565b9450806001600160a01b03166346e0fbae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a657600080fd5b505afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de9190611a0b565b93508c6001600160a01b031663a7b72ac58f6040518263ffffffff1660e01b815260040161031b91906001600160a01b0391909116815260200190565b604080518083038186803b15801561033257600080fd5b505afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190611a28565b816001600160781b03169150809450819b505050806001600160a01b0316631bf309296040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b757600080fd5b505afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190611a63565b9850806001600160a01b031663f2db10fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104629190611a7c565b6001600160801b03169750806001600160a01b031663c623674f6040518163ffffffff1660e01b815260040160006040518083038186803b1580156104a657600080fd5b505afa1580156104ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104e29190810190611abb565b9150806001600160a01b0316632526743a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051d57600080fd5b505afa158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190611a7c565b9650806001600160a01b0316633385d3346040518163ffffffff1660e01b815260040160206040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190611a7c565b9550509295989b509295989b9093969950565b600080600080849050806001600160a01b0316639fabeb006040518163ffffffff1660e01b815260040160206040518083038186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190611a63565b9350806001600160a01b031663b1659bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190611a63565b9250806001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b9190611b68565b93959294505050565b6060806000806001600160a01b0316846001600160a01b03161415905060008590506000816001600160a01b031663b7bc347e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a157600080fd5b505afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190611a63565b90508067ffffffffffffffff8111156107f4576107f4611aa5565b60405190808252806020026020018201604052801561082d57816020015b61081a611607565b8152602001906001900390816108125790505b5094508067ffffffffffffffff81111561084957610849611aa5565b60405190808252806020026020018201604052801561088257816020015b61086f611607565b8152602001906001900390816108675790505b50935060005b81811015610fb557604051632f2f971360e11b8152600481018290526000906001600160a01b03851690635e5f2e269060240160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906119bf565b6040516327d9323f60e11b81526001600160a01b038083166004830152919250600091861690634fb2647e9060240160206040518083038186803b15801561095257600080fd5b505afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a91906119bf565b90506040518060e00160405280836001600160a01b03168152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190611a63565b8152602001826001600160a01b03168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a6457600080fd5b505afa158015610a78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aa09190810190611abb565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610ade57600080fd5b505afa158015610af2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1a9190810190611abb565b815260200187610b2b576000610ba4565b6040516370a0823160e01b81526001600160a01b038c811660048301528416906370a082319060240160206040518083038186803b158015610b6c57600080fd5b505afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190611a63565b815260200187610bb5576000610c36565b604051636eb1769f60e11b81526001600160a01b038c811660048301528d8116602483015284169063dd62ed3e9060440160206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190611a63565b815250888481518110610c4b57610c4b611b92565b602090810291909101015260405163270648fb60e11b81526001600160a01b03838116600483015260009190871690634e0c91f69060240160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd391906119bf565b90506040518060e00160405280846001600160a01b03168152602001826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2857600080fd5b505afa158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190611a63565b8152602001826001600160a01b03168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610dad57600080fd5b505afa158015610dc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de99190810190611abb565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e639190810190611abb565b815260200188610e74576000610eed565b6040516370a0823160e01b81526001600160a01b038d811660048301528416906370a082319060240160206040518083038186803b158015610eb557600080fd5b505afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190611a63565b815260200188610efe576000610f7f565b604051636eb1769f60e11b81526001600160a01b038d811660048301528e8116602483015284169063dd62ed3e9060440160206040518083038186803b158015610f4757600080fd5b505afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190611a63565b815250888581518110610f9457610f94611b92565b60200260200101819052505050508080610fad90611bbe565b915050610888565b505050509250929050565b60608060008390506000816001600160a01b0316632526743a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190611a7c565b6001600160801b031690506000826001600160a01b0316633385d3346040518163ffffffff1660e01b815260040160206040518083038186803b15801561108157600080fd5b505afa158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b99190611a7c565b6001600160801b0316905060006110d08383611bd9565b6110db906001611bf0565b90508067ffffffffffffffff8111156110f6576110f6611aa5565b60405190808252806020026020018201604052801561112f57816020015b61111c611656565b8152602001906001900390816111145790505b50955060005b818110156112345760006111498286611bf0565b90506000806000886001600160a01b0316634190edde856040518263ffffffff1660e01b815260040161117e91815260200190565b60606040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ce9190611c08565b92509250925060405180606001604052808481526020018381526020018260028111156111fd576111fd6116d8565b8152508b868151811061121257611212611b92565b602002602001018190525050505050808061122c90611bbe565b915050611135565b506000846001600160a01b031663b7bc347e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190611a63565b90508067ffffffffffffffff8111156112c3576112c3611aa5565b60405190808252806020026020018201604052801561132857816020015b611315604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b8152602001906001900390816112e15790505b50955060005b818110156115fc57604051632f2f971360e11b8152600481018290526000906001600160a01b03881690635e5f2e269060240160206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b191906119bf565b604080516080810182526001600160a01b0380841680835292516304a1234160e31b81526004810193909352929350916020830191908a16906325091a089060240160206040518083038186803b15801561140b57600080fd5b505afa15801561141f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114439190611a63565b60405163484fbf2b60e01b81526001600160a01b0385811660048301528b169063484fbf2b9060240160206040518083038186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611a63565b6114c69190611bf0565b815260405163484fbf2b60e01b81526001600160a01b0384811660048301526020909201918a169063484fbf2b9060240160206040518083038186803b15801561150f57600080fd5b505afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115479190611a63565b81526040516304a1234160e31b81526001600160a01b0384811660048301526020909201918a16906325091a089060240160206040518083038186803b15801561159057600080fd5b505afa1580156115a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c89190611a63565b8152508883815181106115dd576115dd611b92565b60200260200101819052505080806115f490611bbe565b91505061132e565b505050505050915091565b6040518060e0016040528060006001600160a01b031681526020016000815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081525090565b6040518060600160405280600081526020016000815260200160006002811115611682576116826116d8565b905290565b6001600160a01b038116811461169c57600080fd5b50565b600080604083850312156116b257600080fd5b82356116bd81611687565b915060208301356116cd81611687565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b6006811061169c5761169c6116d8565b60005b83811015611719578181015183820152602001611701565b83811115611728576000848401525b50505050565b600081518084526117468160208601602086016116fe565b601f01601f19169290920160200192915050565b6001600160a01b038c811682528b166020820152604081018a905260608101899052608081018890526001600160801b0387811660a0830152861660c082015284151560e082015260006101606117b0866116ee565b856101008401526117c0856116ee565b84610120840152806101408401526117da8184018561172e565b9e9d5050505050505050505050505050565b6000602082840312156117fe57600080fd5b813561180981611687565b9392505050565b6000815180845260208085019450848260051b860182860160005b858110156118c0578383038952815180516001600160a01b03908116855286820151878601526040808301519091169085015260608082015160e0828701819052919061187a8388018261172e565b9250505060808083015186830382880152611895838261172e565b60a0858101519089015260c0948501519490970193909352505050978401979084019060010161182b565b5090979650505050505050565b6040815260006118e06040830185611810565b82810360208401526118f28185611810565b95945050505050565b6040808252835182820181905260009190606090818501906020808901865b8381101561195757815180518652838101518487015287015160038110611943576119436116d8565b85880152938501939082019060010161191a565b5050868303818801528751808452888201938201925060005b818110156119b057845180516001600160a01b03168552838101518486015287810151888601528601518685015293820193608090930192600101611970565b50919998505050505050505050565b6000602082840312156119d157600080fd5b815161180981611687565b6000602082840312156119ee57600080fd5b8151801515811461180957600080fd5b6006811061169c57600080fd5b600060208284031215611a1d57600080fd5b8151611809816119fe565b60008060408385031215611a3b57600080fd5b82516001600160781b0381168114611a5257600080fd5b60208401519092506116cd816119fe565b600060208284031215611a7557600080fd5b5051919050565b600060208284031215611a8e57600080fd5b81516001600160801b038116811461180957600080fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215611acd57600080fd5b815167ffffffffffffffff80821115611ae557600080fd5b818401915084601f830112611af957600080fd5b815181811115611b0b57611b0b611aa5565b604051601f8201601f19908116603f01168101908382118183101715611b3357611b33611aa5565b81604052828152876020848701011115611b4c57600080fd5b611b5d8360208301602088016116fe565b979650505050505050565b600060208284031215611b7a57600080fd5b815167ffffffffffffffff8116811461180957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd257611bd2611ba8565b5060010190565b600082821015611beb57611beb611ba8565b500390565b60008219821115611c0357611c03611ba8565b500190565b600080600060608486031215611c1d57600080fd5b8351925060208401519150604084015160038110611c3a57600080fd5b80915050925092509256fea2646970667358221220e16fc1b4c849d967f0d127b6aa4acd95fbd4f61ac11d6c81ae5179c91b7004f764736f6c63430008090033";

type DetailsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DetailsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Details__factory extends ContractFactory {
  constructor(...args: DetailsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Details> {
    return super.deploy(overrides || {}) as Promise<Details>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Details {
    return super.attach(address) as Details;
  }
  override connect(signer: Signer): Details__factory {
    return super.connect(signer) as Details__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DetailsInterface {
    return new utils.Interface(_abi) as DetailsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Details {
    return new Contract(address, _abi, signerOrProvider) as Details;
  }
}
