/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PreCoordinatorInterface extends ethers.utils.Interface {
  functions: {
    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "chainlinkCallback(bytes32,int256)": FunctionFragment;
    "createServiceAgreement(uint256,address[],bytes32[],uint256[])": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "getServiceAgreement(bytes32)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkCallback",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createServiceAgreement",
    values: [BigNumberish, string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAgreement",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createServiceAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "NewServiceAgreement(bytes32,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ServiceAgreementAnswerUpdated(bytes32,bytes32,int256)": EventFragment;
    "ServiceAgreementDeleted(bytes32)": EventFragment;
    "ServiceAgreementRequested(bytes32,bytes32,uint256)": EventFragment;
    "ServiceAgreementResponseReceived(bytes32,bytes32,address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewServiceAgreement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ServiceAgreementAnswerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceAgreementDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceAgreementRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ServiceAgreementResponseReceived"
  ): EventFragment;
}

export class PreCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PreCoordinatorInterface;

  functions: {
    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainlinkCallback(
      _requestId: BytesLike,
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: BytesLike[],
      _payments: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    getServiceAgreement(
      _saId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
        totalPayment: BigNumber;
        minResponses: BigNumber;
        oracles: string[];
        jobIds: string[];
        payments: BigNumber[];
      }
    >;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOracleRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainlinkCallback(
    _requestId: BytesLike,
    _data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createServiceAgreement(
    _minResponses: BigNumberish,
    _oracles: string[],
    _jobIds: BytesLike[],
    _payments: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  getServiceAgreement(
    _saId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
      totalPayment: BigNumber;
      minResponses: BigNumber;
      oracles: string[];
      jobIds: string[];
      payments: BigNumber[];
    }
  >;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  onTokenTransfer(
    _sender: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: string,
    _payment: BigNumberish,
    _saId: BytesLike,
    _callbackAddress: string,
    _callbackFunctionId: BytesLike,
    _nonce: BigNumberish,
    arg6: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chainlinkCallback(
      _requestId: BytesLike,
      _data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: BytesLike[],
      _payments: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    getServiceAgreement(
      _saId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
        totalPayment: BigNumber;
        minResponses: BigNumber;
        oracles: string[];
        jobIds: string[];
        payments: BigNumber[];
      }
    >;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ChainlinkCancelled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    NewServiceAgreement(
      saId?: BytesLike | null,
      payment?: null,
      minresponses?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { saId: string; payment: BigNumber; minresponses: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ServiceAgreementAnswerUpdated(
      saId?: BytesLike | null,
      requestId?: BytesLike | null,
      answer?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { saId: string; requestId: string; answer: BigNumber }
    >;

    ServiceAgreementDeleted(
      saId?: BytesLike | null
    ): TypedEventFilter<[string], { saId: string }>;

    ServiceAgreementRequested(
      saId?: BytesLike | null,
      requestId?: BytesLike | null,
      payment?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { saId: string; requestId: string; payment: BigNumber }
    >;

    ServiceAgreementResponseReceived(
      saId?: BytesLike | null,
      requestId?: BytesLike | null,
      oracle?: string | null,
      answer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { saId: string; requestId: string; oracle: string; answer: BigNumber }
    >;
  };

  estimateGas: {
    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainlinkCallback(
      _requestId: BytesLike,
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: BytesLike[],
      _payments: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    getServiceAgreement(
      _saId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOracleRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainlinkCallback(
      _requestId: BytesLike,
      _data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: BytesLike[],
      _payments: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getServiceAgreement(
      _saId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: BytesLike,
      _callbackAddress: string,
      _callbackFunctionId: BytesLike,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
