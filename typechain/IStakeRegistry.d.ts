/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStakeRegistryInterface extends ethers.utils.Interface {
  functions: {
    "DSLATokenAddress()": FunctionFragment;
    "createDToken(string,string,uint8)": FunctionFragment;
    "distributeVerificationRewards(address,address,uint256)": FunctionFragment;
    "getStakingParameters()": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "lockDSLAValue(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerStakedSla(address)": FunctionFragment;
    "returnLockedValue(address)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DSLATokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeVerificationRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDSLAValue",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStakedSla",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnLockedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DSLATokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeVerificationRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDSLAValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStakedSla",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStakeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakeRegistryInterface;

  functions: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<[string]>;

    createDToken(
      _name: string,
      _symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeVerificationRewards(
      _sla: string,
      _verificationRewardReceiver: string,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockDSLAValue(
      slaOwner_: string,
      sla_: string,
      periodIdsLength_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerStakedSla(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnLockedValue(
      sla_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

  createDToken(
    _name: string,
    _symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeVerificationRewards(
    _sla: string,
    _verificationRewardReceiver: string,
    _periodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakingParameters(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      DSLAburnRate: BigNumber;
      dslaDepositByPeriod: BigNumber;
      dslaPlatformReward: BigNumber;
      dslaMessengerReward: BigNumber;
      dslaUserReward: BigNumber;
      dslaBurnedByVerification: BigNumber;
      maxTokenLength: BigNumber;
      maxLeverage: BigNumber;
      burnDSLA: boolean;
    }
  >;

  isAllowedToken(
    tokenAddress_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockDSLAValue(
    slaOwner_: string,
    sla_: string,
    periodIdsLength_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerStakedSla(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnLockedValue(
    sla_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSLARegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<string>;

    createDToken(
      _name: string,
      _symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    distributeVerificationRewards(
      _sla: string,
      _verificationRewardReceiver: string,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        DSLAburnRate: BigNumber;
        dslaDepositByPeriod: BigNumber;
        dslaPlatformReward: BigNumber;
        dslaMessengerReward: BigNumber;
        dslaUserReward: BigNumber;
        dslaBurnedByVerification: BigNumber;
        maxTokenLength: BigNumber;
        maxLeverage: BigNumber;
        burnDSLA: boolean;
      }
    >;

    isAllowedToken(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDSLAValue(
      slaOwner_: string,
      sla_: string,
      periodIdsLength_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerStakedSla(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnLockedValue(sla_: string, overrides?: CallOverrides): Promise<void>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createDToken(
      _name: string,
      _symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeVerificationRewards(
      _sla: string,
      _verificationRewardReceiver: string,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakingParameters(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedToken(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDSLAValue(
      slaOwner_: string,
      sla_: string,
      periodIdsLength_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerStakedSla(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnLockedValue(
      sla_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSLATokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDToken(
      _name: string,
      _symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeVerificationRewards(
      _sla: string,
      _verificationRewardReceiver: string,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakingParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToken(
      tokenAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDSLAValue(
      slaOwner_: string,
      sla_: string,
      periodIdsLength_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerStakedSla(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnLockedValue(
      sla_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
