/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PeriodRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addPeriodsToPeriodType(uint8,uint256[],uint256[])": FunctionFragment;
    "getPeriodDefinitions()": FunctionFragment;
    "getPeriodStartAndEnd(uint8,uint256)": FunctionFragment;
    "initializePeriod(uint8,uint256[],uint256[])": FunctionFragment;
    "isInitializedPeriod(uint8)": FunctionFragment;
    "isValidPeriod(uint8,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodDefinitions(uint8)": FunctionFragment;
    "periodHasStarted(uint8,uint256)": FunctionFragment;
    "periodIsFinished(uint8,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPeriodsToPeriodType",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodDefinitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodStartAndEnd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePeriod",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializedPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodDefinitions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodHasStarted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodIsFinished",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPeriodsToPeriodType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodStartAndEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitializedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodHasStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodIsFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodInitialized(uint8,uint256)": EventFragment;
    "PeriodModified(uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodModified"): EventFragment;
}

export class PeriodRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PeriodRegistryInterface;

  functions: {
    addPeriodsToPeriodType(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<
      [
        ([boolean, BigNumber[], BigNumber[]] & {
          initialized: boolean;
          starts: BigNumber[];
          ends: BigNumber[];
        })[]
      ]
    >;

    getPeriodStartAndEnd(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    initializePeriod(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitializedPeriod(
      _periodType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    isValidPeriod(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodDefinitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { initialized: boolean }>;

    periodHasStarted(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { started: boolean }>;

    periodIsFinished(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { finished: boolean }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPeriodsToPeriodType(
    _periodType: BigNumberish,
    _periodStarts: BigNumberish[],
    _periodEnds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPeriodDefinitions(
    overrides?: CallOverrides
  ): Promise<
    ([boolean, BigNumber[], BigNumber[]] & {
      initialized: boolean;
      starts: BigNumber[];
      ends: BigNumber[];
    })[]
  >;

  getPeriodStartAndEnd(
    _periodType: BigNumberish,
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  initializePeriod(
    _periodType: BigNumberish,
    _periodStarts: BigNumberish[],
    _periodEnds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitializedPeriod(
    _periodType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidPeriod(
    _periodType: BigNumberish,
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodDefinitions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodHasStarted(
    _periodType: BigNumberish,
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodIsFinished(
    _periodType: BigNumberish,
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPeriodsToPeriodType(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<
      ([boolean, BigNumber[], BigNumber[]] & {
        initialized: boolean;
        starts: BigNumber[];
        ends: BigNumber[];
      })[]
    >;

    getPeriodStartAndEnd(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    initializePeriod(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitializedPeriod(
      _periodType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidPeriod(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodDefinitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodHasStarted(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodIsFinished(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PeriodInitialized(
      periodType?: null,
      periodsAdded?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { periodType: number; periodsAdded: BigNumber }
    >;

    PeriodModified(
      periodType?: null,
      periodsAdded?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { periodType: number; periodsAdded: BigNumber }
    >;
  };

  estimateGas: {
    addPeriodsToPeriodType(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPeriodDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriodStartAndEnd(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePeriod(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitializedPeriod(
      _periodType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidPeriod(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodDefinitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodHasStarted(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodIsFinished(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPeriodsToPeriodType(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPeriodDefinitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodStartAndEnd(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePeriod(
      _periodType: BigNumberish,
      _periodStarts: BigNumberish[],
      _periodEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitializedPeriod(
      _periodType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidPeriod(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodDefinitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodHasStarted(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodIsFinished(
      _periodType: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
