/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MessengerRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getMessengers()": FunctionFragment;
    "getMessengersLength()": FunctionFragment;
    "messengers(uint256)": FunctionFragment;
    "modifyMessenger(string,uint256)": FunctionFragment;
    "ownerMessengers(address,uint256)": FunctionFragment;
    "registerMessenger(address,address,string)": FunctionFragment;
    "registeredMessengers(address)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
    "slaRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMessengers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessengersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messengers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyMessenger",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerMessengers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMessenger",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredMessengers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slaRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMessengers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessengersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messengers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerMessengers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredMessengers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaRegistry",
    data: BytesLike
  ): Result;

  events: {
    "MessengerModified(address,address,string,uint256,uint256)": EventFragment;
    "MessengerRegistered(address,address,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessengerModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessengerRegistered"): EventFragment;
}

export class MessengerRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MessengerRegistryInterface;

  functions: {
    getMessengers(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          ownerAddress: string;
          messengerAddress: string;
          specificationUrl: string;
          precision: BigNumber;
          requestsCounter: BigNumber;
          fulfillsCounter: BigNumber;
          id: BigNumber;
        })[]
      ]
    >;

    getMessengersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    messengers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ownerAddress: string;
        messengerAddress: string;
        specificationUrl: string;
        precision: BigNumber;
        requestsCounter: BigNumber;
        fulfillsCounter: BigNumber;
        id: BigNumber;
      }
    >;

    modifyMessenger(
      _specificationUrl: string,
      _messengerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerMessengers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerMessenger(
      _callerAddress: string,
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredMessengers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slaRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  getMessengers(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ownerAddress: string;
      messengerAddress: string;
      specificationUrl: string;
      precision: BigNumber;
      requestsCounter: BigNumber;
      fulfillsCounter: BigNumber;
      id: BigNumber;
    })[]
  >;

  getMessengersLength(overrides?: CallOverrides): Promise<BigNumber>;

  messengers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ownerAddress: string;
      messengerAddress: string;
      specificationUrl: string;
      precision: BigNumber;
      requestsCounter: BigNumber;
      fulfillsCounter: BigNumber;
      id: BigNumber;
    }
  >;

  modifyMessenger(
    _specificationUrl: string,
    _messengerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerMessengers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerMessenger(
    _callerAddress: string,
    _messengerAddress: string,
    _specificationUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredMessengers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setSLARegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slaRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getMessengers(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ownerAddress: string;
        messengerAddress: string;
        specificationUrl: string;
        precision: BigNumber;
        requestsCounter: BigNumber;
        fulfillsCounter: BigNumber;
        id: BigNumber;
      })[]
    >;

    getMessengersLength(overrides?: CallOverrides): Promise<BigNumber>;

    messengers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ownerAddress: string;
        messengerAddress: string;
        specificationUrl: string;
        precision: BigNumber;
        requestsCounter: BigNumber;
        fulfillsCounter: BigNumber;
        id: BigNumber;
      }
    >;

    modifyMessenger(
      _specificationUrl: string,
      _messengerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerMessengers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMessenger(
      _callerAddress: string,
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredMessengers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;

    slaRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    MessengerModified(
      ownerAddress?: string | null,
      messengerAddress?: string | null,
      specificationUrl?: null,
      precision?: null,
      id?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        ownerAddress: string;
        messengerAddress: string;
        specificationUrl: string;
        precision: BigNumber;
        id: BigNumber;
      }
    >;

    MessengerRegistered(
      ownerAddress?: string | null,
      messengerAddress?: string | null,
      specificationUrl?: null,
      precision?: null,
      id?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        ownerAddress: string;
        messengerAddress: string;
        specificationUrl: string;
        precision: BigNumber;
        id: BigNumber;
      }
    >;
  };

  estimateGas: {
    getMessengers(overrides?: CallOverrides): Promise<BigNumber>;

    getMessengersLength(overrides?: CallOverrides): Promise<BigNumber>;

    messengers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyMessenger(
      _specificationUrl: string,
      _messengerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerMessengers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMessenger(
      _callerAddress: string,
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredMessengers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slaRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getMessengers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessengersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messengers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyMessenger(
      _specificationUrl: string,
      _messengerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerMessengers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMessenger(
      _callerAddress: string,
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredMessengers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slaRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
