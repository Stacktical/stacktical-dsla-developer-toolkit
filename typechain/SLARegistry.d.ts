/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SLARegistryInterface extends ethers.utils.Interface {
  functions: {
    "SLAs(uint256)": FunctionFragment;
    "allSLAs()": FunctionFragment;
    "checkPastPeriod()": FunctionFragment;
    "createSLA(uint256,uint8,bool,address,uint8,uint128,uint128,string,bytes32[],uint64)": FunctionFragment;
    "isRegisteredSLA(address)": FunctionFragment;
    "messengerRegistry()": FunctionFragment;
    "periodRegistry()": FunctionFragment;
    "registerMessenger(address,string)": FunctionFragment;
    "requestSLI(uint256,address,bool)": FunctionFragment;
    "returnLockedValue(address)": FunctionFragment;
    "sloRegistry()": FunctionFragment;
    "stakeRegistry()": FunctionFragment;
    "userSLAs(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SLAs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "allSLAs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkPastPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSLA",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredSLA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "messengerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMessenger",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSLI",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "returnLockedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sloRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userSLAs", values: [string]): string;

  decodeFunctionResult(functionFragment: "SLAs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allSLAs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPastPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSLA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredSLA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messengerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestSLI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sloRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userSLAs", data: BytesLike): Result;

  events: {
    "ReturnLockedValue(address,address)": EventFragment;
    "SLACreated(address,address)": EventFragment;
    "SLIRequested(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReturnLockedValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLACreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLIRequested"): EventFragment;
}

export type ReturnLockedValueEvent = TypedEvent<
  [string, string] & { sla: string; caller: string }
>;

export type SLACreatedEvent = TypedEvent<
  [string, string] & { sla: string; owner: string }
>;

export type SLIRequestedEvent = TypedEvent<
  [BigNumber, string, string] & {
    periodId: BigNumber;
    sla: string;
    caller: string;
  }
>;

export class SLARegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SLARegistryInterface;

  functions: {
    SLAs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allSLAs(overrides?: CallOverrides): Promise<[string[]]>;

    checkPastPeriod(overrides?: CallOverrides): Promise<[boolean]>;

    createSLA(
      sloValue_: BigNumberish,
      sloType_: BigNumberish,
      whitelisted_: boolean,
      messengerAddress_: string,
      periodType_: BigNumberish,
      initialPeriodId_: BigNumberish,
      finalPeriodId_: BigNumberish,
      ipfsHash_: string,
      extraData_: BytesLike[],
      leverage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredSLA(
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    messengerRegistry(overrides?: CallOverrides): Promise<[string]>;

    periodRegistry(overrides?: CallOverrides): Promise<[string]>;

    registerMessenger(
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSLI(
      _periodId: BigNumberish,
      _sla: string,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnLockedValue(
      _sla: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sloRegistry(overrides?: CallOverrides): Promise<[string]>;

    stakeRegistry(overrides?: CallOverrides): Promise<[string]>;

    userSLAs(_user: string, overrides?: CallOverrides): Promise<[string[]]>;
  };

  SLAs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allSLAs(overrides?: CallOverrides): Promise<string[]>;

  checkPastPeriod(overrides?: CallOverrides): Promise<boolean>;

  createSLA(
    sloValue_: BigNumberish,
    sloType_: BigNumberish,
    whitelisted_: boolean,
    messengerAddress_: string,
    periodType_: BigNumberish,
    initialPeriodId_: BigNumberish,
    finalPeriodId_: BigNumberish,
    ipfsHash_: string,
    extraData_: BytesLike[],
    leverage_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredSLA(
    _slaAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  messengerRegistry(overrides?: CallOverrides): Promise<string>;

  periodRegistry(overrides?: CallOverrides): Promise<string>;

  registerMessenger(
    _messengerAddress: string,
    _specificationUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSLI(
    _periodId: BigNumberish,
    _sla: string,
    _ownerApproval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnLockedValue(
    _sla: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sloRegistry(overrides?: CallOverrides): Promise<string>;

  stakeRegistry(overrides?: CallOverrides): Promise<string>;

  userSLAs(_user: string, overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    SLAs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allSLAs(overrides?: CallOverrides): Promise<string[]>;

    checkPastPeriod(overrides?: CallOverrides): Promise<boolean>;

    createSLA(
      sloValue_: BigNumberish,
      sloType_: BigNumberish,
      whitelisted_: boolean,
      messengerAddress_: string,
      periodType_: BigNumberish,
      initialPeriodId_: BigNumberish,
      finalPeriodId_: BigNumberish,
      ipfsHash_: string,
      extraData_: BytesLike[],
      leverage_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredSLA(
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    messengerRegistry(overrides?: CallOverrides): Promise<string>;

    periodRegistry(overrides?: CallOverrides): Promise<string>;

    registerMessenger(
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSLI(
      _periodId: BigNumberish,
      _sla: string,
      _ownerApproval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    returnLockedValue(_sla: string, overrides?: CallOverrides): Promise<void>;

    sloRegistry(overrides?: CallOverrides): Promise<string>;

    stakeRegistry(overrides?: CallOverrides): Promise<string>;

    userSLAs(_user: string, overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "ReturnLockedValue(address,address)"(
      sla?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { sla: string; caller: string }>;

    ReturnLockedValue(
      sla?: string | null,
      caller?: string | null
    ): TypedEventFilter<[string, string], { sla: string; caller: string }>;

    "SLACreated(address,address)"(
      sla?: string | null,
      owner?: string | null
    ): TypedEventFilter<[string, string], { sla: string; owner: string }>;

    SLACreated(
      sla?: string | null,
      owner?: string | null
    ): TypedEventFilter<[string, string], { sla: string; owner: string }>;

    "SLIRequested(uint256,address,address)"(
      periodId?: null,
      sla?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { periodId: BigNumber; sla: string; caller: string }
    >;

    SLIRequested(
      periodId?: null,
      sla?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { periodId: BigNumber; sla: string; caller: string }
    >;
  };

  estimateGas: {
    SLAs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allSLAs(overrides?: CallOverrides): Promise<BigNumber>;

    checkPastPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    createSLA(
      sloValue_: BigNumberish,
      sloType_: BigNumberish,
      whitelisted_: boolean,
      messengerAddress_: string,
      periodType_: BigNumberish,
      initialPeriodId_: BigNumberish,
      finalPeriodId_: BigNumberish,
      ipfsHash_: string,
      extraData_: BytesLike[],
      leverage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredSLA(
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messengerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    periodRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    registerMessenger(
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSLI(
      _periodId: BigNumberish,
      _sla: string,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnLockedValue(
      _sla: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sloRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    stakeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    userSLAs(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SLAs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allSLAs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkPastPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSLA(
      sloValue_: BigNumberish,
      sloType_: BigNumberish,
      whitelisted_: boolean,
      messengerAddress_: string,
      periodType_: BigNumberish,
      initialPeriodId_: BigNumberish,
      finalPeriodId_: BigNumberish,
      ipfsHash_: string,
      extraData_: BytesLike[],
      leverage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredSLA(
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messengerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMessenger(
      _messengerAddress: string,
      _specificationUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSLI(
      _periodId: BigNumberish,
      _sla: string,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnLockedValue(
      _sla: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sloRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userSLAs(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
