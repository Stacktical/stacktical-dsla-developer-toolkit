/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IStakeRegistry,
  IStakeRegistryInterface,
} from "../IStakeRegistry";

const _abi = [
  {
    inputs: [],
    name: "DSLATokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    name: "createDToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sla",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verificationRewardReceiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_periodId",
        type: "uint256",
      },
    ],
    name: "distributeVerificationRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingParameters",
    outputs: [
      {
        internalType: "uint256",
        name: "DSLAburnRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dslaDepositByPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dslaPlatformReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dslaMessengerReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dslaUserReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dslaBurnedByVerification",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTokenLength",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "maxLeverage",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "burnDSLA",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress_",
        type: "address",
      },
    ],
    name: "isAllowedToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "slaOwner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "sla_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "periodIdsLength_",
        type: "uint256",
      },
    ],
    name: "lockDSLAValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "registerStakedSla",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sla_",
        type: "address",
      },
    ],
    name: "returnLockedValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setSLARegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IStakeRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IStakeRegistryInterface {
    return new utils.Interface(_abi) as IStakeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStakeRegistry {
    return new Contract(address, _abi, signerOrProvider) as IStakeRegistry;
  }
}
