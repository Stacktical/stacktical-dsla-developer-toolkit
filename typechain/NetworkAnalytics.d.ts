/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NetworkAnalyticsInterface extends ethers.utils.Interface {
  functions: {
    "addMultipleNetworks(bytes32[])": FunctionFragment;
    "addNetwork(bytes32)": FunctionFragment;
    "fee()": FunctionFragment;
    "fulFillAnalytics(bytes32,bytes32)": FunctionFragment;
    "getNetworkNames()": FunctionFragment;
    "isValidNetwork(bytes32)": FunctionFragment;
    "networkNames(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodAnalytics(bytes32,uint8,uint256)": FunctionFragment;
    "periodAnalyticsRequested(bytes32,uint8,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestAnalytics(uint256,uint8,bytes32,bool)": FunctionFragment;
    "requestIdToAnalyticsRequest(bytes32)": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "setChainlinkJobID(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMultipleNetworks",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addNetwork",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulFillAnalytics",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNetwork",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "networkNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodAnalytics",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodAnalyticsRequested",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAnalytics",
    values: [BigNumberish, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToAnalyticsRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkJobID",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMultipleNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNetwork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulFillAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodAnalyticsRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToAnalyticsRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkJobID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AnalyticsReceived(bytes32,uint8,uint256,bytes32)": EventFragment;
    "CallerRewardModified(address,uint256)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "JobIdModified(address,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnalyticsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerRewardModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JobIdModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NetworkAnalytics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NetworkAnalyticsInterface;

  functions: {
    addMultipleNetworks(
      _networkNames: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNetwork(
      _networkName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulFillAnalytics(
      _requestId: BytesLike,
      _chainlinkResponse: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNetworkNames(
      overrides?: CallOverrides
    ): Promise<[string[]] & { networks: string[] }>;

    isValidNetwork(
      _networkName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    networkNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodAnalytics(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    periodAnalyticsRequested(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestAnalytics(
      _periodId: BigNumberish,
      _periodType: BigNumberish,
      _networkName: BytesLike,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestIdToAnalyticsRequest(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        networkName: string;
        periodId: BigNumber;
        periodType: number;
      }
    >;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setChainlinkJobID(
      _jobId: BytesLike,
      _feeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMultipleNetworks(
    _networkNames: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNetwork(
    _networkName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  fulFillAnalytics(
    _requestId: BytesLike,
    _chainlinkResponse: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNetworkNames(overrides?: CallOverrides): Promise<string[]>;

  isValidNetwork(
    _networkName: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  networkNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodAnalytics(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  periodAnalyticsRequested(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestAnalytics(
    _periodId: BigNumberish,
    _periodType: BigNumberish,
    _networkName: BytesLike,
    _ownerApproval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestIdToAnalyticsRequest(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number] & {
      networkName: string;
      periodId: BigNumber;
      periodType: number;
    }
  >;

  requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setChainlinkJobID(
    _jobId: BytesLike,
    _feeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMultipleNetworks(
      _networkNames: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    addNetwork(
      _networkName: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fulFillAnalytics(
      _requestId: BytesLike,
      _chainlinkResponse: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getNetworkNames(overrides?: CallOverrides): Promise<string[]>;

    isValidNetwork(
      _networkName: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    networkNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodAnalytics(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    periodAnalyticsRequested(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestAnalytics(
      _periodId: BigNumberish,
      _periodType: BigNumberish,
      _networkName: BytesLike,
      _ownerApproval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    requestIdToAnalyticsRequest(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        networkName: string;
        periodId: BigNumber;
        periodType: number;
      }
    >;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setChainlinkJobID(
      _jobId: BytesLike,
      _feeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnalyticsReceived(
      networkName?: null,
      periodType?: null,
      periodId?: null,
      ipfsHash?: null
    ): TypedEventFilter<
      [string, number, BigNumber, string],
      {
        networkName: string;
        periodType: number;
        periodId: BigNumber;
        ipfsHash: string;
      }
    >;

    CallerRewardModified(
      owner?: string | null,
      newValue?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; newValue: BigNumber }
    >;

    ChainlinkCancelled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    JobIdModified(
      owner?: string | null,
      jobId?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; jobId: string; fee: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addMultipleNetworks(
      _networkNames: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNetwork(
      _networkName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fulFillAnalytics(
      _requestId: BytesLike,
      _chainlinkResponse: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNetworkNames(overrides?: CallOverrides): Promise<BigNumber>;

    isValidNetwork(
      _networkName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodAnalytics(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodAnalyticsRequested(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestAnalytics(
      _periodId: BigNumberish,
      _periodType: BigNumberish,
      _networkName: BytesLike,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestIdToAnalyticsRequest(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setChainlinkJobID(
      _jobId: BytesLike,
      _feeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMultipleNetworks(
      _networkNames: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNetwork(
      _networkName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulFillAnalytics(
      _requestId: BytesLike,
      _chainlinkResponse: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNetworkNames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidNetwork(
      _networkName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodAnalytics(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodAnalyticsRequested(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestAnalytics(
      _periodId: BigNumberish,
      _periodType: BigNumberish,
      _networkName: BytesLike,
      _ownerApproval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToAnalyticsRequest(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChainlinkJobID(
      _jobId: BytesLike,
      _feeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
