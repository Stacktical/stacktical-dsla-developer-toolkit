{
  "details": "contract to get the network analytics for the staking efficiency use case",
  "methods": {
    "addMultipleNetworks(bytes32[])": {
      "details": "function to add multiple valid network names",
      "params": { "_networkNames": "1. bytes32[] network names" }
    },
    "addNetwork(bytes32)": {
      "details": "function to add a valid network name",
      "params": { "_networkName": "1. bytes32 network name" }
    },
    "constructor": {
      "details": "parameterize the variables according to network",
      "params": {
        "_chainlinkOracle": "1. the address of the oracle to create requests to",
        "_chainlinkToken": "2. the address of LINK token contract",
        "_jobId": "3. the job id for the HTTPGet job",
        "_periodRegistry": "4. period registry",
        "_stakeRegistry": "5. stake registry",
        "_feeMultiplier": "6. states the amount of paid nodes running behind the precoordinator, to set the fee"
      }
    },
    "fulFillAnalytics(bytes32,bytes32)": {
      "details": "callback function for the Chainlink SLI request which stores the SLI in the SLA contract",
      "params": {
        "_chainlinkResponse": "response object from Chainlink Oracles",
        "_requestId": "the ID of the ChainLink request"
      }
    },
    "owner()": { "details": "Returns the address of the current owner." },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "requestAnalytics(uint256,uint8,bytes32,bool)": {
      "details": "Request analytics object for the current period.",
      "params": {
        "_periodId": "1. id of the canonical period to be analyzed",
        "_periodType": "2. type of period to be queried",
        "_networkName": "3. network name to publish analytics",
        "_ownerApproval": "4. used to choose if the call is going to be funded by the contract owner, to avoid a block by contract owner"
      }
    },
    "setChainlinkJobID(bytes32,uint256)": {
      "details": "sets a new jobId, which is a agreement Id of a PreCoordinator contract",
      "params": {
        "_feeMultiplier": "how many Chainlink nodes would be paid on the agreement id, to set the fee value",
        "_jobId": "the id of the PreCoordinator agreement"
      }
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "title": "NetworkAnalytics"
}
