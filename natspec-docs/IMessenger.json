{
  "details": "Interface to create new Messenger contract to add lo Messenger lists",
  "methods": {
    "fee()": { "details": "gets the fee amount of LINK token" },
    "fulfillSLI(bytes32,uint256)": {
      "details": "callback function for the Chainlink SLI request which stores the SLI in the SLA contract",
      "params": {
        "_chainlinkResponseUint256": "response object from Chainlink Oracles",
        "_requestId": "the ID of the ChainLink request"
      }
    },
    "fulfillsCounter()": { "details": "returns the fulfillsCounter" },
    "jobId()": { "details": "gets the chainlink job id" },
    "messengerPrecision()": { "details": "gets the messenger precision" },
    "oracle()": { "details": "gets the chainlink oracle contract address" },
    "owner()": { "details": "Returns the address of the current owner." },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "requestSLI(uint256,address,bool,address)": {
      "details": "creates a ChainLink request to get a new SLI value for the given params. Can only be called by the SLARegistry contract or Chainlink Oracle.",
      "params": {
        "_periodId": "1. id of the period to be queried",
        "_slaAddress": "2. if approval by owner or msg.sender"
      }
    },
    "requestsCounter()": { "details": "returns the requestsCounter" },
    "setSLARegistry()": {
      "details": "sets the SLARegistry contract address and can only be called once"
    },
    "slaRegistryAddress()": { "details": "gets the slaRegistryAddress" },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "title": "IMessenger"
}
