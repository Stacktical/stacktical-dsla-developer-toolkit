// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SLA extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SLA entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SLA entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SLA", id.toString(), this);
  }

  static load(id: string): SLA | null {
    return store.get("SLA", id) as SLA | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slaId(): BigInt | null {
    let value = this.get("slaId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set slaId(value: BigInt | null) {
    if (value === null) {
      this.unset("slaId");
    } else {
      this.set("slaId", Value.fromBigInt(value as BigInt));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get DTokens(): Array<string> | null {
    let value = this.get("DTokens");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set DTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("DTokens");
    } else {
      this.set("DTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get SLIs(): Array<string> | null {
    let value = this.get("SLIs");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set SLIs(value: Array<string> | null) {
    if (value === null) {
      this.unset("SLIs");
    } else {
      this.set("SLIs", Value.fromStringArray(value as Array<string>));
    }
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (value === null) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(value as Array<string>));
    }
  }

  get withdraws(): Array<string> | null {
    let value = this.get("withdraws");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdraws(value: Array<string> | null) {
    if (value === null) {
      this.unset("withdraws");
    } else {
      this.set("withdraws", Value.fromStringArray(value as Array<string>));
    }
  }

  get sloValue(): BigInt | null {
    let value = this.get("sloValue");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sloValue(value: BigInt | null) {
    if (value === null) {
      this.unset("sloValue");
    } else {
      this.set("sloValue", Value.fromBigInt(value as BigInt));
    }
  }

  get sloType(): i32 {
    let value = this.get("sloType");
    return value.toI32();
  }

  set sloType(value: i32) {
    this.set("sloType", Value.fromI32(value));
  }

  get messengerAddress(): Bytes | null {
    let value = this.get("messengerAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set messengerAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("messengerAddress");
    } else {
      this.set("messengerAddress", Value.fromBytes(value as Bytes));
    }
  }

  get ipfsHash(): string | null {
    let value = this.get("ipfsHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string | null) {
    if (value === null) {
      this.unset("ipfsHash");
    } else {
      this.set("ipfsHash", Value.fromString(value as string));
    }
  }

  get stakersCount(): BigInt | null {
    let value = this.get("stakersCount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakersCount(value: BigInt | null) {
    if (value === null) {
      this.unset("stakersCount");
    } else {
      this.set("stakersCount", Value.fromBigInt(value as BigInt));
    }
  }

  get periodType(): i32 {
    let value = this.get("periodType");
    return value.toI32();
  }

  set periodType(value: i32) {
    this.set("periodType", Value.fromI32(value));
  }

  get breachedContract(): boolean {
    let value = this.get("breachedContract");
    return value.toBoolean();
  }

  set breachedContract(value: boolean) {
    this.set("breachedContract", Value.fromBoolean(value));
  }

  get creationBlockNumber(): BigInt | null {
    let value = this.get("creationBlockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set creationBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("creationBlockNumber");
    } else {
      this.set("creationBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get nextVerifiablePeriod(): BigInt | null {
    let value = this.get("nextVerifiablePeriod");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextVerifiablePeriod(value: BigInt | null) {
    if (value === null) {
      this.unset("nextVerifiablePeriod");
    } else {
      this.set("nextVerifiablePeriod", Value.fromBigInt(value as BigInt));
    }
  }

  get whiteListed(): boolean {
    let value = this.get("whiteListed");
    return value.toBoolean();
  }

  set whiteListed(value: boolean) {
    this.set("whiteListed", Value.fromBoolean(value));
  }

  get initialPeriodId(): BigInt | null {
    let value = this.get("initialPeriodId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialPeriodId(value: BigInt | null) {
    if (value === null) {
      this.unset("initialPeriodId");
    } else {
      this.set("initialPeriodId", Value.fromBigInt(value as BigInt));
    }
  }

  get finalPeriodId(): BigInt | null {
    let value = this.get("finalPeriodId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finalPeriodId(value: BigInt | null) {
    if (value === null) {
      this.unset("finalPeriodId");
    } else {
      this.set("finalPeriodId", Value.fromBigInt(value as BigInt));
    }
  }

  get leverage(): BigInt | null {
    let value = this.get("leverage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt | null) {
    if (value === null) {
      this.unset("leverage");
    } else {
      this.set("leverage", Value.fromBigInt(value as BigInt));
    }
  }
}

export class SLI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SLI entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SLI entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SLI", id.toString(), this);
  }

  static load(id: string): SLI | null {
    return store.get("SLI", id) as SLI | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sla(): Bytes {
    let value = this.get("sla");
    return value.toBytes();
  }

  set sla(value: Bytes) {
    this.set("sla", Value.fromBytes(value));
  }

  get periodId(): BigInt {
    let value = this.get("periodId");
    return value.toBigInt();
  }

  set periodId(value: BigInt) {
    this.set("periodId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sli(): BigInt {
    let value = this.get("sli");
    return value.toBigInt();
  }

  set sli(value: BigInt) {
    this.set("sli", Value.fromBigInt(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class DToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DToken", id.toString(), this);
  }

  static load(id: string): DToken | null {
    return store.get("DToken", id) as DToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get slaAddress(): Bytes {
    let value = this.get("slaAddress");
    return value.toBytes();
  }

  set slaAddress(value: Bytes) {
    this.set("slaAddress", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get spAddress(): Bytes {
    let value = this.get("spAddress");
    return value.toBytes();
  }

  set spAddress(value: Bytes) {
    this.set("spAddress", Value.fromBytes(value));
  }

  get lpAddress(): Bytes {
    let value = this.get("lpAddress");
    return value.toBytes();
  }

  set lpAddress(value: Bytes) {
    this.set("lpAddress", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositType(): string {
    let value = this.get("depositType");
    return value.toString();
  }

  set depositType(value: string) {
    this.set("depositType", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdraw", id.toString(), this);
  }

  static load(id: string): Withdraw | null {
    return store.get("Withdraw", id) as Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositType(): string {
    let value = this.get("depositType");
    return value.toString();
  }

  set depositType(value: string) {
    this.set("depositType", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }
}
