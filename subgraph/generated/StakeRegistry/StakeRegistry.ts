// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DTokenCreated extends ethereum.Event {
  get params(): DTokenCreated__Params {
    return new DTokenCreated__Params(this);
  }
}

export class DTokenCreated__Params {
  _event: DTokenCreated;

  constructor(event: DTokenCreated) {
    this._event = event;
  }

  get dTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sla(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class LockedValueReturned extends ethereum.Event {
  get params(): LockedValueReturned__Params {
    return new LockedValueReturned__Params(this);
  }
}

export class LockedValueReturned__Params {
  _event: LockedValueReturned;

  constructor(event: LockedValueReturned) {
    this._event = event;
  }

  get sla(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakingParametersModified extends ethereum.Event {
  get params(): StakingParametersModified__Params {
    return new StakingParametersModified__Params(this);
  }
}

export class StakingParametersModified__Params {
  _event: StakingParametersModified;

  constructor(event: StakingParametersModified) {
    this._event = event;
  }

  get DSLAburnRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dslaDepositByPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dslaPlatformReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dslaMessengerReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dslaUserReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get dslaBurnedByVerification(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get maxTokenLength(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get maxLeverage(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get burnDSLA(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class ValueLocked extends ethereum.Event {
  get params(): ValueLocked__Params {
    return new ValueLocked__Params(this);
  }
}

export class ValueLocked__Params {
  _event: ValueLocked;

  constructor(event: ValueLocked) {
    this._event = event;
  }

  get sla(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VerificationRewardDistributed extends ethereum.Event {
  get params(): VerificationRewardDistributed__Params {
    return new VerificationRewardDistributed__Params(this);
  }
}

export class VerificationRewardDistributed__Params {
  _event: VerificationRewardDistributed;

  constructor(event: VerificationRewardDistributed) {
    this._event = event;
  }

  get sla(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get userReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get platformReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get messengerReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get burnedDSLA(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StakeRegistry__getActivePoolResultValue0Struct extends ethereum.Tuple {
  get SLAAddress(): Address {
    return this[0].toAddress();
  }

  get stake(): BigInt {
    return this[1].toBigInt();
  }

  get assetName(): string {
    return this[2].toString();
  }

  get assetAddress(): Address {
    return this[3].toAddress();
  }
}

export class StakeRegistry__getStakingParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }
}

export class StakeRegistry__slaLockedValueResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class StakeRegistry extends ethereum.SmartContract {
  static bind(address: Address): StakeRegistry {
    return new StakeRegistry("StakeRegistry", address);
  }

  DSLATokenAddress(): Address {
    let result = super.call(
      "DSLATokenAddress",
      "DSLATokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_DSLATokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DSLATokenAddress",
      "DSLATokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowedTokens(param0: BigInt): Address {
    let result = super.call(
      "allowedTokens",
      "allowedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allowedTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allowedTokens",
      "allowedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createDToken(_name: string, _symbol: string): Address {
    let result = super.call(
      "createDToken",
      "createDToken(string,string):(address)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );

    return result[0].toAddress();
  }

  try_createDToken(
    _name: string,
    _symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createDToken",
      "createDToken(string,string):(address)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActivePool(
    _slaOwner: Address
  ): Array<StakeRegistry__getActivePoolResultValue0Struct> {
    let result = super.call(
      "getActivePool",
      "getActivePool(address):((address,uint256,string,address)[])",
      [ethereum.Value.fromAddress(_slaOwner)]
    );

    return result[0].toTupleArray<
      StakeRegistry__getActivePoolResultValue0Struct
    >();
  }

  try_getActivePool(
    _slaOwner: Address
  ): ethereum.CallResult<
    Array<StakeRegistry__getActivePoolResultValue0Struct>
  > {
    let result = super.tryCall(
      "getActivePool",
      "getActivePool(address):((address,uint256,string,address)[])",
      [ethereum.Value.fromAddress(_slaOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<StakeRegistry__getActivePoolResultValue0Struct>()
    );
  }

  getStakingParameters(): StakeRegistry__getStakingParametersResult {
    let result = super.call(
      "getStakingParameters",
      "getStakingParameters():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)",
      []
    );

    return new StakeRegistry__getStakingParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_getStakingParameters(): ethereum.CallResult<
    StakeRegistry__getStakingParametersResult
  > {
    let result = super.tryCall(
      "getStakingParameters",
      "getStakingParameters():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint64,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeRegistry__getStakingParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  isAllowedToken(_tokenAddress: Address): boolean {
    let result = super.call(
      "isAllowedToken",
      "isAllowedToken(address):(bool)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_isAllowedToken(_tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowedToken",
      "isAllowedToken(address):(bool)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodIsVerified(_sla: Address, _periodId: BigInt): boolean {
    let result = super.call(
      "periodIsVerified",
      "periodIsVerified(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sla),
        ethereum.Value.fromUnsignedBigInt(_periodId)
      ]
    );

    return result[0].toBoolean();
  }

  try_periodIsVerified(
    _sla: Address,
    _periodId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "periodIsVerified",
      "periodIsVerified(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sla),
        ethereum.Value.fromUnsignedBigInt(_periodId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerStakedSla(_owner: Address): boolean {
    let result = super.call(
      "registerStakedSla",
      "registerStakedSla(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBoolean();
  }

  try_registerStakedSla(_owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerStakedSla",
      "registerStakedSla(address):(bool)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  slaLockedValue(param0: Address): StakeRegistry__slaLockedValueResult {
    let result = super.call(
      "slaLockedValue",
      "slaLockedValue(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StakeRegistry__slaLockedValueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_slaLockedValue(
    param0: Address
  ): ethereum.CallResult<StakeRegistry__slaLockedValueResult> {
    let result = super.tryCall(
      "slaLockedValue",
      "slaLockedValue(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeRegistry__slaLockedValueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  slaRegistry(): Address {
    let result = super.call("slaRegistry", "slaRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_slaRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("slaRegistry", "slaRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slaWasStakedByUser(_user: Address, _sla: Address): boolean {
    let result = super.call(
      "slaWasStakedByUser",
      "slaWasStakedByUser(address,address):(bool)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_sla)]
    );

    return result[0].toBoolean();
  }

  try_slaWasStakedByUser(
    _user: Address,
    _sla: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "slaWasStakedByUser",
      "slaWasStakedByUser(address,address):(bool)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_sla)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userStakedSlas(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "userStakedSlas",
      "userStakedSlas(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_userStakedSlas(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userStakedSlas",
      "userStakedSlas(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dslaTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAllowedTokensCall extends ethereum.Call {
  get inputs(): AddAllowedTokensCall__Inputs {
    return new AddAllowedTokensCall__Inputs(this);
  }

  get outputs(): AddAllowedTokensCall__Outputs {
    return new AddAllowedTokensCall__Outputs(this);
  }
}

export class AddAllowedTokensCall__Inputs {
  _call: AddAllowedTokensCall;

  constructor(call: AddAllowedTokensCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedTokensCall__Outputs {
  _call: AddAllowedTokensCall;

  constructor(call: AddAllowedTokensCall) {
    this._call = call;
  }
}

export class CreateDTokenCall extends ethereum.Call {
  get inputs(): CreateDTokenCall__Inputs {
    return new CreateDTokenCall__Inputs(this);
  }

  get outputs(): CreateDTokenCall__Outputs {
    return new CreateDTokenCall__Outputs(this);
  }
}

export class CreateDTokenCall__Inputs {
  _call: CreateDTokenCall;

  constructor(call: CreateDTokenCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateDTokenCall__Outputs {
  _call: CreateDTokenCall;

  constructor(call: CreateDTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DistributeVerificationRewardsCall extends ethereum.Call {
  get inputs(): DistributeVerificationRewardsCall__Inputs {
    return new DistributeVerificationRewardsCall__Inputs(this);
  }

  get outputs(): DistributeVerificationRewardsCall__Outputs {
    return new DistributeVerificationRewardsCall__Outputs(this);
  }
}

export class DistributeVerificationRewardsCall__Inputs {
  _call: DistributeVerificationRewardsCall;

  constructor(call: DistributeVerificationRewardsCall) {
    this._call = call;
  }

  get _sla(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _verificationRewardReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _periodId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DistributeVerificationRewardsCall__Outputs {
  _call: DistributeVerificationRewardsCall;

  constructor(call: DistributeVerificationRewardsCall) {
    this._call = call;
  }
}

export class LockDSLAValueCall extends ethereum.Call {
  get inputs(): LockDSLAValueCall__Inputs {
    return new LockDSLAValueCall__Inputs(this);
  }

  get outputs(): LockDSLAValueCall__Outputs {
    return new LockDSLAValueCall__Outputs(this);
  }
}

export class LockDSLAValueCall__Inputs {
  _call: LockDSLAValueCall;

  constructor(call: LockDSLAValueCall) {
    this._call = call;
  }

  get _slaOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sla(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _periodIdsLength(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LockDSLAValueCall__Outputs {
  _call: LockDSLAValueCall;

  constructor(call: LockDSLAValueCall) {
    this._call = call;
  }
}

export class RegisterStakedSlaCall extends ethereum.Call {
  get inputs(): RegisterStakedSlaCall__Inputs {
    return new RegisterStakedSlaCall__Inputs(this);
  }

  get outputs(): RegisterStakedSlaCall__Outputs {
    return new RegisterStakedSlaCall__Outputs(this);
  }
}

export class RegisterStakedSlaCall__Inputs {
  _call: RegisterStakedSlaCall;

  constructor(call: RegisterStakedSlaCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterStakedSlaCall__Outputs {
  _call: RegisterStakedSlaCall;

  constructor(call: RegisterStakedSlaCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReturnLockedValueCall extends ethereum.Call {
  get inputs(): ReturnLockedValueCall__Inputs {
    return new ReturnLockedValueCall__Inputs(this);
  }

  get outputs(): ReturnLockedValueCall__Outputs {
    return new ReturnLockedValueCall__Outputs(this);
  }
}

export class ReturnLockedValueCall__Inputs {
  _call: ReturnLockedValueCall;

  constructor(call: ReturnLockedValueCall) {
    this._call = call;
  }

  get _sla(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReturnLockedValueCall__Outputs {
  _call: ReturnLockedValueCall;

  constructor(call: ReturnLockedValueCall) {
    this._call = call;
  }
}

export class SetSLARegistryCall extends ethereum.Call {
  get inputs(): SetSLARegistryCall__Inputs {
    return new SetSLARegistryCall__Inputs(this);
  }

  get outputs(): SetSLARegistryCall__Outputs {
    return new SetSLARegistryCall__Outputs(this);
  }
}

export class SetSLARegistryCall__Inputs {
  _call: SetSLARegistryCall;

  constructor(call: SetSLARegistryCall) {
    this._call = call;
  }
}

export class SetSLARegistryCall__Outputs {
  _call: SetSLARegistryCall;

  constructor(call: SetSLARegistryCall) {
    this._call = call;
  }
}

export class SetStakingParametersCall extends ethereum.Call {
  get inputs(): SetStakingParametersCall__Inputs {
    return new SetStakingParametersCall__Inputs(this);
  }

  get outputs(): SetStakingParametersCall__Outputs {
    return new SetStakingParametersCall__Outputs(this);
  }
}

export class SetStakingParametersCall__Inputs {
  _call: SetStakingParametersCall;

  constructor(call: SetStakingParametersCall) {
    this._call = call;
  }

  get DSLAburnRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dslaDepositByPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dslaPlatformReward(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get dslaMessengerReward(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get dslaUserReward(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get dslaBurnedByVerification(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxTokenLength(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get maxLeverage(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get burnDSLA(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class SetStakingParametersCall__Outputs {
  _call: SetStakingParametersCall;

  constructor(call: SetStakingParametersCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
